// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __AXISTry_sigmoid_arr_H__
#define __AXISTry_sigmoid_arr_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct AXISTry_sigmoid_arr_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 8;
  static const unsigned AddressRange = 2048;
  static const unsigned AddressWidth = 11;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(AXISTry_sigmoid_arr_ram) {
        for (unsigned i = 0; i < 26 ; i = i + 1) {
            ram[i] = "0b00000100";
        }
        for (unsigned i = 26; i < 77 ; i = i + 1) {
            ram[i] = "0b00000101";
        }
        for (unsigned i = 77; i < 128 ; i = i + 1) {
            ram[i] = "0b00000110";
        }
        for (unsigned i = 128; i < 154 ; i = i + 1) {
            ram[i] = "0b00000111";
        }
        for (unsigned i = 154; i < 180 ; i = i + 1) {
            ram[i] = "0b00001000";
        }
        for (unsigned i = 180; i < 205 ; i = i + 1) {
            ram[i] = "0b00001001";
        }
        for (unsigned i = 205; i < 231 ; i = i + 1) {
            ram[i] = "0b00001010";
        }
        for (unsigned i = 231; i < 256 ; i = i + 1) {
            ram[i] = "0b00001011";
        }
        for (unsigned i = 256; i < 282 ; i = i + 1) {
            ram[i] = "0b00001100";
        }
        for (unsigned i = 282; i < 308 ; i = i + 1) {
            ram[i] = "0b00001101";
        }
        for (unsigned i = 308; i < 333 ; i = i + 1) {
            ram[i] = "0b00001110";
        }
        for (unsigned i = 333; i < 359 ; i = i + 1) {
            ram[i] = "0b00010000";
        }
        for (unsigned i = 359; i < 384 ; i = i + 1) {
            ram[i] = "0b00010001";
        }
        for (unsigned i = 384; i < 410 ; i = i + 1) {
            ram[i] = "0b00010011";
        }
        for (unsigned i = 410; i < 436 ; i = i + 1) {
            ram[i] = "0b00010101";
        }
        for (unsigned i = 436; i < 461 ; i = i + 1) {
            ram[i] = "0b00010111";
        }
        for (unsigned i = 461; i < 487 ; i = i + 1) {
            ram[i] = "0b00011001";
        }
        for (unsigned i = 487; i < 512 ; i = i + 1) {
            ram[i] = "0b00011011";
        }
        for (unsigned i = 512; i < 538 ; i = i + 1) {
            ram[i] = "0b00011110";
        }
        for (unsigned i = 538; i < 564 ; i = i + 1) {
            ram[i] = "0b00100001";
        }
        for (unsigned i = 564; i < 589 ; i = i + 1) {
            ram[i] = "0b00100100";
        }
        for (unsigned i = 589; i < 615 ; i = i + 1) {
            ram[i] = "0b00100111";
        }
        for (unsigned i = 615; i < 640 ; i = i + 1) {
            ram[i] = "0b00101011";
        }
        for (unsigned i = 640; i < 666 ; i = i + 1) {
            ram[i] = "0b00101110";
        }
        for (unsigned i = 666; i < 692 ; i = i + 1) {
            ram[i] = "0b00110010";
        }
        for (unsigned i = 692; i < 717 ; i = i + 1) {
            ram[i] = "0b00110110";
        }
        for (unsigned i = 717; i < 743 ; i = i + 1) {
            ram[i] = "0b00111011";
        }
        for (unsigned i = 743; i < 768 ; i = i + 1) {
            ram[i] = "0b00111111";
        }
        for (unsigned i = 768; i < 794 ; i = i + 1) {
            ram[i] = "0b01000100";
        }
        for (unsigned i = 794; i < 820 ; i = i + 1) {
            ram[i] = "0b01001001";
        }
        for (unsigned i = 820; i < 845 ; i = i + 1) {
            ram[i] = "0b01001111";
        }
        for (unsigned i = 845; i < 871 ; i = i + 1) {
            ram[i] = "0b01010100";
        }
        for (unsigned i = 871; i < 896 ; i = i + 1) {
            ram[i] = "0b01011010";
        }
        for (unsigned i = 896; i < 922 ; i = i + 1) {
            ram[i] = "0b01100000";
        }
        for (unsigned i = 922; i < 948 ; i = i + 1) {
            ram[i] = "0b01100110";
        }
        for (unsigned i = 948; i < 973 ; i = i + 1) {
            ram[i] = "0b01101100";
        }
        for (unsigned i = 973; i < 999 ; i = i + 1) {
            ram[i] = "0b01110011";
        }
        for (unsigned i = 999; i < 1024 ; i = i + 1) {
            ram[i] = "0b01111001";
        }
        for (unsigned i = 1024; i < 1049 ; i = i + 1) {
            ram[i] = "0b01111111";
        }
        for (unsigned i = 1049; i < 1075 ; i = i + 1) {
            ram[i] = "0b10000110";
        }
        for (unsigned i = 1075; i < 1100 ; i = i + 1) {
            ram[i] = "0b10001100";
        }
        for (unsigned i = 1100; i < 1126 ; i = i + 1) {
            ram[i] = "0b10010011";
        }
        for (unsigned i = 1126; i < 1151 ; i = i + 1) {
            ram[i] = "0b10011001";
        }
        for (unsigned i = 1151; i < 1177 ; i = i + 1) {
            ram[i] = "0b10011111";
        }
        for (unsigned i = 1177; i < 1203 ; i = i + 1) {
            ram[i] = "0b10100101";
        }
        for (unsigned i = 1203; i < 1228 ; i = i + 1) {
            ram[i] = "0b10101011";
        }
        for (unsigned i = 1228; i < 1254 ; i = i + 1) {
            ram[i] = "0b10110000";
        }
        for (unsigned i = 1254; i < 1279 ; i = i + 1) {
            ram[i] = "0b10110110";
        }
        for (unsigned i = 1279; i < 1305 ; i = i + 1) {
            ram[i] = "0b10111011";
        }
        for (unsigned i = 1305; i < 1331 ; i = i + 1) {
            ram[i] = "0b11000000";
        }
        for (unsigned i = 1331; i < 1356 ; i = i + 1) {
            ram[i] = "0b11000100";
        }
        for (unsigned i = 1356; i < 1382 ; i = i + 1) {
            ram[i] = "0b11001001";
        }
        for (unsigned i = 1382; i < 1407 ; i = i + 1) {
            ram[i] = "0b11001101";
        }
        for (unsigned i = 1407; i < 1433 ; i = i + 1) {
            ram[i] = "0b11010001";
        }
        for (unsigned i = 1433; i < 1459 ; i = i + 1) {
            ram[i] = "0b11010100";
        }
        for (unsigned i = 1459; i < 1484 ; i = i + 1) {
            ram[i] = "0b11011000";
        }
        for (unsigned i = 1484; i < 1510 ; i = i + 1) {
            ram[i] = "0b11011011";
        }
        for (unsigned i = 1510; i < 1535 ; i = i + 1) {
            ram[i] = "0b11011110";
        }
        for (unsigned i = 1535; i < 1561 ; i = i + 1) {
            ram[i] = "0b11100001";
        }
        for (unsigned i = 1561; i < 1587 ; i = i + 1) {
            ram[i] = "0b11100100";
        }
        for (unsigned i = 1587; i < 1612 ; i = i + 1) {
            ram[i] = "0b11100110";
        }
        for (unsigned i = 1612; i < 1638 ; i = i + 1) {
            ram[i] = "0b11101000";
        }
        for (unsigned i = 1638; i < 1663 ; i = i + 1) {
            ram[i] = "0b11101010";
        }
        for (unsigned i = 1663; i < 1689 ; i = i + 1) {
            ram[i] = "0b11101100";
        }
        for (unsigned i = 1689; i < 1715 ; i = i + 1) {
            ram[i] = "0b11101110";
        }
        for (unsigned i = 1715; i < 1740 ; i = i + 1) {
            ram[i] = "0b11101111";
        }
        for (unsigned i = 1740; i < 1766 ; i = i + 1) {
            ram[i] = "0b11110001";
        }
        for (unsigned i = 1766; i < 1791 ; i = i + 1) {
            ram[i] = "0b11110010";
        }
        for (unsigned i = 1791; i < 1817 ; i = i + 1) {
            ram[i] = "0b11110011";
        }
        for (unsigned i = 1817; i < 1843 ; i = i + 1) {
            ram[i] = "0b11110100";
        }
        for (unsigned i = 1843; i < 1868 ; i = i + 1) {
            ram[i] = "0b11110101";
        }
        for (unsigned i = 1868; i < 1894 ; i = i + 1) {
            ram[i] = "0b11110110";
        }
        for (unsigned i = 1894; i < 1919 ; i = i + 1) {
            ram[i] = "0b11110111";
        }
        for (unsigned i = 1919; i < 1945 ; i = i + 1) {
            ram[i] = "0b11111000";
        }
        for (unsigned i = 1945; i < 1996 ; i = i + 1) {
            ram[i] = "0b11111001";
        }
        for (unsigned i = 1996; i < 2047 ; i = i + 1) {
            ram[i] = "0b11111010";
        }
        ram[2047] = "0b11111011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(AXISTry_sigmoid_arr) {


static const unsigned DataWidth = 8;
static const unsigned AddressRange = 2048;
static const unsigned AddressWidth = 11;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


AXISTry_sigmoid_arr_ram* meminst;


SC_CTOR(AXISTry_sigmoid_arr) {
meminst = new AXISTry_sigmoid_arr_ram("AXISTry_sigmoid_arr_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~AXISTry_sigmoid_arr() {
    delete meminst;
}


};//endmodule
#endif
