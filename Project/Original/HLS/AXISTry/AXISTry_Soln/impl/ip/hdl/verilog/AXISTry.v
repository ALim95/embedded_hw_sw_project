// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="AXISTry,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.740000,HLS_SYN_LAT=14564,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=2,HLS_SYN_FF=583,HLS_SYN_LUT=505}" *)

module AXISTry (
        ap_clk,
        ap_rst_n,
        S_AXIS_TDATA,
        S_AXIS_TVALID,
        S_AXIS_TREADY,
        S_AXIS_TLAST,
        M_AXIS_TDATA,
        M_AXIS_TVALID,
        M_AXIS_TREADY,
        M_AXIS_TLAST
);

parameter    ap_ST_fsm_state1 = 30'b1;
parameter    ap_ST_fsm_state2 = 30'b10;
parameter    ap_ST_fsm_state3 = 30'b100;
parameter    ap_ST_fsm_state4 = 30'b1000;
parameter    ap_ST_fsm_state5 = 30'b10000;
parameter    ap_ST_fsm_state6 = 30'b100000;
parameter    ap_ST_fsm_state7 = 30'b1000000;
parameter    ap_ST_fsm_state8 = 30'b10000000;
parameter    ap_ST_fsm_state9 = 30'b100000000;
parameter    ap_ST_fsm_state10 = 30'b1000000000;
parameter    ap_ST_fsm_state11 = 30'b10000000000;
parameter    ap_ST_fsm_state12 = 30'b100000000000;
parameter    ap_ST_fsm_state13 = 30'b1000000000000;
parameter    ap_ST_fsm_state14 = 30'b10000000000000;
parameter    ap_ST_fsm_state15 = 30'b100000000000000;
parameter    ap_ST_fsm_state16 = 30'b1000000000000000;
parameter    ap_ST_fsm_state17 = 30'b10000000000000000;
parameter    ap_ST_fsm_state18 = 30'b100000000000000000;
parameter    ap_ST_fsm_state19 = 30'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 30'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 30'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 30'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 30'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 30'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 30'b1000000000000000000000000;
parameter    ap_ST_fsm_state26 = 30'b10000000000000000000000000;
parameter    ap_ST_fsm_state27 = 30'b100000000000000000000000000;
parameter    ap_ST_fsm_state28 = 30'b1000000000000000000000000000;
parameter    ap_ST_fsm_state29 = 30'b10000000000000000000000000000;
parameter    ap_ST_fsm_state30 = 30'b100000000000000000000000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_1D = 32'b11101;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv15_0 = 15'b000000000000000;
parameter    ap_const_lv32_3039 = 32'b11000000111001;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv16_3FF = 16'b1111111111;
parameter    ap_const_lv16_FC00 = 16'b1111110000000000;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv4_D = 4'b1101;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv3_5 = 3'b101;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv6_24 = 6'b100100;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv13_400 = 13'b10000000000;

input   ap_clk;
input   ap_rst_n;
input  [31:0] S_AXIS_TDATA;
input   S_AXIS_TVALID;
output   S_AXIS_TREADY;
input   S_AXIS_TLAST;
output  [31:0] M_AXIS_TDATA;
output   M_AXIS_TVALID;
input   M_AXIS_TREADY;
output   M_AXIS_TLAST;

reg    ap_rst_n_inv;
reg   [31:0] S_AXIS_V_data_0_data_out;
wire    S_AXIS_V_data_0_vld_in;
wire    S_AXIS_V_data_0_vld_out;
wire    S_AXIS_V_data_0_ack_in;
reg    S_AXIS_V_data_0_ack_out;
reg   [31:0] S_AXIS_V_data_0_payload_A;
reg   [31:0] S_AXIS_V_data_0_payload_B;
reg    S_AXIS_V_data_0_sel_rd;
reg    S_AXIS_V_data_0_sel_wr;
wire    S_AXIS_V_data_0_sel;
wire    S_AXIS_V_data_0_load_A;
wire    S_AXIS_V_data_0_load_B;
reg   [1:0] S_AXIS_V_data_0_state;
wire    S_AXIS_V_data_0_state_cmp_full;
wire    S_AXIS_V_last_0_vld_in;
reg    S_AXIS_V_last_0_ack_out;
reg   [1:0] S_AXIS_V_last_0_state;
reg   [31:0] M_AXIS_V_data_1_data_in;
reg   [31:0] M_AXIS_V_data_1_data_out;
reg    M_AXIS_V_data_1_vld_in;
wire    M_AXIS_V_data_1_vld_out;
wire    M_AXIS_V_data_1_ack_in;
wire    M_AXIS_V_data_1_ack_out;
reg   [31:0] M_AXIS_V_data_1_payload_A;
reg   [31:0] M_AXIS_V_data_1_payload_B;
reg    M_AXIS_V_data_1_sel_rd;
reg    M_AXIS_V_data_1_sel_wr;
wire    M_AXIS_V_data_1_sel;
wire    M_AXIS_V_data_1_load_A;
wire    M_AXIS_V_data_1_load_B;
reg   [1:0] M_AXIS_V_data_1_state;
wire    M_AXIS_V_data_1_state_cmp_full;
wire    M_AXIS_V_last_1_data_out;
reg    M_AXIS_V_last_1_vld_in;
wire    M_AXIS_V_last_1_vld_out;
wire    M_AXIS_V_last_1_ack_in;
wire    M_AXIS_V_last_1_ack_out;
reg    M_AXIS_V_last_1_sel_rd;
wire    M_AXIS_V_last_1_sel;
reg   [1:0] M_AXIS_V_last_1_state;
reg   [6:0] weights_IH_address0;
reg    weights_IH_ce0;
reg    weights_IH_we0;
wire   [15:0] weights_IH_d0;
wire   [15:0] weights_IH_q0;
reg   [3:0] weights_HO_address0;
reg    weights_HO_ce0;
reg    weights_HO_we0;
wire   [15:0] weights_HO_d0;
wire   [15:0] weights_HO_q0;
reg   [3:0] test_data_address0;
reg    test_data_ce0;
reg    test_data_we0;
wire   [15:0] test_data_d0;
wire   [15:0] test_data_q0;
reg   [2:0] values_hidden_layer_address0;
reg    values_hidden_layer_ce0;
reg    values_hidden_layer_we0;
reg   [15:0] values_hidden_layer_d0;
wire   [15:0] values_hidden_layer_q0;
reg   [10:0] sigmoid_arr_address0;
reg    sigmoid_arr_ce0;
wire   [7:0] sigmoid_arr_q0;
reg    values_output_layer_ce0;
reg    values_output_layer_we0;
reg   [15:0] values_output_layer_d0;
wire   [15:0] values_output_layer_q0;
reg    S_AXIS_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [29:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state4;
wire   [0:0] ap_CS_fsm_state7;
wire   [0:0] ap_CS_fsm_state11;
reg    M_AXIS_TDATA_blk_n;
wire   [0:0] ap_CS_fsm_state5;
wire   [0:0] exitcond2_fu_495_p2;
wire   [0:0] ap_CS_fsm_state8;
wire   [0:0] ap_CS_fsm_state21;
wire   [0:0] exitcond8_fu_712_p2;
wire   [0:0] ap_CS_fsm_state30;
wire   [6:0] tmp_1_fu_428_p2;
reg   [6:0] tmp_1_reg_879;
wire   [0:0] ap_CS_fsm_state2;
wire   [3:0] i_5_fu_440_p2;
reg   [3:0] i_5_reg_887;
reg   [6:0] weights_IH_addr_reg_892;
wire   [0:0] ap_CS_fsm_state3;
wire   [2:0] j_4_fu_466_p2;
reg   [2:0] j_4_reg_900;
wire   [4:0] tmp_7_fu_489_p2;
reg   [4:0] tmp_7_reg_905;
wire   [2:0] i_6_fu_501_p2;
reg   [2:0] i_6_reg_913;
reg   [3:0] weights_HO_addr_reg_924;
wire   [0:0] ap_CS_fsm_state6;
wire   [1:0] j_5_fu_527_p2;
reg   [1:0] j_5_reg_932;
wire   [5:0] k_1_fu_544_p2;
reg   [5:0] k_1_reg_940;
wire   [0:0] ap_CS_fsm_state9;
wire   [0:0] exitcond4_fu_538_p2;
wire   [31:0] i_2_cast5_fu_550_p1;
reg   [31:0] i_2_cast5_reg_945;
wire   [0:0] ap_CS_fsm_state10;
wire   [3:0] i_7_fu_560_p2;
reg   [3:0] i_7_reg_953;
wire   [6:0] i_3_cast4_cast_fu_576_p1;
reg   [6:0] i_3_cast4_cast_reg_958;
wire   [0:0] ap_CS_fsm_state12;
wire   [2:0] i_8_fu_586_p2;
reg   [2:0] i_8_reg_966;
reg   [2:0] values_hidden_layer_s_reg_971;
wire   [0:0] exitcond7_fu_580_p2;
wire   [0:0] ap_CS_fsm_state13;
wire   [3:0] j_6_fu_635_p2;
reg   [3:0] j_6_reg_984;
wire   [0:0] exitcond9_fu_629_p2;
wire   [0:0] tmp_2_fu_641_p2;
reg   [0:0] tmp_2_reg_994;
wire   [0:0] icmp_fu_657_p2;
reg   [0:0] icmp_reg_998;
reg  signed [15:0] test_data_load_reg_1002;
wire   [0:0] ap_CS_fsm_state14;
reg  signed [15:0] weights_IH_load_reg_1007;
reg   [15:0] tmp_4_reg_1012;
wire   [0:0] ap_CS_fsm_state15;
wire   [15:0] tmp_5_fu_678_p2;
wire   [0:0] ap_CS_fsm_state16;
wire   [0:0] ap_CS_fsm_state19;
wire   [4:0] i_4_cast2_cast_fu_708_p1;
reg   [4:0] i_4_cast2_cast_reg_1027;
wire   [1:0] prediction_fu_718_p2;
reg   [1:0] prediction_reg_1035;
reg   [1:0] values_output_layer_s_reg_1041;
wire   [0:0] ap_CS_fsm_state22;
wire   [2:0] j_7_fu_763_p2;
reg   [2:0] j_7_reg_1059;
wire   [0:0] exitcond_fu_757_p2;
wire   [0:0] tmp_8_fu_769_p2;
reg   [0:0] tmp_8_reg_1069;
wire   [0:0] icmp1_fu_785_p2;
reg   [0:0] icmp1_reg_1073;
reg  signed [15:0] values_hidden_layer_4_reg_1077;
wire   [0:0] ap_CS_fsm_state23;
reg  signed [15:0] weights_HO_load_reg_1082;
reg   [15:0] tmp_10_reg_1087;
wire   [0:0] ap_CS_fsm_state24;
wire   [15:0] tmp_11_fu_806_p2;
wire   [0:0] ap_CS_fsm_state25;
wire   [0:0] ap_CS_fsm_state28;
wire   [14:0] highest_pred_2_highe_fu_852_p3;
wire   [0:0] ap_CS_fsm_state29;
reg   [3:0] i_reg_256;
wire   [0:0] ap_CS_fsm_state1;
wire   [0:0] exitcond3_fu_460_p2;
reg   [2:0] j_reg_267;
wire   [0:0] exitcond1_fu_434_p2;
reg   [2:0] i_1_reg_278;
wire   [0:0] exitcond5_fu_521_p2;
reg   [1:0] j_1_reg_289;
reg   [5:0] k_reg_300;
reg   [3:0] i_2_reg_311;
reg   [2:0] i_3_reg_322;
wire   [0:0] ap_CS_fsm_state20;
wire   [0:0] exitcond6_fu_554_p2;
reg   [15:0] values_hidden_layer_1_reg_333;
reg   [3:0] j_2_reg_346;
reg   [1:0] i_4_reg_357;
reg   [14:0] highest_pred_reg_368;
reg   [15:0] values_output_layer_1_reg_380;
reg   [2:0] j_3_reg_393;
wire   [31:0] tmp_21_cast_fu_455_p1;
wire  signed [31:0] tmp_22_cast_fu_516_p1;
wire   [31:0] i_3_cast4_fu_571_p1;
wire   [31:0] tmp_25_cast_fu_624_p1;
wire   [31:0] j_2_cast3_fu_592_p1;
wire  signed [31:0] tmp_14_cast_fu_693_p1;
wire   [31:0] i_4_cast2_fu_703_p1;
wire  signed [31:0] tmp_28_cast_fu_752_p1;
wire   [31:0] j_3_cast1_fu_724_p1;
wire  signed [31:0] tmp_17_cast_fu_821_p1;
reg   [31:0] tmp_data_fu_120;
wire   [31:0] prediction_write_out_fu_844_p3;
wire   [0:0] ap_CS_fsm_state17;
wire   [0:0] ap_CS_fsm_state18;
wire   [15:0] tmp_14_fu_698_p1;
wire   [0:0] ap_CS_fsm_state26;
wire   [0:0] ap_CS_fsm_state27;
wire   [15:0] highest_pred_1_fu_826_p1;
wire   [5:0] tmp_s_fu_416_p3;
wire   [6:0] i_cast9_cast_fu_412_p1;
wire   [6:0] p_shl_cast_fu_424_p1;
wire   [6:0] j_cast8_cast_fu_446_p1;
wire   [6:0] tmp_12_fu_450_p2;
wire   [4:0] tmp_6_fu_481_p3;
wire   [4:0] i_1_cast7_cast_fu_477_p1;
wire   [4:0] j_1_cast6_cast_fu_507_p1;
wire   [4:0] tmp_18_fu_511_p2;
wire   [5:0] tmp_21_fu_601_p3;
wire   [6:0] j_2_cast3_cast_fu_597_p1;
wire   [6:0] p_shl2_cast_fu_609_p1;
wire   [6:0] tmp_22_fu_613_p2;
wire   [6:0] tmp_23_fu_619_p2;
wire   [5:0] tmp_27_fu_647_p4;
wire  signed [23:0] tmp_2_i_fu_865_p2;
wire   [12:0] tmp_29_fu_683_p1;
wire   [12:0] tmp_13_fu_687_p2;
wire   [4:0] tmp_24_fu_733_p3;
wire   [4:0] j_3_cast1_cast_fu_729_p1;
wire   [4:0] tmp_25_fu_741_p2;
wire   [4:0] tmp_26_fu_747_p2;
wire   [5:0] tmp_28_fu_775_p4;
wire  signed [23:0] tmp_2_i3_fu_872_p2;
wire   [12:0] tmp_30_fu_811_p1;
wire   [12:0] tmp_15_fu_815_p2;
wire   [14:0] highest_pred_1_cast6_fu_831_p1;
wire   [0:0] tmp_16_fu_835_p2;
wire   [31:0] prediction_cast_fu_841_p1;
reg   [29:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 S_AXIS_V_data_0_sel_rd = 1'b0;
#0 S_AXIS_V_data_0_sel_wr = 1'b0;
#0 S_AXIS_V_data_0_state = 2'b00;
#0 S_AXIS_V_last_0_state = 2'b00;
#0 M_AXIS_V_data_1_sel_rd = 1'b0;
#0 M_AXIS_V_data_1_sel_wr = 1'b0;
#0 M_AXIS_V_data_1_state = 2'b00;
#0 M_AXIS_V_last_1_sel_rd = 1'b0;
#0 M_AXIS_V_last_1_state = 2'b00;
#0 ap_CS_fsm = 30'b1;
end

AXISTry_weights_IH #(
    .DataWidth( 16 ),
    .AddressRange( 65 ),
    .AddressWidth( 7 ))
weights_IH_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weights_IH_address0),
    .ce0(weights_IH_ce0),
    .we0(weights_IH_we0),
    .d0(weights_IH_d0),
    .q0(weights_IH_q0)
);

AXISTry_weights_HO #(
    .DataWidth( 16 ),
    .AddressRange( 15 ),
    .AddressWidth( 4 ))
weights_HO_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weights_HO_address0),
    .ce0(weights_HO_ce0),
    .we0(weights_HO_we0),
    .d0(weights_HO_d0),
    .q0(weights_HO_q0)
);

AXISTry_test_data #(
    .DataWidth( 16 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
test_data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(test_data_address0),
    .ce0(test_data_ce0),
    .we0(test_data_we0),
    .d0(test_data_d0),
    .q0(test_data_q0)
);

AXISTry_values_hibkb #(
    .DataWidth( 16 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
values_hidden_layer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(values_hidden_layer_address0),
    .ce0(values_hidden_layer_ce0),
    .we0(values_hidden_layer_we0),
    .d0(values_hidden_layer_d0),
    .q0(values_hidden_layer_q0)
);

AXISTry_sigmoid_arr #(
    .DataWidth( 8 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
sigmoid_arr_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sigmoid_arr_address0),
    .ce0(sigmoid_arr_ce0),
    .q0(sigmoid_arr_q0)
);

AXISTry_values_oucud #(
    .DataWidth( 16 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
values_output_layer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(values_output_layer_s_reg_1041),
    .ce0(values_output_layer_ce0),
    .we0(values_output_layer_we0),
    .d0(values_output_layer_d0),
    .q0(values_output_layer_q0)
);

AXISTry_mul_mul_1dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
AXISTry_mul_mul_1dEe_U0(
    .din0(test_data_load_reg_1002),
    .din1(weights_IH_load_reg_1007),
    .dout(tmp_2_i_fu_865_p2)
);

AXISTry_mul_mul_1dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
AXISTry_mul_mul_1dEe_U1(
    .din0(values_hidden_layer_4_reg_1077),
    .din1(weights_HO_load_reg_1082),
    .dout(tmp_2_i3_fu_872_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_data_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_data_1_ack_out) & (1'b1 == M_AXIS_V_data_1_vld_out))) begin
            M_AXIS_V_data_1_sel_rd <= ~M_AXIS_V_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_data_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_data_1_vld_in) & (1'b1 == M_AXIS_V_data_1_ack_in))) begin
            M_AXIS_V_data_1_sel_wr <= ~M_AXIS_V_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_data_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == M_AXIS_V_data_1_vld_in) & (1'b1 == M_AXIS_V_data_1_ack_out) & (ap_const_lv2_3 == M_AXIS_V_data_1_state)) | ((1'b0 == M_AXIS_V_data_1_vld_in) & (ap_const_lv2_2 == M_AXIS_V_data_1_state)))) begin
            M_AXIS_V_data_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == M_AXIS_V_data_1_vld_in) & (1'b0 == M_AXIS_V_data_1_ack_out) & (ap_const_lv2_3 == M_AXIS_V_data_1_state)) | ((1'b0 == M_AXIS_V_data_1_ack_out) & (ap_const_lv2_1 == M_AXIS_V_data_1_state)))) begin
            M_AXIS_V_data_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == M_AXIS_V_data_1_vld_in) & (ap_const_lv2_2 == M_AXIS_V_data_1_state)) | ((1'b1 == M_AXIS_V_data_1_ack_out) & (ap_const_lv2_1 == M_AXIS_V_data_1_state)) | ((ap_const_lv2_3 == M_AXIS_V_data_1_state) & ~((1'b1 == M_AXIS_V_data_1_vld_in) & (1'b0 == M_AXIS_V_data_1_ack_out)) & ~((1'b0 == M_AXIS_V_data_1_vld_in) & (1'b1 == M_AXIS_V_data_1_ack_out))))) begin
            M_AXIS_V_data_1_state <= ap_const_lv2_3;
        end else begin
            M_AXIS_V_data_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_last_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_last_1_ack_out) & (1'b1 == M_AXIS_V_last_1_vld_out))) begin
            M_AXIS_V_last_1_sel_rd <= ~M_AXIS_V_last_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_last_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == M_AXIS_V_last_1_vld_in) & (1'b1 == M_AXIS_V_last_1_ack_out) & (ap_const_lv2_3 == M_AXIS_V_last_1_state)) | ((1'b0 == M_AXIS_V_last_1_vld_in) & (ap_const_lv2_2 == M_AXIS_V_last_1_state)))) begin
            M_AXIS_V_last_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == M_AXIS_V_last_1_vld_in) & (1'b0 == M_AXIS_V_last_1_ack_out) & (ap_const_lv2_3 == M_AXIS_V_last_1_state)) | ((1'b0 == M_AXIS_V_last_1_ack_out) & (ap_const_lv2_1 == M_AXIS_V_last_1_state)))) begin
            M_AXIS_V_last_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == M_AXIS_V_last_1_vld_in) & (ap_const_lv2_2 == M_AXIS_V_last_1_state)) | ((1'b1 == M_AXIS_V_last_1_ack_out) & (ap_const_lv2_1 == M_AXIS_V_last_1_state)) | ((ap_const_lv2_3 == M_AXIS_V_last_1_state) & ~((1'b1 == M_AXIS_V_last_1_vld_in) & (1'b0 == M_AXIS_V_last_1_ack_out)) & ~((1'b0 == M_AXIS_V_last_1_vld_in) & (1'b1 == M_AXIS_V_last_1_ack_out))))) begin
            M_AXIS_V_last_1_state <= ap_const_lv2_3;
        end else begin
            M_AXIS_V_last_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_data_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == S_AXIS_V_data_0_ack_out) & (1'b1 == S_AXIS_V_data_0_vld_out))) begin
            S_AXIS_V_data_0_sel_rd <= ~S_AXIS_V_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_data_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == S_AXIS_V_data_0_vld_in) & (1'b1 == S_AXIS_V_data_0_ack_in))) begin
            S_AXIS_V_data_0_sel_wr <= ~S_AXIS_V_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_data_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == S_AXIS_V_data_0_vld_in) & (1'b1 == S_AXIS_V_data_0_ack_out) & (S_AXIS_V_data_0_state == ap_const_lv2_3)) | ((1'b0 == S_AXIS_V_data_0_vld_in) & (S_AXIS_V_data_0_state == ap_const_lv2_2)))) begin
            S_AXIS_V_data_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == S_AXIS_V_data_0_vld_in) & (1'b0 == S_AXIS_V_data_0_ack_out) & (S_AXIS_V_data_0_state == ap_const_lv2_3)) | ((1'b0 == S_AXIS_V_data_0_ack_out) & (S_AXIS_V_data_0_state == ap_const_lv2_1)))) begin
            S_AXIS_V_data_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == S_AXIS_V_data_0_vld_in) & (S_AXIS_V_data_0_state == ap_const_lv2_2)) | ((1'b1 == S_AXIS_V_data_0_ack_out) & (S_AXIS_V_data_0_state == ap_const_lv2_1)) | ((S_AXIS_V_data_0_state == ap_const_lv2_3) & ~((1'b1 == S_AXIS_V_data_0_vld_in) & (1'b0 == S_AXIS_V_data_0_ack_out)) & ~((1'b0 == S_AXIS_V_data_0_vld_in) & (1'b1 == S_AXIS_V_data_0_ack_out))))) begin
            S_AXIS_V_data_0_state <= ap_const_lv2_3;
        end else begin
            S_AXIS_V_data_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_last_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == S_AXIS_V_last_0_vld_in) & (1'b1 == S_AXIS_V_last_0_ack_out) & (ap_const_lv2_3 == S_AXIS_V_last_0_state)) | ((1'b0 == S_AXIS_V_last_0_vld_in) & (ap_const_lv2_2 == S_AXIS_V_last_0_state)))) begin
            S_AXIS_V_last_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == S_AXIS_V_last_0_vld_in) & (1'b0 == S_AXIS_V_last_0_ack_out) & (ap_const_lv2_3 == S_AXIS_V_last_0_state)) | ((1'b0 == S_AXIS_V_last_0_ack_out) & (ap_const_lv2_1 == S_AXIS_V_last_0_state)))) begin
            S_AXIS_V_last_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == S_AXIS_V_last_0_vld_in) & (ap_const_lv2_2 == S_AXIS_V_last_0_state)) | ((1'b1 == S_AXIS_V_last_0_ack_out) & (ap_const_lv2_1 == S_AXIS_V_last_0_state)) | ((ap_const_lv2_3 == S_AXIS_V_last_0_state) & ~((1'b1 == S_AXIS_V_last_0_vld_in) & (1'b0 == S_AXIS_V_last_0_ack_out)) & ~((1'b0 == S_AXIS_V_last_0_vld_in) & (1'b1 == S_AXIS_V_last_0_ack_out))))) begin
            S_AXIS_V_last_0_state <= ap_const_lv2_3;
        end else begin
            S_AXIS_V_last_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & ~(1'b0 == exitcond7_fu_580_p2))) begin
        highest_pred_reg_368 <= ap_const_lv15_0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        highest_pred_reg_368 <= highest_pred_2_highe_fu_852_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == exitcond1_fu_434_p2))) begin
        i_1_reg_278 <= ap_const_lv3_0;
    end else if (((1'b1 == ap_CS_fsm_state6) & ~(1'b0 == exitcond5_fu_521_p2))) begin
        i_1_reg_278 <= i_6_reg_913;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & ~(S_AXIS_V_data_0_vld_out == 1'b0))) begin
        i_2_reg_311 <= i_7_reg_953;
    end else if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == exitcond4_fu_538_p2) & ~((M_AXIS_V_data_1_ack_in == 1'b0) | (M_AXIS_V_last_1_ack_in == 1'b0)))) begin
        i_2_reg_311 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & ~(1'b0 == exitcond6_fu_554_p2))) begin
        i_3_reg_322 <= ap_const_lv3_0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        i_3_reg_322 <= i_8_reg_966;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & ~(1'b0 == exitcond7_fu_580_p2))) begin
        i_4_reg_357 <= ap_const_lv2_0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        i_4_reg_357 <= prediction_reg_1035;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == exitcond3_fu_460_p2))) begin
        i_reg_256 <= i_5_reg_887;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i_reg_256 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & ~(S_AXIS_V_data_0_vld_out == 1'b0))) begin
        j_1_reg_289 <= j_5_reg_932;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == exitcond2_fu_495_p2) & ~(~(1'b0 == exitcond2_fu_495_p2) & (1'b0 == M_AXIS_V_data_1_ack_in)))) begin
        j_1_reg_289 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        j_2_reg_346 <= j_6_reg_984;
    end else if (((1'b1 == ap_CS_fsm_state12) & (1'b0 == exitcond7_fu_580_p2))) begin
        j_2_reg_346 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        j_3_reg_393 <= j_7_reg_1059;
    end else if (((1'b1 == ap_CS_fsm_state21) & (1'b0 == exitcond8_fu_712_p2) & ~(~(1'b0 == exitcond8_fu_712_p2) & (1'b0 == M_AXIS_V_data_1_ack_in)))) begin
        j_3_reg_393 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(S_AXIS_V_data_0_vld_out == 1'b0))) begin
        j_reg_267 <= j_4_reg_900;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == exitcond1_fu_434_p2))) begin
        j_reg_267 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (~(1'b0 == M_AXIS_V_data_1_ack_in)) begin
        if ((1'b1 == ap_CS_fsm_state30)) begin
            k_reg_300 <= k_1_reg_940;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            k_reg_300 <= ap_const_lv6_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        values_hidden_layer_1_reg_333 <= tmp_5_fu_678_p2;
    end else if (((1'b1 == ap_CS_fsm_state12) & (1'b0 == exitcond7_fu_580_p2))) begin
        values_hidden_layer_1_reg_333 <= ap_const_lv16_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        values_output_layer_1_reg_380 <= tmp_11_fu_806_p2;
    end else if (((1'b1 == ap_CS_fsm_state21) & (1'b0 == exitcond8_fu_712_p2) & ~(~(1'b0 == exitcond8_fu_712_p2) & (1'b0 == M_AXIS_V_data_1_ack_in)))) begin
        values_output_layer_1_reg_380 <= ap_const_lv16_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_V_data_1_load_A)) begin
        M_AXIS_V_data_1_payload_A <= M_AXIS_V_data_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_V_data_1_load_B)) begin
        M_AXIS_V_data_1_payload_B <= M_AXIS_V_data_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == S_AXIS_V_data_0_load_A)) begin
        S_AXIS_V_data_0_payload_A <= S_AXIS_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == S_AXIS_V_data_0_load_B)) begin
        S_AXIS_V_data_0_payload_B <= S_AXIS_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_2_cast5_reg_945[3 : 0] <= i_2_cast5_fu_550_p1[3 : 0];
        i_7_reg_953 <= i_7_fu_560_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_3_cast4_cast_reg_958[2 : 0] <= i_3_cast4_cast_fu_576_p1[2 : 0];
        i_8_reg_966 <= i_8_fu_586_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & ~(~(1'b0 == exitcond8_fu_712_p2) & (1'b0 == M_AXIS_V_data_1_ack_in)))) begin
        i_4_cast2_cast_reg_1027[1 : 0] <= i_4_cast2_cast_fu_708_p1[1 : 0];
        prediction_reg_1035 <= prediction_fu_718_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_5_reg_887 <= i_5_fu_440_p2;
        tmp_1_reg_879 <= tmp_1_fu_428_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & ~(~(1'b0 == exitcond2_fu_495_p2) & (1'b0 == M_AXIS_V_data_1_ack_in)))) begin
        i_6_reg_913 <= i_6_fu_501_p2;
        tmp_7_reg_905 <= tmp_7_fu_489_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & ~(1'b0 == exitcond_fu_757_p2) & (1'b0 == tmp_8_fu_769_p2))) begin
        icmp1_reg_1073 <= icmp1_fu_785_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & ~(1'b0 == exitcond9_fu_629_p2) & (1'b0 == tmp_2_fu_641_p2))) begin
        icmp_reg_998 <= icmp_fu_657_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_4_reg_900 <= j_4_fu_466_p2;
        weights_IH_addr_reg_892 <= tmp_21_cast_fu_455_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_5_reg_932 <= j_5_fu_527_p2;
        weights_HO_addr_reg_924 <= tmp_22_cast_fu_516_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_6_reg_984 <= j_6_fu_635_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        j_7_reg_1059 <= j_7_fu_763_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~((M_AXIS_V_data_1_ack_in == 1'b0) | (M_AXIS_V_last_1_ack_in == 1'b0)))) begin
        k_1_reg_940 <= k_1_fu_544_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        test_data_load_reg_1002 <= test_data_q0;
        weights_IH_load_reg_1007 <= weights_IH_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        tmp_10_reg_1087 <= {{tmp_2_i3_fu_872_p2[ap_const_lv32_17 : ap_const_lv32_8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & ~(1'b0 == exitcond9_fu_629_p2))) begin
        tmp_2_reg_994 <= tmp_2_fu_641_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_4_reg_1012 <= {{tmp_2_i_fu_865_p2[ap_const_lv32_17 : ap_const_lv32_8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & ~(1'b0 == exitcond_fu_757_p2))) begin
        tmp_8_reg_1069 <= tmp_8_fu_769_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        tmp_data_fu_120 <= prediction_write_out_fu_844_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        values_hidden_layer_4_reg_1077 <= values_hidden_layer_q0;
        weights_HO_load_reg_1082 <= weights_HO_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'b0 == exitcond7_fu_580_p2))) begin
        values_hidden_layer_s_reg_971 <= i_3_cast4_fu_571_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (1'b0 == exitcond8_fu_712_p2) & ~(~(1'b0 == exitcond8_fu_712_p2) & (1'b0 == M_AXIS_V_data_1_ack_in)))) begin
        values_output_layer_s_reg_1041 <= i_4_cast2_fu_703_p1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == exitcond2_fu_495_p2)) | (1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state21) & ~(1'b0 == exitcond8_fu_712_p2)) | (1'b1 == ap_CS_fsm_state30))) begin
        M_AXIS_TDATA_blk_n = M_AXIS_V_data_1_state[1'b1];
    end else begin
        M_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) & ~(1'b0 == exitcond8_fu_712_p2))) begin
        M_AXIS_V_data_1_data_in = tmp_data_fu_120;
    end else if (((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == exitcond2_fu_495_p2))) begin
        M_AXIS_V_data_1_data_in = ap_const_lv32_3039;
    end else begin
        M_AXIS_V_data_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == M_AXIS_V_data_1_sel)) begin
        M_AXIS_V_data_1_data_out = M_AXIS_V_data_1_payload_B;
    end else begin
        M_AXIS_V_data_1_data_out = M_AXIS_V_data_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state21) & ~(1'b0 == exitcond8_fu_712_p2) & ~(~(1'b0 == exitcond8_fu_712_p2) & (1'b0 == M_AXIS_V_data_1_ack_in))) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == exitcond2_fu_495_p2) & ~(~(1'b0 == exitcond2_fu_495_p2) & (1'b0 == M_AXIS_V_data_1_ack_in))))) begin
        M_AXIS_V_data_1_vld_in = 1'b1;
    end else begin
        M_AXIS_V_data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state21) & ~(1'b0 == exitcond8_fu_712_p2) & ~(~(1'b0 == exitcond8_fu_712_p2) & (1'b0 == M_AXIS_V_data_1_ack_in))) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == exitcond2_fu_495_p2) & ~(~(1'b0 == exitcond2_fu_495_p2) & (1'b0 == M_AXIS_V_data_1_ack_in))))) begin
        M_AXIS_V_last_1_vld_in = 1'b1;
    end else begin
        M_AXIS_V_last_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state11))) begin
        S_AXIS_TDATA_blk_n = S_AXIS_V_data_0_state[1'b0];
    end else begin
        S_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & ~(S_AXIS_V_data_0_vld_out == 1'b0)) | ((1'b1 == ap_CS_fsm_state7) & ~(S_AXIS_V_data_0_vld_out == 1'b0)) | ((1'b1 == ap_CS_fsm_state11) & ~(S_AXIS_V_data_0_vld_out == 1'b0)))) begin
        S_AXIS_V_data_0_ack_out = 1'b1;
    end else begin
        S_AXIS_V_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == S_AXIS_V_data_0_sel)) begin
        S_AXIS_V_data_0_data_out = S_AXIS_V_data_0_payload_B;
    end else begin
        S_AXIS_V_data_0_data_out = S_AXIS_V_data_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & ~(S_AXIS_V_data_0_vld_out == 1'b0)) | ((1'b1 == ap_CS_fsm_state7) & ~(S_AXIS_V_data_0_vld_out == 1'b0)) | ((1'b1 == ap_CS_fsm_state11) & ~(S_AXIS_V_data_0_vld_out == 1'b0)))) begin
        S_AXIS_V_last_0_ack_out = 1'b1;
    end else begin
        S_AXIS_V_last_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        sigmoid_arr_address0 = tmp_17_cast_fu_821_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        sigmoid_arr_address0 = tmp_14_cast_fu_693_p1;
    end else begin
        sigmoid_arr_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state28))) begin
        sigmoid_arr_ce0 = 1'b1;
    end else begin
        sigmoid_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        test_data_address0 = j_2_cast3_fu_592_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        test_data_address0 = i_2_cast5_reg_945;
    end else begin
        test_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((1'b1 == ap_CS_fsm_state11) & ~(S_AXIS_V_data_0_vld_out == 1'b0)))) begin
        test_data_ce0 = 1'b1;
    end else begin
        test_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & ~(S_AXIS_V_data_0_vld_out == 1'b0))) begin
        test_data_we0 = 1'b1;
    end else begin
        test_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        values_hidden_layer_address0 = j_3_cast1_fu_724_p1;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state20) | ((1'b1 == ap_CS_fsm_state17) & (1'b0 == tmp_2_reg_994) & ~(1'b0 == icmp_reg_998)) | ((1'b1 == ap_CS_fsm_state17) & ~(1'b0 == tmp_2_reg_994)) | (1'b1 == ap_CS_fsm_state18))) begin
        values_hidden_layer_address0 = values_hidden_layer_s_reg_971;
    end else begin
        values_hidden_layer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | ((1'b1 == ap_CS_fsm_state17) & (1'b0 == tmp_2_reg_994) & ~(1'b0 == icmp_reg_998)) | ((1'b1 == ap_CS_fsm_state17) & ~(1'b0 == tmp_2_reg_994)) | (1'b1 == ap_CS_fsm_state18))) begin
        values_hidden_layer_ce0 = 1'b1;
    end else begin
        values_hidden_layer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        values_hidden_layer_d0 = tmp_14_fu_698_p1;
    end else if (((1'b1 == ap_CS_fsm_state17) & ~(1'b0 == tmp_2_reg_994))) begin
        values_hidden_layer_d0 = ap_const_lv16_FC00;
    end else if (((1'b1 == ap_CS_fsm_state17) & (1'b0 == tmp_2_reg_994) & ~(1'b0 == icmp_reg_998))) begin
        values_hidden_layer_d0 = ap_const_lv16_3FF;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        values_hidden_layer_d0 = values_hidden_layer_1_reg_333;
    end else begin
        values_hidden_layer_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state20) | ((1'b1 == ap_CS_fsm_state17) & (1'b0 == tmp_2_reg_994) & ~(1'b0 == icmp_reg_998)) | ((1'b1 == ap_CS_fsm_state17) & ~(1'b0 == tmp_2_reg_994)))) begin
        values_hidden_layer_we0 = 1'b1;
    end else begin
        values_hidden_layer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state26) & (1'b0 == tmp_8_reg_1069) & ~(1'b0 == icmp1_reg_1073)) | ((1'b1 == ap_CS_fsm_state26) & ~(1'b0 == tmp_8_reg_1069)) | (1'b1 == ap_CS_fsm_state27))) begin
        values_output_layer_ce0 = 1'b1;
    end else begin
        values_output_layer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        values_output_layer_d0 = highest_pred_1_fu_826_p1;
    end else if (((1'b1 == ap_CS_fsm_state26) & ~(1'b0 == tmp_8_reg_1069))) begin
        values_output_layer_d0 = ap_const_lv16_FC00;
    end else if (((1'b1 == ap_CS_fsm_state26) & (1'b0 == tmp_8_reg_1069) & ~(1'b0 == icmp1_reg_1073))) begin
        values_output_layer_d0 = ap_const_lv16_3FF;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        values_output_layer_d0 = values_output_layer_1_reg_380;
    end else begin
        values_output_layer_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state26) & (1'b0 == tmp_8_reg_1069) & ~(1'b0 == icmp1_reg_1073)) | ((1'b1 == ap_CS_fsm_state26) & ~(1'b0 == tmp_8_reg_1069)))) begin
        values_output_layer_we0 = 1'b1;
    end else begin
        values_output_layer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        weights_HO_address0 = tmp_28_cast_fu_752_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        weights_HO_address0 = weights_HO_addr_reg_924;
    end else begin
        weights_HO_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((1'b1 == ap_CS_fsm_state7) & ~(S_AXIS_V_data_0_vld_out == 1'b0)))) begin
        weights_HO_ce0 = 1'b1;
    end else begin
        weights_HO_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & ~(S_AXIS_V_data_0_vld_out == 1'b0))) begin
        weights_HO_we0 = 1'b1;
    end else begin
        weights_HO_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        weights_IH_address0 = tmp_25_cast_fu_624_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        weights_IH_address0 = weights_IH_addr_reg_892;
    end else begin
        weights_IH_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((1'b1 == ap_CS_fsm_state4) & ~(S_AXIS_V_data_0_vld_out == 1'b0)))) begin
        weights_IH_ce0 = 1'b1;
    end else begin
        weights_IH_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(S_AXIS_V_data_0_vld_out == 1'b0))) begin
        weights_IH_we0 = 1'b1;
    end else begin
        weights_IH_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (~(1'b0 == exitcond1_fu_434_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (~(1'b0 == exitcond3_fu_460_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (~(S_AXIS_V_data_0_vld_out == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b0 == exitcond2_fu_495_p2) & ~(~(1'b0 == exitcond2_fu_495_p2) & (1'b0 == M_AXIS_V_data_1_ack_in)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if ((~(1'b0 == exitcond2_fu_495_p2) & ~(~(1'b0 == exitcond2_fu_495_p2) & (1'b0 == M_AXIS_V_data_1_ack_in)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (~(1'b0 == exitcond5_fu_521_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (~(S_AXIS_V_data_0_vld_out == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (~(1'b0 == M_AXIS_V_data_1_ack_in)) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if ((~(1'b0 == exitcond4_fu_538_p2) & ~((M_AXIS_V_data_1_ack_in == 1'b0) | (M_AXIS_V_last_1_ack_in == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == exitcond4_fu_538_p2) & ~((M_AXIS_V_data_1_ack_in == 1'b0) | (M_AXIS_V_last_1_ack_in == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (~(1'b0 == exitcond6_fu_554_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (~(S_AXIS_V_data_0_vld_out == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (~(1'b0 == exitcond7_fu_580_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (~(1'b0 == exitcond9_fu_629_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state21 : begin
            if (((1'b0 == exitcond8_fu_712_p2) & ~(~(1'b0 == exitcond8_fu_712_p2) & (1'b0 == M_AXIS_V_data_1_ack_in)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else if ((~(1'b0 == exitcond8_fu_712_p2) & ~(~(1'b0 == exitcond8_fu_712_p2) & (1'b0 == M_AXIS_V_data_1_ack_in)))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (~(1'b0 == exitcond_fu_757_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state30 : begin
            if (~(1'b0 == M_AXIS_V_data_1_ack_in)) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M_AXIS_TDATA = M_AXIS_V_data_1_data_out;

assign M_AXIS_TLAST = M_AXIS_V_last_1_data_out;

assign M_AXIS_TVALID = M_AXIS_V_last_1_state[1'b0];

assign M_AXIS_V_data_1_ack_in = M_AXIS_V_data_1_state[1'b1];

assign M_AXIS_V_data_1_ack_out = M_AXIS_TREADY;

assign M_AXIS_V_data_1_load_A = (M_AXIS_V_data_1_state_cmp_full & ~M_AXIS_V_data_1_sel_wr);

assign M_AXIS_V_data_1_load_B = (M_AXIS_V_data_1_sel_wr & M_AXIS_V_data_1_state_cmp_full);

assign M_AXIS_V_data_1_sel = M_AXIS_V_data_1_sel_rd;

assign M_AXIS_V_data_1_state_cmp_full = ((M_AXIS_V_data_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign M_AXIS_V_data_1_vld_out = M_AXIS_V_data_1_state[1'b0];

assign M_AXIS_V_last_1_ack_in = M_AXIS_V_last_1_state[1'b1];

assign M_AXIS_V_last_1_ack_out = M_AXIS_TREADY;

assign M_AXIS_V_last_1_data_out = 1'b1;

assign M_AXIS_V_last_1_sel = M_AXIS_V_last_1_sel_rd;

assign M_AXIS_V_last_1_vld_out = M_AXIS_V_last_1_state[1'b0];

assign S_AXIS_TREADY = S_AXIS_V_last_0_state[1'b1];

assign S_AXIS_V_data_0_ack_in = S_AXIS_V_data_0_state[1'b1];

assign S_AXIS_V_data_0_load_A = (S_AXIS_V_data_0_state_cmp_full & ~S_AXIS_V_data_0_sel_wr);

assign S_AXIS_V_data_0_load_B = (S_AXIS_V_data_0_sel_wr & S_AXIS_V_data_0_state_cmp_full);

assign S_AXIS_V_data_0_sel = S_AXIS_V_data_0_sel_rd;

assign S_AXIS_V_data_0_state_cmp_full = ((S_AXIS_V_data_0_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign S_AXIS_V_data_0_vld_in = S_AXIS_TVALID;

assign S_AXIS_V_data_0_vld_out = S_AXIS_V_data_0_state[1'b0];

assign S_AXIS_V_last_0_vld_in = S_AXIS_TVALID;

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state17 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_state18 = ap_CS_fsm[ap_const_lv32_11];

assign ap_CS_fsm_state19 = ap_CS_fsm[ap_const_lv32_12];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state20 = ap_CS_fsm[ap_const_lv32_13];

assign ap_CS_fsm_state21 = ap_CS_fsm[ap_const_lv32_14];

assign ap_CS_fsm_state22 = ap_CS_fsm[ap_const_lv32_15];

assign ap_CS_fsm_state23 = ap_CS_fsm[ap_const_lv32_16];

assign ap_CS_fsm_state24 = ap_CS_fsm[ap_const_lv32_17];

assign ap_CS_fsm_state25 = ap_CS_fsm[ap_const_lv32_18];

assign ap_CS_fsm_state26 = ap_CS_fsm[ap_const_lv32_19];

assign ap_CS_fsm_state27 = ap_CS_fsm[ap_const_lv32_1A];

assign ap_CS_fsm_state28 = ap_CS_fsm[ap_const_lv32_1B];

assign ap_CS_fsm_state29 = ap_CS_fsm[ap_const_lv32_1C];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state30 = ap_CS_fsm[ap_const_lv32_1D];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_434_p2 = ((i_reg_256 == ap_const_lv4_D) ? 1'b1 : 1'b0);

assign exitcond2_fu_495_p2 = ((i_1_reg_278 == ap_const_lv3_5) ? 1'b1 : 1'b0);

assign exitcond3_fu_460_p2 = ((j_reg_267 == ap_const_lv3_5) ? 1'b1 : 1'b0);

assign exitcond4_fu_538_p2 = ((k_reg_300 == ap_const_lv6_24) ? 1'b1 : 1'b0);

assign exitcond5_fu_521_p2 = ((j_1_reg_289 == ap_const_lv2_3) ? 1'b1 : 1'b0);

assign exitcond6_fu_554_p2 = ((i_2_reg_311 == ap_const_lv4_D) ? 1'b1 : 1'b0);

assign exitcond7_fu_580_p2 = ((i_3_reg_322 == ap_const_lv3_5) ? 1'b1 : 1'b0);

assign exitcond8_fu_712_p2 = ((i_4_reg_357 == ap_const_lv2_3) ? 1'b1 : 1'b0);

assign exitcond9_fu_629_p2 = ((j_2_reg_346 == ap_const_lv4_D) ? 1'b1 : 1'b0);

assign exitcond_fu_757_p2 = ((j_3_reg_393 == ap_const_lv3_5) ? 1'b1 : 1'b0);

assign highest_pred_1_cast6_fu_831_p1 = sigmoid_arr_q0;

assign highest_pred_1_fu_826_p1 = sigmoid_arr_q0;

assign highest_pred_2_highe_fu_852_p3 = ((tmp_16_fu_835_p2[0:0] === 1'b1) ? highest_pred_1_cast6_fu_831_p1 : highest_pred_reg_368);

assign i_1_cast7_cast_fu_477_p1 = i_1_reg_278;

assign i_2_cast5_fu_550_p1 = i_2_reg_311;

assign i_3_cast4_cast_fu_576_p1 = i_3_reg_322;

assign i_3_cast4_fu_571_p1 = i_3_reg_322;

assign i_4_cast2_cast_fu_708_p1 = i_4_reg_357;

assign i_4_cast2_fu_703_p1 = i_4_reg_357;

assign i_5_fu_440_p2 = (i_reg_256 + ap_const_lv4_1);

assign i_6_fu_501_p2 = (i_1_reg_278 + ap_const_lv3_1);

assign i_7_fu_560_p2 = (i_2_reg_311 + ap_const_lv4_1);

assign i_8_fu_586_p2 = (i_3_reg_322 + ap_const_lv3_1);

assign i_cast9_cast_fu_412_p1 = i_reg_256;

assign icmp1_fu_785_p2 = (($signed(tmp_28_fu_775_p4) > $signed(6'b000000)) ? 1'b1 : 1'b0);

assign icmp_fu_657_p2 = (($signed(tmp_27_fu_647_p4) > $signed(6'b000000)) ? 1'b1 : 1'b0);

assign j_1_cast6_cast_fu_507_p1 = j_1_reg_289;

assign j_2_cast3_cast_fu_597_p1 = j_2_reg_346;

assign j_2_cast3_fu_592_p1 = j_2_reg_346;

assign j_3_cast1_cast_fu_729_p1 = j_3_reg_393;

assign j_3_cast1_fu_724_p1 = j_3_reg_393;

assign j_4_fu_466_p2 = (j_reg_267 + ap_const_lv3_1);

assign j_5_fu_527_p2 = (j_1_reg_289 + ap_const_lv2_1);

assign j_6_fu_635_p2 = (j_2_reg_346 + ap_const_lv4_1);

assign j_7_fu_763_p2 = (j_3_reg_393 + ap_const_lv3_1);

assign j_cast8_cast_fu_446_p1 = j_reg_267;

assign k_1_fu_544_p2 = (k_reg_300 + ap_const_lv6_1);

assign p_shl2_cast_fu_609_p1 = tmp_21_fu_601_p3;

assign p_shl_cast_fu_424_p1 = tmp_s_fu_416_p3;

assign prediction_cast_fu_841_p1 = prediction_reg_1035;

assign prediction_fu_718_p2 = (i_4_reg_357 + ap_const_lv2_1);

assign prediction_write_out_fu_844_p3 = ((tmp_16_fu_835_p2[0:0] === 1'b1) ? prediction_cast_fu_841_p1 : tmp_data_fu_120);

assign test_data_d0 = S_AXIS_V_data_0_data_out[15:0];

assign tmp_11_fu_806_p2 = (values_output_layer_1_reg_380 + tmp_10_reg_1087);

assign tmp_12_fu_450_p2 = (tmp_1_reg_879 + j_cast8_cast_fu_446_p1);

assign tmp_13_fu_687_p2 = (ap_const_lv13_400 + tmp_29_fu_683_p1);

assign tmp_14_cast_fu_693_p1 = $signed(tmp_13_fu_687_p2);

assign tmp_14_fu_698_p1 = sigmoid_arr_q0;

assign tmp_15_fu_815_p2 = (ap_const_lv13_400 + tmp_30_fu_811_p1);

assign tmp_16_fu_835_p2 = ((highest_pred_1_cast6_fu_831_p1 > highest_pred_reg_368) ? 1'b1 : 1'b0);

assign tmp_17_cast_fu_821_p1 = $signed(tmp_15_fu_815_p2);

assign tmp_18_fu_511_p2 = (tmp_7_reg_905 + j_1_cast6_cast_fu_507_p1);

assign tmp_1_fu_428_p2 = (i_cast9_cast_fu_412_p1 + p_shl_cast_fu_424_p1);

assign tmp_21_cast_fu_455_p1 = tmp_12_fu_450_p2;

assign tmp_21_fu_601_p3 = {{j_2_reg_346}, {ap_const_lv2_0}};

assign tmp_22_cast_fu_516_p1 = $signed(tmp_18_fu_511_p2);

assign tmp_22_fu_613_p2 = (j_2_cast3_cast_fu_597_p1 + p_shl2_cast_fu_609_p1);

assign tmp_23_fu_619_p2 = (tmp_22_fu_613_p2 + i_3_cast4_cast_reg_958);

assign tmp_24_fu_733_p3 = {{j_3_reg_393}, {ap_const_lv2_0}};

assign tmp_25_cast_fu_624_p1 = tmp_23_fu_619_p2;

assign tmp_25_fu_741_p2 = (tmp_24_fu_733_p3 - j_3_cast1_cast_fu_729_p1);

assign tmp_26_fu_747_p2 = (tmp_25_fu_741_p2 + i_4_cast2_cast_reg_1027);

assign tmp_27_fu_647_p4 = {{values_hidden_layer_1_reg_333[ap_const_lv32_F : ap_const_lv32_A]}};

assign tmp_28_cast_fu_752_p1 = $signed(tmp_26_fu_747_p2);

assign tmp_28_fu_775_p4 = {{values_output_layer_1_reg_380[ap_const_lv32_F : ap_const_lv32_A]}};

assign tmp_29_fu_683_p1 = values_hidden_layer_q0[12:0];

assign tmp_2_fu_641_p2 = (($signed(values_hidden_layer_1_reg_333) < $signed(16'b1111110000000000)) ? 1'b1 : 1'b0);

assign tmp_30_fu_811_p1 = values_output_layer_q0[12:0];

assign tmp_5_fu_678_p2 = (values_hidden_layer_1_reg_333 + tmp_4_reg_1012);

assign tmp_6_fu_481_p3 = {{i_1_reg_278}, {ap_const_lv2_0}};

assign tmp_7_fu_489_p2 = (tmp_6_fu_481_p3 - i_1_cast7_cast_fu_477_p1);

assign tmp_8_fu_769_p2 = (($signed(values_output_layer_1_reg_380) < $signed(16'b1111110000000000)) ? 1'b1 : 1'b0);

assign tmp_s_fu_416_p3 = {{i_reg_256}, {ap_const_lv2_0}};

assign weights_HO_d0 = S_AXIS_V_data_0_data_out[15:0];

assign weights_IH_d0 = S_AXIS_V_data_0_data_out[15:0];

always @ (posedge ap_clk) begin
    i_2_cast5_reg_945[31:4] <= 28'b0000000000000000000000000000;
    i_3_cast4_cast_reg_958[6:3] <= 4'b0000;
    i_4_cast2_cast_reg_1027[4:2] <= 3'b000;
end

endmodule //AXISTry
