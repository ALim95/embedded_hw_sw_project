-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AXISTry is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    S_AXIS_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    S_AXIS_TVALID : IN STD_LOGIC;
    S_AXIS_TREADY : OUT STD_LOGIC;
    S_AXIS_TLAST : IN STD_LOGIC;
    M_AXIS_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    M_AXIS_TVALID : OUT STD_LOGIC;
    M_AXIS_TREADY : IN STD_LOGIC;
    M_AXIS_TLAST : OUT STD_LOGIC );
end;


architecture behav of AXISTry is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "AXISTry,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.740000,HLS_SYN_LAT=14564,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=2,HLS_SYN_FF=583,HLS_SYN_LUT=505}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (29 downto 0) := "000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (29 downto 0) := "000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (29 downto 0) := "000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (29 downto 0) := "000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (29 downto 0) := "000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (29 downto 0) := "000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (29 downto 0) := "000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (29 downto 0) := "000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (29 downto 0) := "000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (29 downto 0) := "001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (29 downto 0) := "010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (29 downto 0) := "100000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_3039 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011000000111001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv16_3FF : STD_LOGIC_VECTOR (15 downto 0) := "0000001111111111";
    constant ap_const_lv16_FC00 : STD_LOGIC_VECTOR (15 downto 0) := "1111110000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv13_400 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal S_AXIS_V_data_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal S_AXIS_V_data_0_vld_in : STD_LOGIC;
    signal S_AXIS_V_data_0_vld_out : STD_LOGIC;
    signal S_AXIS_V_data_0_ack_in : STD_LOGIC;
    signal S_AXIS_V_data_0_ack_out : STD_LOGIC;
    signal S_AXIS_V_data_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal S_AXIS_V_data_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal S_AXIS_V_data_0_sel_rd : STD_LOGIC := '0';
    signal S_AXIS_V_data_0_sel_wr : STD_LOGIC := '0';
    signal S_AXIS_V_data_0_sel : STD_LOGIC;
    signal S_AXIS_V_data_0_load_A : STD_LOGIC;
    signal S_AXIS_V_data_0_load_B : STD_LOGIC;
    signal S_AXIS_V_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal S_AXIS_V_data_0_state_cmp_full : STD_LOGIC;
    signal S_AXIS_V_last_0_vld_in : STD_LOGIC;
    signal S_AXIS_V_last_0_ack_out : STD_LOGIC;
    signal S_AXIS_V_last_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal M_AXIS_V_data_1_data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal M_AXIS_V_data_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal M_AXIS_V_data_1_vld_in : STD_LOGIC;
    signal M_AXIS_V_data_1_vld_out : STD_LOGIC;
    signal M_AXIS_V_data_1_ack_in : STD_LOGIC;
    signal M_AXIS_V_data_1_ack_out : STD_LOGIC;
    signal M_AXIS_V_data_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal M_AXIS_V_data_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal M_AXIS_V_data_1_sel_rd : STD_LOGIC := '0';
    signal M_AXIS_V_data_1_sel_wr : STD_LOGIC := '0';
    signal M_AXIS_V_data_1_sel : STD_LOGIC;
    signal M_AXIS_V_data_1_load_A : STD_LOGIC;
    signal M_AXIS_V_data_1_load_B : STD_LOGIC;
    signal M_AXIS_V_data_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal M_AXIS_V_data_1_state_cmp_full : STD_LOGIC;
    signal M_AXIS_V_last_1_data_out : STD_LOGIC;
    signal M_AXIS_V_last_1_vld_in : STD_LOGIC;
    signal M_AXIS_V_last_1_vld_out : STD_LOGIC;
    signal M_AXIS_V_last_1_ack_in : STD_LOGIC;
    signal M_AXIS_V_last_1_ack_out : STD_LOGIC;
    signal M_AXIS_V_last_1_sel_rd : STD_LOGIC := '0';
    signal M_AXIS_V_last_1_sel : STD_LOGIC;
    signal M_AXIS_V_last_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal weights_IH_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_IH_ce0 : STD_LOGIC;
    signal weights_IH_we0 : STD_LOGIC;
    signal weights_IH_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal weights_IH_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal weights_HO_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal weights_HO_ce0 : STD_LOGIC;
    signal weights_HO_we0 : STD_LOGIC;
    signal weights_HO_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal weights_HO_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal test_data_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal test_data_ce0 : STD_LOGIC;
    signal test_data_we0 : STD_LOGIC;
    signal test_data_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal test_data_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal values_hidden_layer_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal values_hidden_layer_ce0 : STD_LOGIC;
    signal values_hidden_layer_we0 : STD_LOGIC;
    signal values_hidden_layer_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal values_hidden_layer_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sigmoid_arr_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sigmoid_arr_ce0 : STD_LOGIC;
    signal sigmoid_arr_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal values_output_layer_ce0 : STD_LOGIC;
    signal values_output_layer_we0 : STD_LOGIC;
    signal values_output_layer_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal values_output_layer_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal S_AXIS_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal M_AXIS_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond2_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal exitcond8_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal tmp_1_fu_428_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_reg_879 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_5_fu_440_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_reg_887 : STD_LOGIC_VECTOR (3 downto 0);
    signal weights_IH_addr_reg_892 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_4_fu_466_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_4_reg_900 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_489_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_reg_905 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_6_fu_501_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_6_reg_913 : STD_LOGIC_VECTOR (2 downto 0);
    signal weights_HO_addr_reg_924 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j_5_fu_527_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_5_reg_932 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_1_fu_544_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_1_reg_940 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal exitcond4_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_cast5_fu_550_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_cast5_reg_945 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_7_fu_560_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_7_reg_953 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_cast4_cast_fu_576_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_cast4_cast_reg_958 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_8_fu_586_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_8_reg_966 : STD_LOGIC_VECTOR (2 downto 0);
    signal values_hidden_layer_s_reg_971 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond7_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal j_6_fu_635_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_6_reg_984 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond9_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_994 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_998 : STD_LOGIC_VECTOR (0 downto 0);
    signal test_data_load_reg_1002 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal weights_IH_load_reg_1007 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_reg_1012 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_5_fu_678_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal i_4_cast2_cast_fu_708_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_cast2_cast_reg_1027 : STD_LOGIC_VECTOR (4 downto 0);
    signal prediction_fu_718_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal prediction_reg_1035 : STD_LOGIC_VECTOR (1 downto 0);
    signal values_output_layer_s_reg_1041 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal j_7_fu_763_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_7_reg_1059 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_1069 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_fu_785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_1073 : STD_LOGIC_VECTOR (0 downto 0);
    signal values_hidden_layer_4_reg_1077 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal weights_HO_load_reg_1082 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_reg_1087 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_11_fu_806_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal highest_pred_2_highe_fu_852_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal i_reg_256 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal exitcond3_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_267 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond1_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_278 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond5_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_reg_289 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_300 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_reg_311 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_322 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal exitcond6_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal values_hidden_layer_1_reg_333 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_2_reg_346 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_357 : STD_LOGIC_VECTOR (1 downto 0);
    signal highest_pred_reg_368 : STD_LOGIC_VECTOR (14 downto 0);
    signal values_output_layer_1_reg_380 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_3_reg_393 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_21_cast_fu_455_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_cast_fu_516_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_cast4_fu_571_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_cast_fu_624_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_cast3_fu_592_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_cast_fu_693_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_4_cast2_fu_703_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_cast_fu_752_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_cast1_fu_724_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_cast_fu_821_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal prediction_write_out_fu_844_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_14_fu_698_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal highest_pred_1_fu_826_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_416_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_cast9_cast_fu_412_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_424_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_cast8_cast_fu_446_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_12_fu_450_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_481_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_cast7_cast_fu_477_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_cast6_cast_fu_507_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_fu_511_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_21_fu_601_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_cast3_cast_fu_597_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_cast_fu_609_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_22_fu_613_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_fu_619_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_27_fu_647_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_i_fu_865_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_29_fu_683_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_13_fu_687_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_24_fu_733_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_3_cast1_cast_fu_729_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_25_fu_741_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_26_fu_747_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_28_fu_775_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_i3_fu_872_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_30_fu_811_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_15_fu_815_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal highest_pred_1_cast6_fu_831_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_16_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal prediction_cast_fu_841_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (29 downto 0);

    component AXISTry_mul_mul_1dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component AXISTry_weights_IH IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component AXISTry_weights_HO IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component AXISTry_test_data IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component AXISTry_values_hibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component AXISTry_sigmoid_arr IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AXISTry_values_oucud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    weights_IH_U : component AXISTry_weights_IH
    generic map (
        DataWidth => 16,
        AddressRange => 65,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_IH_address0,
        ce0 => weights_IH_ce0,
        we0 => weights_IH_we0,
        d0 => weights_IH_d0,
        q0 => weights_IH_q0);

    weights_HO_U : component AXISTry_weights_HO
    generic map (
        DataWidth => 16,
        AddressRange => 15,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_HO_address0,
        ce0 => weights_HO_ce0,
        we0 => weights_HO_we0,
        d0 => weights_HO_d0,
        q0 => weights_HO_q0);

    test_data_U : component AXISTry_test_data
    generic map (
        DataWidth => 16,
        AddressRange => 13,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => test_data_address0,
        ce0 => test_data_ce0,
        we0 => test_data_we0,
        d0 => test_data_d0,
        q0 => test_data_q0);

    values_hidden_layer_U : component AXISTry_values_hibkb
    generic map (
        DataWidth => 16,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => values_hidden_layer_address0,
        ce0 => values_hidden_layer_ce0,
        we0 => values_hidden_layer_we0,
        d0 => values_hidden_layer_d0,
        q0 => values_hidden_layer_q0);

    sigmoid_arr_U : component AXISTry_sigmoid_arr
    generic map (
        DataWidth => 8,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sigmoid_arr_address0,
        ce0 => sigmoid_arr_ce0,
        q0 => sigmoid_arr_q0);

    values_output_layer_U : component AXISTry_values_oucud
    generic map (
        DataWidth => 16,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => values_output_layer_s_reg_1041,
        ce0 => values_output_layer_ce0,
        we0 => values_output_layer_we0,
        d0 => values_output_layer_d0,
        q0 => values_output_layer_q0);

    AXISTry_mul_mul_1dEe_U0 : component AXISTry_mul_mul_1dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => test_data_load_reg_1002,
        din1 => weights_IH_load_reg_1007,
        dout => tmp_2_i_fu_865_p2);

    AXISTry_mul_mul_1dEe_U1 : component AXISTry_mul_mul_1dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => values_hidden_layer_4_reg_1077,
        din1 => weights_HO_load_reg_1082,
        dout => tmp_2_i3_fu_872_p2);





    M_AXIS_V_data_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_data_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = M_AXIS_V_data_1_ack_out) and (ap_const_logic_1 = M_AXIS_V_data_1_vld_out))) then 
                                        M_AXIS_V_data_1_sel_rd <= not(M_AXIS_V_data_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_data_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_data_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = M_AXIS_V_data_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_data_1_ack_in))) then 
                                        M_AXIS_V_data_1_sel_wr <= not(M_AXIS_V_data_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_data_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_data_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = M_AXIS_V_data_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_data_1_ack_out) and (ap_const_lv2_3 = M_AXIS_V_data_1_state)) or ((ap_const_logic_0 = M_AXIS_V_data_1_vld_in) and (ap_const_lv2_2 = M_AXIS_V_data_1_state)))) then 
                    M_AXIS_V_data_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = M_AXIS_V_data_1_vld_in) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_out) and (ap_const_lv2_3 = M_AXIS_V_data_1_state)) or ((ap_const_logic_0 = M_AXIS_V_data_1_ack_out) and (ap_const_lv2_1 = M_AXIS_V_data_1_state)))) then 
                    M_AXIS_V_data_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = M_AXIS_V_data_1_vld_in) and (ap_const_lv2_2 = M_AXIS_V_data_1_state)) or ((ap_const_logic_1 = M_AXIS_V_data_1_ack_out) and (ap_const_lv2_1 = M_AXIS_V_data_1_state)) or ((ap_const_lv2_3 = M_AXIS_V_data_1_state) and not(((ap_const_logic_1 = M_AXIS_V_data_1_vld_in) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_out))) and not(((ap_const_logic_0 = M_AXIS_V_data_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_data_1_ack_out)))))) then 
                    M_AXIS_V_data_1_state <= ap_const_lv2_3;
                else 
                    M_AXIS_V_data_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_last_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_last_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = M_AXIS_V_last_1_ack_out) and (ap_const_logic_1 = M_AXIS_V_last_1_vld_out))) then 
                                        M_AXIS_V_last_1_sel_rd <= not(M_AXIS_V_last_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_last_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_last_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = M_AXIS_V_last_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_last_1_ack_out) and (ap_const_lv2_3 = M_AXIS_V_last_1_state)) or ((ap_const_logic_0 = M_AXIS_V_last_1_vld_in) and (ap_const_lv2_2 = M_AXIS_V_last_1_state)))) then 
                    M_AXIS_V_last_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = M_AXIS_V_last_1_vld_in) and (ap_const_logic_0 = M_AXIS_V_last_1_ack_out) and (ap_const_lv2_3 = M_AXIS_V_last_1_state)) or ((ap_const_logic_0 = M_AXIS_V_last_1_ack_out) and (ap_const_lv2_1 = M_AXIS_V_last_1_state)))) then 
                    M_AXIS_V_last_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = M_AXIS_V_last_1_vld_in) and (ap_const_lv2_2 = M_AXIS_V_last_1_state)) or ((ap_const_logic_1 = M_AXIS_V_last_1_ack_out) and (ap_const_lv2_1 = M_AXIS_V_last_1_state)) or ((ap_const_lv2_3 = M_AXIS_V_last_1_state) and not(((ap_const_logic_1 = M_AXIS_V_last_1_vld_in) and (ap_const_logic_0 = M_AXIS_V_last_1_ack_out))) and not(((ap_const_logic_0 = M_AXIS_V_last_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_last_1_ack_out)))))) then 
                    M_AXIS_V_last_1_state <= ap_const_lv2_3;
                else 
                    M_AXIS_V_last_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = S_AXIS_V_data_0_ack_out) and (ap_const_logic_1 = S_AXIS_V_data_0_vld_out))) then 
                                        S_AXIS_V_data_0_sel_rd <= not(S_AXIS_V_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = S_AXIS_V_data_0_vld_in) and (ap_const_logic_1 = S_AXIS_V_data_0_ack_in))) then 
                                        S_AXIS_V_data_0_sel_wr <= not(S_AXIS_V_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_data_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = S_AXIS_V_data_0_vld_in) and (ap_const_logic_1 = S_AXIS_V_data_0_ack_out) and (S_AXIS_V_data_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = S_AXIS_V_data_0_vld_in) and (S_AXIS_V_data_0_state = ap_const_lv2_2)))) then 
                    S_AXIS_V_data_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = S_AXIS_V_data_0_vld_in) and (ap_const_logic_0 = S_AXIS_V_data_0_ack_out) and (S_AXIS_V_data_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = S_AXIS_V_data_0_ack_out) and (S_AXIS_V_data_0_state = ap_const_lv2_1)))) then 
                    S_AXIS_V_data_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = S_AXIS_V_data_0_vld_in) and (S_AXIS_V_data_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = S_AXIS_V_data_0_ack_out) and (S_AXIS_V_data_0_state = ap_const_lv2_1)) or ((S_AXIS_V_data_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = S_AXIS_V_data_0_vld_in) and (ap_const_logic_0 = S_AXIS_V_data_0_ack_out))) and not(((ap_const_logic_0 = S_AXIS_V_data_0_vld_in) and (ap_const_logic_1 = S_AXIS_V_data_0_ack_out)))))) then 
                    S_AXIS_V_data_0_state <= ap_const_lv2_3;
                else 
                    S_AXIS_V_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_last_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_last_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = S_AXIS_V_last_0_vld_in) and (ap_const_logic_1 = S_AXIS_V_last_0_ack_out) and (ap_const_lv2_3 = S_AXIS_V_last_0_state)) or ((ap_const_logic_0 = S_AXIS_V_last_0_vld_in) and (ap_const_lv2_2 = S_AXIS_V_last_0_state)))) then 
                    S_AXIS_V_last_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = S_AXIS_V_last_0_vld_in) and (ap_const_logic_0 = S_AXIS_V_last_0_ack_out) and (ap_const_lv2_3 = S_AXIS_V_last_0_state)) or ((ap_const_logic_0 = S_AXIS_V_last_0_ack_out) and (ap_const_lv2_1 = S_AXIS_V_last_0_state)))) then 
                    S_AXIS_V_last_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = S_AXIS_V_last_0_vld_in) and (ap_const_lv2_2 = S_AXIS_V_last_0_state)) or ((ap_const_logic_1 = S_AXIS_V_last_0_ack_out) and (ap_const_lv2_1 = S_AXIS_V_last_0_state)) or ((ap_const_lv2_3 = S_AXIS_V_last_0_state) and not(((ap_const_logic_1 = S_AXIS_V_last_0_vld_in) and (ap_const_logic_0 = S_AXIS_V_last_0_ack_out))) and not(((ap_const_logic_0 = S_AXIS_V_last_0_vld_in) and (ap_const_logic_1 = S_AXIS_V_last_0_ack_out)))))) then 
                    S_AXIS_V_last_0_state <= ap_const_lv2_3;
                else 
                    S_AXIS_V_last_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    highest_pred_reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state12) and not((ap_const_lv1_0 = exitcond7_fu_580_p2)))) then 
                highest_pred_reg_368 <= ap_const_lv15_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state29))) then 
                highest_pred_reg_368 <= highest_pred_2_highe_fu_852_p3;
            end if; 
        end if;
    end process;

    i_1_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = exitcond1_fu_434_p2)))) then 
                i_1_reg_278 <= ap_const_lv3_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state6) and not((ap_const_lv1_0 = exitcond5_fu_521_p2)))) then 
                i_1_reg_278 <= i_6_reg_913;
            end if; 
        end if;
    end process;

    i_2_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state11) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0)))) then 
                i_2_reg_311 <= i_7_reg_953;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond4_fu_538_p2) and not(((M_AXIS_V_data_1_ack_in = ap_const_logic_0) or (M_AXIS_V_last_1_ack_in = ap_const_logic_0))))) then 
                i_2_reg_311 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_3_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10) and not((ap_const_lv1_0 = exitcond6_fu_554_p2)))) then 
                i_3_reg_322 <= ap_const_lv3_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
                i_3_reg_322 <= i_8_reg_966;
            end if; 
        end if;
    end process;

    i_4_reg_357_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state12) and not((ap_const_lv1_0 = exitcond7_fu_580_p2)))) then 
                i_4_reg_357 <= ap_const_lv2_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state29))) then 
                i_4_reg_357 <= prediction_reg_1035;
            end if; 
        end if;
    end process;

    i_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = exitcond3_fu_460_p2)))) then 
                i_reg_256 <= i_5_reg_887;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state1))) then 
                i_reg_256 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_1_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0)))) then 
                j_1_reg_289 <= j_5_reg_932;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond2_fu_495_p2) and not((not((ap_const_lv1_0 = exitcond2_fu_495_p2)) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_in))))) then 
                j_1_reg_289 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_2_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
                j_2_reg_346 <= j_6_reg_984;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state12) and (ap_const_lv1_0 = exitcond7_fu_580_p2))) then 
                j_2_reg_346 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_3_reg_393_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state25))) then 
                j_3_reg_393 <= j_7_reg_1059;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state21) and (ap_const_lv1_0 = exitcond8_fu_712_p2) and not((not((ap_const_lv1_0 = exitcond8_fu_712_p2)) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_in))))) then 
                j_3_reg_393 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0)))) then 
                j_reg_267 <= j_4_reg_900;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond1_fu_434_p2))) then 
                j_reg_267 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_const_logic_0 = M_AXIS_V_data_1_ack_in))) then
                if ((ap_const_lv1_1 = ap_CS_fsm_state30)) then 
                    k_reg_300 <= k_1_reg_940;
                elsif ((ap_const_lv1_1 = ap_CS_fsm_state8)) then 
                    k_reg_300 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    values_hidden_layer_1_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
                values_hidden_layer_1_reg_333 <= tmp_5_fu_678_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state12) and (ap_const_lv1_0 = exitcond7_fu_580_p2))) then 
                values_hidden_layer_1_reg_333 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    values_output_layer_1_reg_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state25))) then 
                values_output_layer_1_reg_380 <= tmp_11_fu_806_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state21) and (ap_const_lv1_0 = exitcond8_fu_712_p2) and not((not((ap_const_lv1_0 = exitcond8_fu_712_p2)) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_in))))) then 
                values_output_layer_1_reg_380 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = M_AXIS_V_data_1_load_A)) then
                M_AXIS_V_data_1_payload_A <= M_AXIS_V_data_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = M_AXIS_V_data_1_load_B)) then
                M_AXIS_V_data_1_payload_B <= M_AXIS_V_data_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = S_AXIS_V_data_0_load_A)) then
                S_AXIS_V_data_0_payload_A <= S_AXIS_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = S_AXIS_V_data_0_load_B)) then
                S_AXIS_V_data_0_payload_B <= S_AXIS_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then
                    i_2_cast5_reg_945(3 downto 0) <= i_2_cast5_fu_550_p1(3 downto 0);
                i_7_reg_953 <= i_7_fu_560_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then
                    i_3_cast4_cast_reg_958(2 downto 0) <= i_3_cast4_cast_fu_576_p1(2 downto 0);
                i_8_reg_966 <= i_8_fu_586_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state21) and not((not((ap_const_lv1_0 = exitcond8_fu_712_p2)) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_in))))) then
                    i_4_cast2_cast_reg_1027(1 downto 0) <= i_4_cast2_cast_fu_708_p1(1 downto 0);
                prediction_reg_1035 <= prediction_fu_718_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                i_5_reg_887 <= i_5_fu_440_p2;
                tmp_1_reg_879 <= tmp_1_fu_428_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((not((ap_const_lv1_0 = exitcond2_fu_495_p2)) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_in))))) then
                i_6_reg_913 <= i_6_fu_501_p2;
                tmp_7_reg_905 <= tmp_7_fu_489_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state22) and not((ap_const_lv1_0 = exitcond_fu_757_p2)) and (ap_const_lv1_0 = tmp_8_fu_769_p2))) then
                icmp1_reg_1073 <= icmp1_fu_785_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13) and not((ap_const_lv1_0 = exitcond9_fu_629_p2)) and (ap_const_lv1_0 = tmp_2_fu_641_p2))) then
                icmp_reg_998 <= icmp_fu_657_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                j_4_reg_900 <= j_4_fu_466_p2;
                weights_IH_addr_reg_892 <= tmp_21_cast_fu_455_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then
                j_5_reg_932 <= j_5_fu_527_p2;
                weights_HO_addr_reg_924 <= tmp_22_cast_fu_516_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then
                j_6_reg_984 <= j_6_fu_635_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state22))) then
                j_7_reg_1059 <= j_7_fu_763_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not(((M_AXIS_V_data_1_ack_in = ap_const_logic_0) or (M_AXIS_V_last_1_ack_in = ap_const_logic_0))))) then
                k_1_reg_940 <= k_1_fu_544_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state14))) then
                test_data_load_reg_1002 <= test_data_q0;
                weights_IH_load_reg_1007 <= weights_IH_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state24))) then
                tmp_10_reg_1087 <= tmp_2_i3_fu_872_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13) and not((ap_const_lv1_0 = exitcond9_fu_629_p2)))) then
                tmp_2_reg_994 <= tmp_2_fu_641_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state15))) then
                tmp_4_reg_1012 <= tmp_2_i_fu_865_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state22) and not((ap_const_lv1_0 = exitcond_fu_757_p2)))) then
                tmp_8_reg_1069 <= tmp_8_fu_769_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state29))) then
                tmp_data_fu_120 <= prediction_write_out_fu_844_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state23))) then
                values_hidden_layer_4_reg_1077 <= values_hidden_layer_q0;
                weights_HO_load_reg_1082 <= weights_HO_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state12) and (ap_const_lv1_0 = exitcond7_fu_580_p2))) then
                values_hidden_layer_s_reg_971 <= i_3_cast4_fu_571_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state21) and (ap_const_lv1_0 = exitcond8_fu_712_p2) and not((not((ap_const_lv1_0 = exitcond8_fu_712_p2)) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_in))))) then
                values_output_layer_s_reg_1041 <= i_4_cast2_fu_703_p1(2 - 1 downto 0);
            end if;
        end if;
    end process;
    i_2_cast5_reg_945(31 downto 4) <= "0000000000000000000000000000";
    i_3_cast4_cast_reg_958(6 downto 3) <= "0000";
    i_4_cast2_cast_reg_1027(4 downto 2) <= "000";

    ap_NS_fsm_assign_proc : process (S_AXIS_V_data_0_vld_out, M_AXIS_V_data_1_ack_in, M_AXIS_V_last_1_ack_in, ap_CS_fsm, exitcond2_fu_495_p2, exitcond8_fu_712_p2, exitcond4_fu_538_p2, exitcond7_fu_580_p2, exitcond9_fu_629_p2, exitcond_fu_757_p2, exitcond3_fu_460_p2, exitcond1_fu_434_p2, exitcond5_fu_521_p2, exitcond6_fu_554_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_434_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_460_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_lv1_0 = exitcond2_fu_495_p2) and not((not((ap_const_lv1_0 = exitcond2_fu_495_p2)) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_in))))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif ((not((ap_const_lv1_0 = exitcond2_fu_495_p2)) and not((not((ap_const_lv1_0 = exitcond2_fu_495_p2)) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_in))))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (not((ap_const_lv1_0 = exitcond5_fu_521_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (not((ap_const_logic_0 = M_AXIS_V_data_1_ack_in))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not((ap_const_lv1_0 = exitcond4_fu_538_p2)) and not(((M_AXIS_V_data_1_ack_in = ap_const_logic_0) or (M_AXIS_V_last_1_ack_in = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_lv1_0 = exitcond4_fu_538_p2) and not(((M_AXIS_V_data_1_ack_in = ap_const_logic_0) or (M_AXIS_V_last_1_ack_in = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (not((ap_const_lv1_0 = exitcond6_fu_554_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (not((ap_const_lv1_0 = exitcond7_fu_580_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (not((ap_const_lv1_0 = exitcond9_fu_629_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state21 => 
                if (((ap_const_lv1_0 = exitcond8_fu_712_p2) and not((not((ap_const_lv1_0 = exitcond8_fu_712_p2)) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_in))))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                elsif ((not((ap_const_lv1_0 = exitcond8_fu_712_p2)) and not((not((ap_const_lv1_0 = exitcond8_fu_712_p2)) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_in))))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (not((ap_const_lv1_0 = exitcond_fu_757_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state30 => 
                if (not((ap_const_logic_0 = M_AXIS_V_data_1_ack_in))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    M_AXIS_TDATA <= M_AXIS_V_data_1_data_out;

    M_AXIS_TDATA_blk_n_assign_proc : process(M_AXIS_V_data_1_state, ap_CS_fsm_state5, exitcond2_fu_495_p2, ap_CS_fsm_state8, ap_CS_fsm_state21, exitcond8_fu_712_p2, ap_CS_fsm_state30)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond2_fu_495_p2))) or ((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state21) and not((ap_const_lv1_0 = exitcond8_fu_712_p2))) or ((ap_const_lv1_1 = ap_CS_fsm_state30)))) then 
            M_AXIS_TDATA_blk_n <= M_AXIS_V_data_1_state(1);
        else 
            M_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    M_AXIS_TLAST <= M_AXIS_V_last_1_data_out;
    M_AXIS_TVALID <= M_AXIS_V_last_1_state(0);
    M_AXIS_V_data_1_ack_in <= M_AXIS_V_data_1_state(1);
    M_AXIS_V_data_1_ack_out <= M_AXIS_TREADY;

    M_AXIS_V_data_1_data_in_assign_proc : process(ap_CS_fsm_state5, exitcond2_fu_495_p2, ap_CS_fsm_state21, exitcond8_fu_712_p2, tmp_data_fu_120)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state21) and not((ap_const_lv1_0 = exitcond8_fu_712_p2)))) then 
            M_AXIS_V_data_1_data_in <= tmp_data_fu_120;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond2_fu_495_p2)))) then 
            M_AXIS_V_data_1_data_in <= ap_const_lv32_3039;
        else 
            M_AXIS_V_data_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    M_AXIS_V_data_1_data_out_assign_proc : process(M_AXIS_V_data_1_payload_A, M_AXIS_V_data_1_payload_B, M_AXIS_V_data_1_sel)
    begin
        if ((ap_const_logic_1 = M_AXIS_V_data_1_sel)) then 
            M_AXIS_V_data_1_data_out <= M_AXIS_V_data_1_payload_B;
        else 
            M_AXIS_V_data_1_data_out <= M_AXIS_V_data_1_payload_A;
        end if; 
    end process;

    M_AXIS_V_data_1_load_A <= (M_AXIS_V_data_1_state_cmp_full and not(M_AXIS_V_data_1_sel_wr));
    M_AXIS_V_data_1_load_B <= (M_AXIS_V_data_1_sel_wr and M_AXIS_V_data_1_state_cmp_full);
    M_AXIS_V_data_1_sel <= M_AXIS_V_data_1_sel_rd;
    M_AXIS_V_data_1_state_cmp_full <= '0' when (M_AXIS_V_data_1_state = ap_const_lv2_1) else '1';

    M_AXIS_V_data_1_vld_in_assign_proc : process(M_AXIS_V_data_1_ack_in, ap_CS_fsm_state5, exitcond2_fu_495_p2, ap_CS_fsm_state21, exitcond8_fu_712_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state21) and not((ap_const_lv1_0 = exitcond8_fu_712_p2)) and not((not((ap_const_lv1_0 = exitcond8_fu_712_p2)) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_in)))) or ((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond2_fu_495_p2)) and not((not((ap_const_lv1_0 = exitcond2_fu_495_p2)) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_in)))))) then 
            M_AXIS_V_data_1_vld_in <= ap_const_logic_1;
        else 
            M_AXIS_V_data_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    M_AXIS_V_data_1_vld_out <= M_AXIS_V_data_1_state(0);
    M_AXIS_V_last_1_ack_in <= M_AXIS_V_last_1_state(1);
    M_AXIS_V_last_1_ack_out <= M_AXIS_TREADY;
    M_AXIS_V_last_1_data_out <= ap_const_logic_1;
    M_AXIS_V_last_1_sel <= M_AXIS_V_last_1_sel_rd;

    M_AXIS_V_last_1_vld_in_assign_proc : process(M_AXIS_V_data_1_ack_in, ap_CS_fsm_state5, exitcond2_fu_495_p2, ap_CS_fsm_state21, exitcond8_fu_712_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state21) and not((ap_const_lv1_0 = exitcond8_fu_712_p2)) and not((not((ap_const_lv1_0 = exitcond8_fu_712_p2)) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_in)))) or ((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond2_fu_495_p2)) and not((not((ap_const_lv1_0 = exitcond2_fu_495_p2)) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_in)))))) then 
            M_AXIS_V_last_1_vld_in <= ap_const_logic_1;
        else 
            M_AXIS_V_last_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    M_AXIS_V_last_1_vld_out <= M_AXIS_V_last_1_state(0);

    S_AXIS_TDATA_blk_n_assign_proc : process(S_AXIS_V_data_0_state, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state11)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state4)) or ((ap_const_lv1_1 = ap_CS_fsm_state7)) or ((ap_const_lv1_1 = ap_CS_fsm_state11)))) then 
            S_AXIS_TDATA_blk_n <= S_AXIS_V_data_0_state(0);
        else 
            S_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    S_AXIS_TREADY <= S_AXIS_V_last_0_state(1);
    S_AXIS_V_data_0_ack_in <= S_AXIS_V_data_0_state(1);

    S_AXIS_V_data_0_ack_out_assign_proc : process(S_AXIS_V_data_0_vld_out, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state11)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state4) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state7) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state11) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))))) then 
            S_AXIS_V_data_0_ack_out <= ap_const_logic_1;
        else 
            S_AXIS_V_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    S_AXIS_V_data_0_data_out_assign_proc : process(S_AXIS_V_data_0_payload_A, S_AXIS_V_data_0_payload_B, S_AXIS_V_data_0_sel)
    begin
        if ((ap_const_logic_1 = S_AXIS_V_data_0_sel)) then 
            S_AXIS_V_data_0_data_out <= S_AXIS_V_data_0_payload_B;
        else 
            S_AXIS_V_data_0_data_out <= S_AXIS_V_data_0_payload_A;
        end if; 
    end process;

    S_AXIS_V_data_0_load_A <= (S_AXIS_V_data_0_state_cmp_full and not(S_AXIS_V_data_0_sel_wr));
    S_AXIS_V_data_0_load_B <= (S_AXIS_V_data_0_sel_wr and S_AXIS_V_data_0_state_cmp_full);
    S_AXIS_V_data_0_sel <= S_AXIS_V_data_0_sel_rd;
    S_AXIS_V_data_0_state_cmp_full <= '0' when (S_AXIS_V_data_0_state = ap_const_lv2_1) else '1';
    S_AXIS_V_data_0_vld_in <= S_AXIS_TVALID;
    S_AXIS_V_data_0_vld_out <= S_AXIS_V_data_0_state(0);

    S_AXIS_V_last_0_ack_out_assign_proc : process(S_AXIS_V_data_0_vld_out, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state11)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state4) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state7) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state11) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))))) then 
            S_AXIS_V_last_0_ack_out <= ap_const_logic_1;
        else 
            S_AXIS_V_last_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    S_AXIS_V_last_0_vld_in <= S_AXIS_TVALID;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18 downto 18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19 downto 19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20 downto 20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21 downto 21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22 downto 22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23 downto 23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24 downto 24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25 downto 25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26 downto 26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27 downto 27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28 downto 28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29 downto 29);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond1_fu_434_p2 <= "1" when (i_reg_256 = ap_const_lv4_D) else "0";
    exitcond2_fu_495_p2 <= "1" when (i_1_reg_278 = ap_const_lv3_5) else "0";
    exitcond3_fu_460_p2 <= "1" when (j_reg_267 = ap_const_lv3_5) else "0";
    exitcond4_fu_538_p2 <= "1" when (k_reg_300 = ap_const_lv6_24) else "0";
    exitcond5_fu_521_p2 <= "1" when (j_1_reg_289 = ap_const_lv2_3) else "0";
    exitcond6_fu_554_p2 <= "1" when (i_2_reg_311 = ap_const_lv4_D) else "0";
    exitcond7_fu_580_p2 <= "1" when (i_3_reg_322 = ap_const_lv3_5) else "0";
    exitcond8_fu_712_p2 <= "1" when (i_4_reg_357 = ap_const_lv2_3) else "0";
    exitcond9_fu_629_p2 <= "1" when (j_2_reg_346 = ap_const_lv4_D) else "0";
    exitcond_fu_757_p2 <= "1" when (j_3_reg_393 = ap_const_lv3_5) else "0";
    highest_pred_1_cast6_fu_831_p1 <= std_logic_vector(resize(unsigned(sigmoid_arr_q0),15));
    highest_pred_1_fu_826_p1 <= std_logic_vector(resize(unsigned(sigmoid_arr_q0),16));
    highest_pred_2_highe_fu_852_p3 <= 
        highest_pred_1_cast6_fu_831_p1 when (tmp_16_fu_835_p2(0) = '1') else 
        highest_pred_reg_368;
    i_1_cast7_cast_fu_477_p1 <= std_logic_vector(resize(unsigned(i_1_reg_278),5));
    i_2_cast5_fu_550_p1 <= std_logic_vector(resize(unsigned(i_2_reg_311),32));
    i_3_cast4_cast_fu_576_p1 <= std_logic_vector(resize(unsigned(i_3_reg_322),7));
    i_3_cast4_fu_571_p1 <= std_logic_vector(resize(unsigned(i_3_reg_322),32));
    i_4_cast2_cast_fu_708_p1 <= std_logic_vector(resize(unsigned(i_4_reg_357),5));
    i_4_cast2_fu_703_p1 <= std_logic_vector(resize(unsigned(i_4_reg_357),32));
    i_5_fu_440_p2 <= std_logic_vector(unsigned(i_reg_256) + unsigned(ap_const_lv4_1));
    i_6_fu_501_p2 <= std_logic_vector(unsigned(i_1_reg_278) + unsigned(ap_const_lv3_1));
    i_7_fu_560_p2 <= std_logic_vector(unsigned(i_2_reg_311) + unsigned(ap_const_lv4_1));
    i_8_fu_586_p2 <= std_logic_vector(unsigned(i_3_reg_322) + unsigned(ap_const_lv3_1));
    i_cast9_cast_fu_412_p1 <= std_logic_vector(resize(unsigned(i_reg_256),7));
    icmp1_fu_785_p2 <= "1" when (signed(tmp_28_fu_775_p4) > signed(ap_const_lv6_0)) else "0";
    icmp_fu_657_p2 <= "1" when (signed(tmp_27_fu_647_p4) > signed(ap_const_lv6_0)) else "0";
    j_1_cast6_cast_fu_507_p1 <= std_logic_vector(resize(unsigned(j_1_reg_289),5));
    j_2_cast3_cast_fu_597_p1 <= std_logic_vector(resize(unsigned(j_2_reg_346),7));
    j_2_cast3_fu_592_p1 <= std_logic_vector(resize(unsigned(j_2_reg_346),32));
    j_3_cast1_cast_fu_729_p1 <= std_logic_vector(resize(unsigned(j_3_reg_393),5));
    j_3_cast1_fu_724_p1 <= std_logic_vector(resize(unsigned(j_3_reg_393),32));
    j_4_fu_466_p2 <= std_logic_vector(unsigned(j_reg_267) + unsigned(ap_const_lv3_1));
    j_5_fu_527_p2 <= std_logic_vector(unsigned(j_1_reg_289) + unsigned(ap_const_lv2_1));
    j_6_fu_635_p2 <= std_logic_vector(unsigned(j_2_reg_346) + unsigned(ap_const_lv4_1));
    j_7_fu_763_p2 <= std_logic_vector(unsigned(j_3_reg_393) + unsigned(ap_const_lv3_1));
    j_cast8_cast_fu_446_p1 <= std_logic_vector(resize(unsigned(j_reg_267),7));
    k_1_fu_544_p2 <= std_logic_vector(unsigned(k_reg_300) + unsigned(ap_const_lv6_1));
    p_shl2_cast_fu_609_p1 <= std_logic_vector(resize(unsigned(tmp_21_fu_601_p3),7));
    p_shl_cast_fu_424_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_416_p3),7));
    prediction_cast_fu_841_p1 <= std_logic_vector(resize(unsigned(prediction_reg_1035),32));
    prediction_fu_718_p2 <= std_logic_vector(unsigned(i_4_reg_357) + unsigned(ap_const_lv2_1));
    prediction_write_out_fu_844_p3 <= 
        prediction_cast_fu_841_p1 when (tmp_16_fu_835_p2(0) = '1') else 
        tmp_data_fu_120;

    sigmoid_arr_address0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state28, tmp_14_cast_fu_693_p1, tmp_17_cast_fu_821_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state28))) then 
            sigmoid_arr_address0 <= tmp_17_cast_fu_821_p1(11 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state19))) then 
            sigmoid_arr_address0 <= tmp_14_cast_fu_693_p1(11 - 1 downto 0);
        else 
            sigmoid_arr_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    sigmoid_arr_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state28)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state19)) or ((ap_const_lv1_1 = ap_CS_fsm_state28)))) then 
            sigmoid_arr_ce0 <= ap_const_logic_1;
        else 
            sigmoid_arr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    test_data_address0_assign_proc : process(ap_CS_fsm_state11, i_2_cast5_reg_945, ap_CS_fsm_state13, j_2_cast3_fu_592_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            test_data_address0 <= j_2_cast3_fu_592_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
            test_data_address0 <= i_2_cast5_reg_945(4 - 1 downto 0);
        else 
            test_data_address0 <= "XXXX";
        end if; 
    end process;


    test_data_ce0_assign_proc : process(S_AXIS_V_data_0_vld_out, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state11) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))))) then 
            test_data_ce0 <= ap_const_logic_1;
        else 
            test_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    test_data_d0 <= S_AXIS_V_data_0_data_out(16 - 1 downto 0);

    test_data_we0_assign_proc : process(S_AXIS_V_data_0_vld_out, ap_CS_fsm_state11)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state11) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))))) then 
            test_data_we0 <= ap_const_logic_1;
        else 
            test_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_11_fu_806_p2 <= std_logic_vector(unsigned(values_output_layer_1_reg_380) + unsigned(tmp_10_reg_1087));
    tmp_12_fu_450_p2 <= std_logic_vector(unsigned(tmp_1_reg_879) + unsigned(j_cast8_cast_fu_446_p1));
    tmp_13_fu_687_p2 <= std_logic_vector(unsigned(ap_const_lv13_400) + unsigned(tmp_29_fu_683_p1));
        tmp_14_cast_fu_693_p1 <= std_logic_vector(resize(signed(tmp_13_fu_687_p2),32));

    tmp_14_fu_698_p1 <= std_logic_vector(resize(unsigned(sigmoid_arr_q0),16));
    tmp_15_fu_815_p2 <= std_logic_vector(unsigned(ap_const_lv13_400) + unsigned(tmp_30_fu_811_p1));
    tmp_16_fu_835_p2 <= "1" when (unsigned(highest_pred_1_cast6_fu_831_p1) > unsigned(highest_pred_reg_368)) else "0";
        tmp_17_cast_fu_821_p1 <= std_logic_vector(resize(signed(tmp_15_fu_815_p2),32));

    tmp_18_fu_511_p2 <= std_logic_vector(unsigned(tmp_7_reg_905) + unsigned(j_1_cast6_cast_fu_507_p1));
    tmp_1_fu_428_p2 <= std_logic_vector(unsigned(i_cast9_cast_fu_412_p1) + unsigned(p_shl_cast_fu_424_p1));
    tmp_21_cast_fu_455_p1 <= std_logic_vector(resize(unsigned(tmp_12_fu_450_p2),32));
    tmp_21_fu_601_p3 <= (j_2_reg_346 & ap_const_lv2_0);
        tmp_22_cast_fu_516_p1 <= std_logic_vector(resize(signed(tmp_18_fu_511_p2),32));

    tmp_22_fu_613_p2 <= std_logic_vector(unsigned(j_2_cast3_cast_fu_597_p1) + unsigned(p_shl2_cast_fu_609_p1));
    tmp_23_fu_619_p2 <= std_logic_vector(unsigned(tmp_22_fu_613_p2) + unsigned(i_3_cast4_cast_reg_958));
    tmp_24_fu_733_p3 <= (j_3_reg_393 & ap_const_lv2_0);
    tmp_25_cast_fu_624_p1 <= std_logic_vector(resize(unsigned(tmp_23_fu_619_p2),32));
    tmp_25_fu_741_p2 <= std_logic_vector(unsigned(tmp_24_fu_733_p3) - unsigned(j_3_cast1_cast_fu_729_p1));
    tmp_26_fu_747_p2 <= std_logic_vector(unsigned(tmp_25_fu_741_p2) + unsigned(i_4_cast2_cast_reg_1027));
    tmp_27_fu_647_p4 <= values_hidden_layer_1_reg_333(15 downto 10);
        tmp_28_cast_fu_752_p1 <= std_logic_vector(resize(signed(tmp_26_fu_747_p2),32));

    tmp_28_fu_775_p4 <= values_output_layer_1_reg_380(15 downto 10);
    tmp_29_fu_683_p1 <= values_hidden_layer_q0(13 - 1 downto 0);
    tmp_2_fu_641_p2 <= "1" when (signed(values_hidden_layer_1_reg_333) < signed(ap_const_lv16_FC00)) else "0";
    tmp_30_fu_811_p1 <= values_output_layer_q0(13 - 1 downto 0);
    tmp_5_fu_678_p2 <= std_logic_vector(unsigned(values_hidden_layer_1_reg_333) + unsigned(tmp_4_reg_1012));
    tmp_6_fu_481_p3 <= (i_1_reg_278 & ap_const_lv2_0);
    tmp_7_fu_489_p2 <= std_logic_vector(unsigned(tmp_6_fu_481_p3) - unsigned(i_1_cast7_cast_fu_477_p1));
    tmp_8_fu_769_p2 <= "1" when (signed(values_output_layer_1_reg_380) < signed(ap_const_lv16_FC00)) else "0";
    tmp_s_fu_416_p3 <= (i_reg_256 & ap_const_lv2_0);

    values_hidden_layer_address0_assign_proc : process(values_hidden_layer_s_reg_971, ap_CS_fsm_state13, tmp_2_reg_994, icmp_reg_998, ap_CS_fsm_state22, ap_CS_fsm_state20, j_3_cast1_fu_724_p1, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state22))) then 
            values_hidden_layer_address0 <= j_3_cast1_fu_724_p1(3 - 1 downto 0);
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state20)) or ((ap_const_lv1_1 = ap_CS_fsm_state17) and (ap_const_lv1_0 = tmp_2_reg_994) and not((ap_const_lv1_0 = icmp_reg_998))) or ((ap_const_lv1_1 = ap_CS_fsm_state17) and not((ap_const_lv1_0 = tmp_2_reg_994))) or ((ap_const_lv1_1 = ap_CS_fsm_state18)))) then 
            values_hidden_layer_address0 <= values_hidden_layer_s_reg_971;
        else 
            values_hidden_layer_address0 <= "XXX";
        end if; 
    end process;


    values_hidden_layer_ce0_assign_proc : process(ap_CS_fsm_state13, tmp_2_reg_994, icmp_reg_998, ap_CS_fsm_state22, ap_CS_fsm_state20, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state22)) or ((ap_const_lv1_1 = ap_CS_fsm_state20)) or ((ap_const_lv1_1 = ap_CS_fsm_state17) and (ap_const_lv1_0 = tmp_2_reg_994) and not((ap_const_lv1_0 = icmp_reg_998))) or ((ap_const_lv1_1 = ap_CS_fsm_state17) and not((ap_const_lv1_0 = tmp_2_reg_994))) or ((ap_const_lv1_1 = ap_CS_fsm_state18)))) then 
            values_hidden_layer_ce0 <= ap_const_logic_1;
        else 
            values_hidden_layer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    values_hidden_layer_d0_assign_proc : process(ap_CS_fsm_state13, tmp_2_reg_994, icmp_reg_998, ap_CS_fsm_state20, values_hidden_layer_1_reg_333, ap_CS_fsm_state17, tmp_14_fu_698_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
            values_hidden_layer_d0 <= tmp_14_fu_698_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state17) and not((ap_const_lv1_0 = tmp_2_reg_994)))) then 
            values_hidden_layer_d0 <= ap_const_lv16_FC00;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state17) and (ap_const_lv1_0 = tmp_2_reg_994) and not((ap_const_lv1_0 = icmp_reg_998)))) then 
            values_hidden_layer_d0 <= ap_const_lv16_3FF;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            values_hidden_layer_d0 <= values_hidden_layer_1_reg_333;
        else 
            values_hidden_layer_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    values_hidden_layer_we0_assign_proc : process(ap_CS_fsm_state13, tmp_2_reg_994, icmp_reg_998, ap_CS_fsm_state20, ap_CS_fsm_state17)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state20)) or ((ap_const_lv1_1 = ap_CS_fsm_state17) and (ap_const_lv1_0 = tmp_2_reg_994) and not((ap_const_lv1_0 = icmp_reg_998))) or ((ap_const_lv1_1 = ap_CS_fsm_state17) and not((ap_const_lv1_0 = tmp_2_reg_994))))) then 
            values_hidden_layer_we0 <= ap_const_logic_1;
        else 
            values_hidden_layer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    values_output_layer_ce0_assign_proc : process(ap_CS_fsm_state22, tmp_8_reg_1069, icmp1_reg_1073, ap_CS_fsm_state29, ap_CS_fsm_state26, ap_CS_fsm_state27)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state22)) or ((ap_const_lv1_1 = ap_CS_fsm_state29)) or ((ap_const_lv1_1 = ap_CS_fsm_state26) and (ap_const_lv1_0 = tmp_8_reg_1069) and not((ap_const_lv1_0 = icmp1_reg_1073))) or ((ap_const_lv1_1 = ap_CS_fsm_state26) and not((ap_const_lv1_0 = tmp_8_reg_1069))) or ((ap_const_lv1_1 = ap_CS_fsm_state27)))) then 
            values_output_layer_ce0 <= ap_const_logic_1;
        else 
            values_output_layer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    values_output_layer_d0_assign_proc : process(ap_CS_fsm_state22, tmp_8_reg_1069, icmp1_reg_1073, ap_CS_fsm_state29, values_output_layer_1_reg_380, ap_CS_fsm_state26, highest_pred_1_fu_826_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state29))) then 
            values_output_layer_d0 <= highest_pred_1_fu_826_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state26) and not((ap_const_lv1_0 = tmp_8_reg_1069)))) then 
            values_output_layer_d0 <= ap_const_lv16_FC00;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state26) and (ap_const_lv1_0 = tmp_8_reg_1069) and not((ap_const_lv1_0 = icmp1_reg_1073)))) then 
            values_output_layer_d0 <= ap_const_lv16_3FF;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state22))) then 
            values_output_layer_d0 <= values_output_layer_1_reg_380;
        else 
            values_output_layer_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    values_output_layer_we0_assign_proc : process(ap_CS_fsm_state22, tmp_8_reg_1069, icmp1_reg_1073, ap_CS_fsm_state29, ap_CS_fsm_state26)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state22)) or ((ap_const_lv1_1 = ap_CS_fsm_state29)) or ((ap_const_lv1_1 = ap_CS_fsm_state26) and (ap_const_lv1_0 = tmp_8_reg_1069) and not((ap_const_lv1_0 = icmp1_reg_1073))) or ((ap_const_lv1_1 = ap_CS_fsm_state26) and not((ap_const_lv1_0 = tmp_8_reg_1069))))) then 
            values_output_layer_we0 <= ap_const_logic_1;
        else 
            values_output_layer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_HO_address0_assign_proc : process(ap_CS_fsm_state7, weights_HO_addr_reg_924, ap_CS_fsm_state22, tmp_28_cast_fu_752_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state22))) then 
            weights_HO_address0 <= tmp_28_cast_fu_752_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
            weights_HO_address0 <= weights_HO_addr_reg_924;
        else 
            weights_HO_address0 <= "XXXX";
        end if; 
    end process;


    weights_HO_ce0_assign_proc : process(S_AXIS_V_data_0_vld_out, ap_CS_fsm_state7, ap_CS_fsm_state22)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state22)) or ((ap_const_lv1_1 = ap_CS_fsm_state7) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))))) then 
            weights_HO_ce0 <= ap_const_logic_1;
        else 
            weights_HO_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_HO_d0 <= S_AXIS_V_data_0_data_out(16 - 1 downto 0);

    weights_HO_we0_assign_proc : process(S_AXIS_V_data_0_vld_out, ap_CS_fsm_state7)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state7) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))))) then 
            weights_HO_we0 <= ap_const_logic_1;
        else 
            weights_HO_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_IH_address0_assign_proc : process(ap_CS_fsm_state4, weights_IH_addr_reg_892, ap_CS_fsm_state13, tmp_25_cast_fu_624_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            weights_IH_address0 <= tmp_25_cast_fu_624_p1(7 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            weights_IH_address0 <= weights_IH_addr_reg_892;
        else 
            weights_IH_address0 <= "XXXXXXX";
        end if; 
    end process;


    weights_IH_ce0_assign_proc : process(S_AXIS_V_data_0_vld_out, ap_CS_fsm_state4, ap_CS_fsm_state13)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state4) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))))) then 
            weights_IH_ce0 <= ap_const_logic_1;
        else 
            weights_IH_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_IH_d0 <= S_AXIS_V_data_0_data_out(16 - 1 downto 0);

    weights_IH_we0_assign_proc : process(S_AXIS_V_data_0_vld_out, ap_CS_fsm_state4)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state4) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))))) then 
            weights_IH_we0 <= ap_const_logic_1;
        else 
            weights_IH_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
