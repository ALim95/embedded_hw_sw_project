-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity AXISTry_sigmoid_arr_rom is 
    generic(
             dwidth     : integer := 8; 
             awidth     : integer := 11; 
             mem_size    : integer := 2048
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of AXISTry_sigmoid_arr_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 to 25=> "00000100", 26 to 76=> "00000101", 77 to 127=> "00000110", 128 to 153=> "00000111", 
    154 to 179=> "00001000", 180 to 204=> "00001001", 205 to 230=> "00001010", 231 to 255=> "00001011", 
    256 to 281=> "00001100", 282 to 307=> "00001101", 308 to 332=> "00001110", 333 to 358=> "00010000", 
    359 to 383=> "00010001", 384 to 409=> "00010011", 410 to 435=> "00010101", 436 to 460=> "00010111", 
    461 to 486=> "00011001", 487 to 511=> "00011011", 512 to 537=> "00011110", 538 to 563=> "00100001", 
    564 to 588=> "00100100", 589 to 614=> "00100111", 615 to 639=> "00101011", 640 to 665=> "00101110", 
    666 to 691=> "00110010", 692 to 716=> "00110110", 717 to 742=> "00111011", 743 to 767=> "00111111", 
    768 to 793=> "01000100", 794 to 819=> "01001001", 820 to 844=> "01001111", 845 to 870=> "01010100", 
    871 to 895=> "01011010", 896 to 921=> "01100000", 922 to 947=> "01100110", 948 to 972=> "01101100", 
    973 to 998=> "01110011", 999 to 1023=> "01111001", 1024 to 1048=> "01111111", 1049 to 1074=> "10000110", 
    1075 to 1099=> "10001100", 1100 to 1125=> "10010011", 1126 to 1150=> "10011001", 1151 to 1176=> "10011111", 
    1177 to 1202=> "10100101", 1203 to 1227=> "10101011", 1228 to 1253=> "10110000", 1254 to 1278=> "10110110", 
    1279 to 1304=> "10111011", 1305 to 1330=> "11000000", 1331 to 1355=> "11000100", 1356 to 1381=> "11001001", 
    1382 to 1406=> "11001101", 1407 to 1432=> "11010001", 1433 to 1458=> "11010100", 1459 to 1483=> "11011000", 
    1484 to 1509=> "11011011", 1510 to 1534=> "11011110", 1535 to 1560=> "11100001", 1561 to 1586=> "11100100", 
    1587 to 1611=> "11100110", 1612 to 1637=> "11101000", 1638 to 1662=> "11101010", 1663 to 1688=> "11101100", 
    1689 to 1714=> "11101110", 1715 to 1739=> "11101111", 1740 to 1765=> "11110001", 1766 to 1790=> "11110010", 
    1791 to 1816=> "11110011", 1817 to 1842=> "11110100", 1843 to 1867=> "11110101", 1868 to 1893=> "11110110", 
    1894 to 1918=> "11110111", 1919 to 1944=> "11111000", 1945 to 1995=> "11111001", 1996 to 2046=> "11111010", 
    2047 => "11111011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity AXISTry_sigmoid_arr is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 2048;
        AddressWidth : INTEGER := 11);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of AXISTry_sigmoid_arr is
    component AXISTry_sigmoid_arr_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    AXISTry_sigmoid_arr_rom_U :  component AXISTry_sigmoid_arr_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


