// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="AXISEnhanced,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.148000,HLS_SYN_LAT=14240,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=8,HLS_SYN_FF=846,HLS_SYN_LUT=1066}" *)

module AXISEnhanced (
        ap_clk,
        ap_rst_n,
        S_AXIS_TDATA,
        S_AXIS_TVALID,
        S_AXIS_TREADY,
        S_AXIS_TLAST,
        M_AXIS_TDATA,
        M_AXIS_TVALID,
        M_AXIS_TREADY,
        M_AXIS_TLAST
);

parameter    ap_ST_fsm_state1 = 77'b1;
parameter    ap_ST_fsm_state2 = 77'b10;
parameter    ap_ST_fsm_state3 = 77'b100;
parameter    ap_ST_fsm_state4 = 77'b1000;
parameter    ap_ST_fsm_state5 = 77'b10000;
parameter    ap_ST_fsm_state6 = 77'b100000;
parameter    ap_ST_fsm_state7 = 77'b1000000;
parameter    ap_ST_fsm_state8 = 77'b10000000;
parameter    ap_ST_fsm_state9 = 77'b100000000;
parameter    ap_ST_fsm_state10 = 77'b1000000000;
parameter    ap_ST_fsm_state11 = 77'b10000000000;
parameter    ap_ST_fsm_state12 = 77'b100000000000;
parameter    ap_ST_fsm_state13 = 77'b1000000000000;
parameter    ap_ST_fsm_state14 = 77'b10000000000000;
parameter    ap_ST_fsm_state15 = 77'b100000000000000;
parameter    ap_ST_fsm_state16 = 77'b1000000000000000;
parameter    ap_ST_fsm_state17 = 77'b10000000000000000;
parameter    ap_ST_fsm_state18 = 77'b100000000000000000;
parameter    ap_ST_fsm_state19 = 77'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 77'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 77'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 77'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 77'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 77'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 77'b1000000000000000000000000;
parameter    ap_ST_fsm_state26 = 77'b10000000000000000000000000;
parameter    ap_ST_fsm_state27 = 77'b100000000000000000000000000;
parameter    ap_ST_fsm_state28 = 77'b1000000000000000000000000000;
parameter    ap_ST_fsm_state29 = 77'b10000000000000000000000000000;
parameter    ap_ST_fsm_state30 = 77'b100000000000000000000000000000;
parameter    ap_ST_fsm_state31 = 77'b1000000000000000000000000000000;
parameter    ap_ST_fsm_state32 = 77'b10000000000000000000000000000000;
parameter    ap_ST_fsm_state33 = 77'b100000000000000000000000000000000;
parameter    ap_ST_fsm_state34 = 77'b1000000000000000000000000000000000;
parameter    ap_ST_fsm_state35 = 77'b10000000000000000000000000000000000;
parameter    ap_ST_fsm_state36 = 77'b100000000000000000000000000000000000;
parameter    ap_ST_fsm_state37 = 77'b1000000000000000000000000000000000000;
parameter    ap_ST_fsm_state38 = 77'b10000000000000000000000000000000000000;
parameter    ap_ST_fsm_state39 = 77'b100000000000000000000000000000000000000;
parameter    ap_ST_fsm_state40 = 77'b1000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state41 = 77'b10000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state42 = 77'b100000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state43 = 77'b1000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state44 = 77'b10000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state45 = 77'b100000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state46 = 77'b1000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state47 = 77'b10000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state48 = 77'b100000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state49 = 77'b1000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state50 = 77'b10000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state51 = 77'b100000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state52 = 77'b1000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state53 = 77'b10000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state54 = 77'b100000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state55 = 77'b1000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state56 = 77'b10000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state57 = 77'b100000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state58 = 77'b1000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state59 = 77'b10000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state60 = 77'b100000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state61 = 77'b1000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state62 = 77'b10000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state63 = 77'b100000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state64 = 77'b1000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state65 = 77'b10000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state66 = 77'b100000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state67 = 77'b1000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state68 = 77'b10000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state69 = 77'b100000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state70 = 77'b1000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state71 = 77'b10000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state72 = 77'b100000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state73 = 77'b1000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state74 = 77'b10000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state75 = 77'b100000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state76 = 77'b1000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state77 = 77'b10000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_4B = 32'b1001011;
parameter    ap_const_lv32_4C = 32'b1001100;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv32_24 = 32'b100100;
parameter    ap_const_lv32_2C = 32'b101100;
parameter    ap_const_lv32_34 = 32'b110100;
parameter    ap_const_lv32_3C = 32'b111100;
parameter    ap_const_lv32_45 = 32'b1000101;
parameter    ap_const_lv32_3A = 32'b111010;
parameter    ap_const_lv32_43 = 32'b1000011;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_1D = 32'b11101;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv32_21 = 32'b100001;
parameter    ap_const_lv32_23 = 32'b100011;
parameter    ap_const_lv32_25 = 32'b100101;
parameter    ap_const_lv32_26 = 32'b100110;
parameter    ap_const_lv32_29 = 32'b101001;
parameter    ap_const_lv32_2B = 32'b101011;
parameter    ap_const_lv32_2D = 32'b101101;
parameter    ap_const_lv32_2E = 32'b101110;
parameter    ap_const_lv32_31 = 32'b110001;
parameter    ap_const_lv32_33 = 32'b110011;
parameter    ap_const_lv32_35 = 32'b110101;
parameter    ap_const_lv32_36 = 32'b110110;
parameter    ap_const_lv32_39 = 32'b111001;
parameter    ap_const_lv32_3B = 32'b111011;
parameter    ap_const_lv32_3D = 32'b111101;
parameter    ap_const_lv32_3E = 32'b111110;
parameter    ap_const_lv32_41 = 32'b1000001;
parameter    ap_const_lv32_42 = 32'b1000010;
parameter    ap_const_lv32_44 = 32'b1000100;
parameter    ap_const_lv32_46 = 32'b1000110;
parameter    ap_const_lv32_47 = 32'b1000111;
parameter    ap_const_lv32_4A = 32'b1001010;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv32_22 = 32'b100010;
parameter    ap_const_lv32_2A = 32'b101010;
parameter    ap_const_lv32_32 = 32'b110010;
parameter    ap_const_lv32_3039 = 32'b11000000111001;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv16_3FF = 16'b1111111111;
parameter    ap_const_lv16_FC00 = 16'b1111110000000000;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv3_2 = 3'b10;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv3_3 = 3'b11;
parameter    ap_const_lv32_27 = 32'b100111;
parameter    ap_const_lv32_28 = 32'b101000;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv32_2F = 32'b101111;
parameter    ap_const_lv32_30 = 32'b110000;
parameter    ap_const_lv32_37 = 32'b110111;
parameter    ap_const_lv32_38 = 32'b111000;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv32_40 = 32'b1000000;
parameter    ap_const_lv32_48 = 32'b1001000;
parameter    ap_const_lv32_49 = 32'b1001001;
parameter    ap_const_lv4_D = 4'b1101;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv3_5 = 3'b101;
parameter    ap_const_lv6_24 = 6'b100100;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv13_400 = 13'b10000000000;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv7_2 = 7'b10;
parameter    ap_const_lv7_3 = 7'b11;
parameter    ap_const_lv7_4 = 7'b100;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv5_2 = 5'b10;

input   ap_clk;
input   ap_rst_n;
input  [31:0] S_AXIS_TDATA;
input   S_AXIS_TVALID;
output   S_AXIS_TREADY;
input   S_AXIS_TLAST;
output  [31:0] M_AXIS_TDATA;
output   M_AXIS_TVALID;
input   M_AXIS_TREADY;
output   M_AXIS_TLAST;

reg    ap_rst_n_inv;
reg   [31:0] S_AXIS_V_data_0_data_out;
wire    S_AXIS_V_data_0_vld_in;
wire    S_AXIS_V_data_0_vld_out;
wire    S_AXIS_V_data_0_ack_in;
reg    S_AXIS_V_data_0_ack_out;
reg   [31:0] S_AXIS_V_data_0_payload_A;
reg   [31:0] S_AXIS_V_data_0_payload_B;
reg    S_AXIS_V_data_0_sel_rd;
reg    S_AXIS_V_data_0_sel_wr;
wire    S_AXIS_V_data_0_sel;
wire    S_AXIS_V_data_0_load_A;
wire    S_AXIS_V_data_0_load_B;
reg   [1:0] S_AXIS_V_data_0_state;
wire    S_AXIS_V_data_0_state_cmp_full;
wire    S_AXIS_V_last_0_vld_in;
reg    S_AXIS_V_last_0_ack_out;
reg   [1:0] S_AXIS_V_last_0_state;
reg   [31:0] M_AXIS_V_data_1_data_in;
reg   [31:0] M_AXIS_V_data_1_data_out;
reg    M_AXIS_V_data_1_vld_in;
wire    M_AXIS_V_data_1_vld_out;
wire    M_AXIS_V_data_1_ack_in;
wire    M_AXIS_V_data_1_ack_out;
reg   [31:0] M_AXIS_V_data_1_payload_A;
reg   [31:0] M_AXIS_V_data_1_payload_B;
reg    M_AXIS_V_data_1_sel_rd;
reg    M_AXIS_V_data_1_sel_wr;
wire    M_AXIS_V_data_1_sel;
wire    M_AXIS_V_data_1_load_A;
wire    M_AXIS_V_data_1_load_B;
reg   [1:0] M_AXIS_V_data_1_state;
wire    M_AXIS_V_data_1_state_cmp_full;
wire    M_AXIS_V_last_1_data_out;
reg    M_AXIS_V_last_1_vld_in;
wire    M_AXIS_V_last_1_vld_out;
wire    M_AXIS_V_last_1_ack_in;
wire    M_AXIS_V_last_1_ack_out;
reg    M_AXIS_V_last_1_sel_rd;
wire    M_AXIS_V_last_1_sel;
reg   [1:0] M_AXIS_V_last_1_state;
reg   [6:0] weights_IH_address0;
reg    weights_IH_ce0;
reg    weights_IH_we0;
wire   [15:0] weights_IH_d0;
wire   [15:0] weights_IH_q0;
reg   [3:0] weights_HO_address0;
reg    weights_HO_ce0;
reg    weights_HO_we0;
wire   [15:0] weights_HO_d0;
wire   [15:0] weights_HO_q0;
reg   [3:0] test_data_address0;
reg    test_data_ce0;
reg    test_data_we0;
wire   [15:0] test_data_d0;
wire   [15:0] test_data_q0;
reg   [10:0] sigmoid_arr_address0;
reg    sigmoid_arr_ce0;
wire   [7:0] sigmoid_arr_q0;
reg   [2:0] values_hidden_layer_address0;
reg    values_hidden_layer_ce0;
reg    values_hidden_layer_we0;
reg   [15:0] values_hidden_layer_d0;
wire   [15:0] values_hidden_layer_q0;
reg   [1:0] values_output_layer_address0;
reg    values_output_layer_ce0;
reg    values_output_layer_we0;
reg   [15:0] values_output_layer_d0;
wire   [15:0] values_output_layer_q0;
reg    S_AXIS_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [76:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state4;
wire   [0:0] ap_CS_fsm_state7;
wire   [0:0] ap_CS_fsm_state11;
reg    M_AXIS_TDATA_blk_n;
wire   [0:0] ap_CS_fsm_state5;
wire   [0:0] exitcond2_fu_801_p2;
wire   [0:0] ap_CS_fsm_state8;
wire   [0:0] ap_CS_fsm_state76;
wire   [0:0] ap_CS_fsm_state77;
reg  signed [15:0] reg_692;
wire   [0:0] ap_CS_fsm_state13;
wire   [0:0] ap_CS_fsm_state21;
wire   [0:0] ap_CS_fsm_state29;
wire   [0:0] ap_CS_fsm_state37;
wire   [0:0] ap_CS_fsm_state45;
reg  signed [15:0] reg_696;
reg  signed [15:0] reg_700;
wire   [0:0] ap_CS_fsm_state53;
wire   [0:0] ap_CS_fsm_state61;
wire   [0:0] ap_CS_fsm_state70;
reg  signed [15:0] reg_704;
reg   [7:0] reg_708;
wire   [0:0] ap_CS_fsm_state59;
wire   [0:0] ap_CS_fsm_state68;
wire   [6:0] tmp_1_fu_734_p2;
reg   [6:0] tmp_1_reg_1858;
wire   [0:0] ap_CS_fsm_state2;
wire   [3:0] i_3_fu_746_p2;
reg   [3:0] i_3_reg_1866;
reg   [6:0] weights_IH_addr_reg_1871;
wire   [0:0] ap_CS_fsm_state3;
wire   [2:0] j_2_fu_772_p2;
reg   [2:0] j_2_reg_1879;
wire   [4:0] tmp_6_fu_795_p2;
reg   [4:0] tmp_6_reg_1884;
wire   [2:0] i_4_fu_807_p2;
reg   [2:0] i_4_reg_1892;
reg   [3:0] weights_HO_addr_reg_1897;
wire   [0:0] ap_CS_fsm_state6;
wire   [1:0] j_3_fu_833_p2;
reg   [1:0] j_3_reg_1905;
wire   [5:0] k_1_fu_850_p2;
reg   [5:0] k_1_reg_1913;
wire   [0:0] ap_CS_fsm_state9;
wire   [0:0] exitcond4_fu_844_p2;
wire   [31:0] i_2_cast_fu_856_p1;
reg   [31:0] i_2_cast_reg_1918;
wire   [0:0] ap_CS_fsm_state10;
wire   [3:0] i_5_fu_866_p2;
reg   [3:0] i_5_reg_1926;
wire   [0:0] ap_CS_fsm_state12;
wire   [3:0] j_6_fu_915_p2;
reg   [3:0] j_6_reg_1939;
wire   [0:0] exitcond9_fu_909_p2;
wire   [0:0] tmp_2_fu_921_p2;
reg   [0:0] tmp_2_reg_1949;
wire   [0:0] icmp_fu_937_p2;
reg   [0:0] icmp_reg_1953;
reg   [15:0] tmp_4_reg_1957;
wire   [0:0] ap_CS_fsm_state14;
wire   [15:0] tmp_5_fu_960_p2;
wire   [0:0] ap_CS_fsm_state15;
wire   [0:0] ap_CS_fsm_state18;
wire   [0:0] ap_CS_fsm_state20;
wire   [3:0] j_6_1_fu_1029_p2;
reg   [3:0] j_6_1_reg_1980;
wire   [0:0] exitcond9_1_fu_1023_p2;
wire   [0:0] tmp_2_1_fu_1035_p2;
reg   [0:0] tmp_2_1_reg_1990;
wire   [0:0] icmp1_fu_1051_p2;
reg   [0:0] icmp1_reg_1994;
reg   [15:0] tmp_4_1_reg_1998;
wire   [0:0] ap_CS_fsm_state22;
wire   [15:0] tmp_5_1_fu_1074_p2;
wire   [0:0] ap_CS_fsm_state23;
wire   [0:0] ap_CS_fsm_state26;
wire   [0:0] ap_CS_fsm_state28;
wire   [3:0] j_6_2_fu_1143_p2;
reg   [3:0] j_6_2_reg_2021;
wire   [0:0] exitcond9_2_fu_1137_p2;
wire   [0:0] tmp_2_2_fu_1149_p2;
reg   [0:0] tmp_2_2_reg_2031;
wire   [0:0] icmp2_fu_1165_p2;
reg   [0:0] icmp2_reg_2035;
reg   [15:0] tmp_4_2_reg_2039;
wire   [0:0] ap_CS_fsm_state30;
wire   [15:0] tmp_5_2_fu_1188_p2;
wire   [0:0] ap_CS_fsm_state31;
wire   [0:0] ap_CS_fsm_state34;
wire   [0:0] ap_CS_fsm_state36;
wire   [3:0] j_6_3_fu_1257_p2;
reg   [3:0] j_6_3_reg_2062;
wire   [0:0] exitcond9_3_fu_1251_p2;
wire   [0:0] tmp_2_3_fu_1263_p2;
reg   [0:0] tmp_2_3_reg_2072;
wire   [0:0] icmp3_fu_1279_p2;
reg   [0:0] icmp3_reg_2076;
reg   [15:0] tmp_4_3_reg_2080;
wire   [0:0] ap_CS_fsm_state38;
wire   [15:0] tmp_5_3_fu_1302_p2;
wire   [0:0] ap_CS_fsm_state39;
wire   [0:0] ap_CS_fsm_state42;
wire   [0:0] ap_CS_fsm_state44;
wire   [3:0] j_6_4_fu_1371_p2;
reg   [3:0] j_6_4_reg_2103;
wire   [0:0] exitcond9_4_fu_1365_p2;
wire   [0:0] tmp_2_4_fu_1377_p2;
reg   [0:0] tmp_2_4_reg_2113;
wire   [0:0] icmp4_fu_1393_p2;
reg   [0:0] icmp4_reg_2117;
reg   [15:0] tmp_4_4_reg_2121;
wire   [0:0] ap_CS_fsm_state46;
wire   [15:0] tmp_5_4_fu_1416_p2;
wire   [0:0] ap_CS_fsm_state47;
wire   [0:0] ap_CS_fsm_state50;
wire   [0:0] ap_CS_fsm_state52;
wire   [2:0] j_7_fu_1475_p2;
reg   [2:0] j_7_reg_2144;
wire   [0:0] exitcond_fu_1469_p2;
wire   [0:0] tmp_17_fu_1481_p2;
reg   [0:0] tmp_17_reg_2154;
wire   [0:0] icmp5_fu_1497_p2;
reg   [0:0] icmp5_reg_2158;
reg   [15:0] tmp_21_reg_2162;
wire   [0:0] ap_CS_fsm_state54;
wire   [15:0] tmp_22_fu_1520_p2;
wire   [0:0] ap_CS_fsm_state55;
wire   [12:0] tmp_24_fu_1529_p2;
reg   [12:0] tmp_24_reg_2172;
wire   [0:0] ap_CS_fsm_state58;
wire   [0:0] ap_CS_fsm_state60;
wire   [2:0] j_7_1_fu_1585_p2;
reg   [2:0] j_7_1_reg_2190;
wire   [0:0] exitcond_1_fu_1579_p2;
wire   [0:0] tmp_8_1_fu_1591_p2;
reg   [0:0] tmp_8_1_reg_2200;
wire   [0:0] icmp6_fu_1607_p2;
reg   [0:0] icmp6_reg_2204;
reg   [15:0] tmp_10_1_reg_2208;
wire   [0:0] ap_CS_fsm_state62;
wire   [15:0] tmp_11_1_fu_1630_p2;
wire   [0:0] ap_CS_fsm_state63;
wire   [12:0] tmp_17_1_fu_1639_p2;
reg   [12:0] tmp_17_1_reg_2218;
wire   [0:0] ap_CS_fsm_state66;
wire   [0:0] grp_fu_712_p2;
reg   [0:0] tmp_18_1_reg_2228;
wire   [0:0] ap_CS_fsm_state67;
wire   [0:0] ap_CS_fsm_state69;
wire   [2:0] j_7_2_fu_1706_p2;
reg   [2:0] j_7_2_reg_2246;
wire   [0:0] exitcond_2_fu_1700_p2;
wire   [0:0] tmp_8_2_fu_1712_p2;
reg   [0:0] tmp_8_2_reg_2256;
wire   [0:0] icmp7_fu_1728_p2;
reg   [0:0] icmp7_reg_2260;
reg   [15:0] tmp_10_2_reg_2264;
wire   [0:0] ap_CS_fsm_state71;
wire   [15:0] tmp_11_2_fu_1751_p2;
wire   [0:0] ap_CS_fsm_state72;
wire   [0:0] ap_CS_fsm_state75;
wire   [31:0] tmp_data_1_fu_1797_p1;
reg   [3:0] i_reg_430;
wire   [0:0] ap_CS_fsm_state1;
wire   [0:0] exitcond3_fu_766_p2;
reg   [2:0] j_reg_441;
wire   [0:0] exitcond1_fu_740_p2;
reg   [2:0] i_1_reg_452;
wire   [0:0] exitcond5_fu_827_p2;
reg   [1:0] j_1_reg_463;
reg   [5:0] k_reg_474;
reg   [3:0] i_2_reg_485;
reg   [15:0] values_hidden_layer_2_reg_496;
wire   [0:0] exitcond6_fu_860_p2;
reg   [3:0] j_s_reg_509;
reg   [15:0] values_hidden_layer_5_reg_520;
wire   [0:0] ap_CS_fsm_state19;
reg   [3:0] j_2_1_reg_533;
reg   [15:0] values_hidden_layer_8_reg_544;
wire   [0:0] ap_CS_fsm_state27;
reg   [3:0] j_2_2_reg_557;
reg   [15:0] values_hidden_layer_7_reg_568;
wire   [0:0] ap_CS_fsm_state35;
reg   [3:0] j_2_3_reg_581;
reg   [15:0] values_hidden_layer_1_reg_592;
wire   [0:0] ap_CS_fsm_state43;
reg   [3:0] j_2_4_reg_605;
reg   [15:0] values_output_layer_2_reg_616;
wire   [0:0] ap_CS_fsm_state51;
reg   [2:0] j_4_reg_629;
reg   [15:0] values_output_layer_5_reg_640;
reg   [2:0] j_3_1_reg_653;
reg   [15:0] values_output_layer_8_reg_664;
reg   [2:0] j_3_2_reg_677;
wire   [31:0] tmp_29_cast_fu_761_p1;
wire  signed [31:0] tmp_30_cast_fu_822_p1;
wire   [31:0] tmp_32_cast_fu_904_p1;
wire   [31:0] j_cast_fu_877_p1;
wire  signed [31:0] tmp_14_cast_fu_975_p1;
wire   [31:0] tmp_35_cast_fu_1018_p1;
wire   [31:0] j_2_1_cast9_fu_985_p1;
wire  signed [31:0] tmp_14_1_cast_fu_1089_p1;
wire   [31:0] tmp_38_cast_fu_1132_p1;
wire   [31:0] j_2_2_cast8_fu_1099_p1;
wire  signed [31:0] tmp_14_2_cast_fu_1203_p1;
wire   [31:0] tmp_41_cast_fu_1246_p1;
wire   [31:0] j_2_3_cast7_fu_1213_p1;
wire  signed [31:0] tmp_14_3_cast_fu_1317_p1;
wire   [31:0] tmp_44_cast_fu_1360_p1;
wire   [31:0] j_2_4_cast6_fu_1327_p1;
wire  signed [31:0] tmp_14_4_cast_fu_1431_p1;
wire  signed [31:0] tmp_46_cast_fu_1464_p1;
wire   [31:0] j_4_cast4_fu_1441_p1;
wire  signed [31:0] tmp_26_cast_fu_1535_p1;
wire  signed [31:0] tmp_49_cast_fu_1574_p1;
wire   [31:0] j_3_1_cast2_fu_1545_p1;
wire  signed [31:0] tmp_17_1_cast_fu_1645_p1;
wire  signed [31:0] highest_pred_2_highe_1_fu_1661_p1;
wire  signed [31:0] tmp_52_cast_fu_1695_p1;
wire   [31:0] j_3_2_cast1_fu_1666_p1;
wire  signed [31:0] tmp_17_2_cast_fu_1766_p1;
wire   [0:0] ap_CS_fsm_state16;
wire   [0:0] ap_CS_fsm_state17;
wire   [15:0] tmp_14_fu_980_p1;
wire   [0:0] ap_CS_fsm_state24;
wire   [0:0] ap_CS_fsm_state25;
wire   [15:0] tmp_15_1_fu_1094_p1;
wire   [0:0] ap_CS_fsm_state32;
wire   [0:0] ap_CS_fsm_state33;
wire   [15:0] tmp_15_2_fu_1208_p1;
wire   [0:0] ap_CS_fsm_state40;
wire   [0:0] ap_CS_fsm_state41;
wire   [15:0] tmp_15_3_fu_1322_p1;
wire   [0:0] ap_CS_fsm_state48;
wire   [0:0] ap_CS_fsm_state49;
wire   [15:0] tmp_15_4_fu_1436_p1;
wire   [0:0] ap_CS_fsm_state56;
wire   [0:0] ap_CS_fsm_state57;
wire   [15:0] highest_pred_2_fu_1540_p1;
wire   [0:0] ap_CS_fsm_state64;
wire   [0:0] ap_CS_fsm_state65;
wire   [15:0] highest_pred_2_1_fu_1650_p1;
wire   [0:0] ap_CS_fsm_state73;
wire   [0:0] ap_CS_fsm_state74;
wire   [15:0] highest_pred_2_2_fu_1771_p1;
wire   [5:0] tmp_s_fu_722_p3;
wire   [6:0] i_cast_cast_fu_718_p1;
wire   [6:0] p_shl_cast_fu_730_p1;
wire   [6:0] j_cast_cast_fu_752_p1;
wire   [6:0] tmp_23_fu_756_p2;
wire   [4:0] tmp_3_fu_787_p3;
wire   [4:0] i_1_cast_cast_fu_783_p1;
wire   [4:0] j_1_cast_cast_fu_813_p1;
wire   [4:0] tmp_26_fu_817_p2;
wire   [5:0] tmp_29_fu_886_p3;
wire   [6:0] j_cast_cast_26_fu_882_p1;
wire   [6:0] p_shl2_cast_fu_894_p1;
wire   [6:0] tmp_30_fu_898_p2;
wire   [5:0] tmp_31_fu_927_p4;
wire  signed [23:0] tmp_2_i_fu_1802_p2;
wire   [12:0] tmp_32_fu_965_p1;
wire   [12:0] tmp_13_fu_969_p2;
wire   [5:0] tmp_33_fu_994_p3;
wire   [6:0] j_2_1_cast9_cast_fu_990_p1;
wire   [6:0] p_shl3_cast_fu_1002_p1;
wire   [6:0] tmp_34_fu_1006_p2;
wire   [6:0] tmp_35_fu_1012_p2;
wire   [5:0] tmp_53_fu_1041_p4;
wire  signed [23:0] tmp_2_i1_fu_1809_p2;
wire   [12:0] tmp_54_fu_1079_p1;
wire   [12:0] tmp_14_1_fu_1083_p2;
wire   [5:0] tmp_36_fu_1108_p3;
wire   [6:0] j_2_2_cast8_cast_fu_1104_p1;
wire   [6:0] p_shl4_cast_fu_1116_p1;
wire   [6:0] tmp_37_fu_1120_p2;
wire   [6:0] tmp_38_fu_1126_p2;
wire   [5:0] tmp_55_fu_1155_p4;
wire  signed [23:0] tmp_2_i2_fu_1816_p2;
wire   [12:0] tmp_56_fu_1193_p1;
wire   [12:0] tmp_14_2_fu_1197_p2;
wire   [5:0] tmp_39_fu_1222_p3;
wire   [6:0] j_2_3_cast7_cast_fu_1218_p1;
wire   [6:0] p_shl5_cast_fu_1230_p1;
wire   [6:0] tmp_40_fu_1234_p2;
wire   [6:0] tmp_41_fu_1240_p2;
wire   [5:0] tmp_57_fu_1269_p4;
wire  signed [23:0] tmp_2_i3_fu_1823_p2;
wire   [12:0] tmp_58_fu_1307_p1;
wire   [12:0] tmp_14_3_fu_1311_p2;
wire   [5:0] tmp_42_fu_1336_p3;
wire   [6:0] j_2_4_cast6_cast_fu_1332_p1;
wire   [6:0] p_shl6_cast_fu_1344_p1;
wire   [6:0] tmp_43_fu_1348_p2;
wire   [6:0] tmp_44_fu_1354_p2;
wire   [5:0] tmp_59_fu_1383_p4;
wire  signed [23:0] tmp_2_i4_fu_1830_p2;
wire   [12:0] tmp_60_fu_1421_p1;
wire   [12:0] tmp_14_4_fu_1425_p2;
wire   [4:0] tmp_45_fu_1450_p3;
wire   [4:0] j_4_cast4_cast_fu_1446_p1;
wire   [4:0] tmp_46_fu_1458_p2;
wire   [5:0] tmp_61_fu_1487_p4;
wire  signed [23:0] tmp_2_i5_fu_1837_p2;
wire   [12:0] tmp_62_fu_1525_p1;
wire   [4:0] tmp_47_fu_1554_p3;
wire   [4:0] j_3_1_cast2_cast_fu_1550_p1;
wire   [4:0] tmp_48_fu_1562_p2;
wire   [4:0] tmp_49_fu_1568_p2;
wire   [5:0] tmp_63_fu_1597_p4;
wire  signed [23:0] tmp_2_i6_fu_1844_p2;
wire   [12:0] tmp_64_fu_1635_p1;
wire   [12:0] highest_pred_2_highe_fu_1655_p3;
wire   [4:0] tmp_50_fu_1675_p3;
wire   [4:0] j_3_2_cast1_cast_fu_1671_p1;
wire   [4:0] tmp_51_fu_1683_p2;
wire   [4:0] tmp_52_fu_1689_p2;
wire   [5:0] tmp_65_fu_1718_p4;
wire  signed [23:0] tmp_2_i7_fu_1851_p2;
wire   [12:0] tmp_66_fu_1756_p1;
wire   [12:0] tmp_17_2_fu_1760_p2;
wire   [0:0] tmp_20_fu_1784_p2;
wire   [1:0] prediction_write_out_fu_1776_p3;
wire   [1:0] tmp_data_fu_1789_p3;
reg   [76:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 S_AXIS_V_data_0_sel_rd = 1'b0;
#0 S_AXIS_V_data_0_sel_wr = 1'b0;
#0 S_AXIS_V_data_0_state = 2'b00;
#0 S_AXIS_V_last_0_state = 2'b00;
#0 M_AXIS_V_data_1_sel_rd = 1'b0;
#0 M_AXIS_V_data_1_sel_wr = 1'b0;
#0 M_AXIS_V_data_1_state = 2'b00;
#0 M_AXIS_V_last_1_sel_rd = 1'b0;
#0 M_AXIS_V_last_1_state = 2'b00;
#0 ap_CS_fsm = 77'b1;
end

AXISEnhanced_weigbkb #(
    .DataWidth( 16 ),
    .AddressRange( 65 ),
    .AddressWidth( 7 ))
weights_IH_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weights_IH_address0),
    .ce0(weights_IH_ce0),
    .we0(weights_IH_we0),
    .d0(weights_IH_d0),
    .q0(weights_IH_q0)
);

AXISEnhanced_weigcud #(
    .DataWidth( 16 ),
    .AddressRange( 15 ),
    .AddressWidth( 4 ))
weights_HO_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weights_HO_address0),
    .ce0(weights_HO_ce0),
    .we0(weights_HO_we0),
    .d0(weights_HO_d0),
    .q0(weights_HO_q0)
);

AXISEnhanced_testdEe #(
    .DataWidth( 16 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
test_data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(test_data_address0),
    .ce0(test_data_ce0),
    .we0(test_data_we0),
    .d0(test_data_d0),
    .q0(test_data_q0)
);

AXISEnhanced_sigmeOg #(
    .DataWidth( 8 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
sigmoid_arr_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sigmoid_arr_address0),
    .ce0(sigmoid_arr_ce0),
    .q0(sigmoid_arr_q0)
);

AXISEnhanced_valufYi #(
    .DataWidth( 16 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
values_hidden_layer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(values_hidden_layer_address0),
    .ce0(values_hidden_layer_ce0),
    .we0(values_hidden_layer_we0),
    .d0(values_hidden_layer_d0),
    .q0(values_hidden_layer_q0)
);

AXISEnhanced_valug8j #(
    .DataWidth( 16 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
values_output_layer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(values_output_layer_address0),
    .ce0(values_output_layer_ce0),
    .we0(values_output_layer_we0),
    .d0(values_output_layer_d0),
    .q0(values_output_layer_q0)
);

AXISEnhanced_mul_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
AXISEnhanced_mul_hbi_U0(
    .din0(reg_692),
    .din1(reg_696),
    .dout(tmp_2_i_fu_1802_p2)
);

AXISEnhanced_mul_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
AXISEnhanced_mul_hbi_U1(
    .din0(reg_692),
    .din1(reg_696),
    .dout(tmp_2_i1_fu_1809_p2)
);

AXISEnhanced_mul_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
AXISEnhanced_mul_hbi_U2(
    .din0(reg_692),
    .din1(reg_696),
    .dout(tmp_2_i2_fu_1816_p2)
);

AXISEnhanced_mul_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
AXISEnhanced_mul_hbi_U3(
    .din0(reg_692),
    .din1(reg_696),
    .dout(tmp_2_i3_fu_1823_p2)
);

AXISEnhanced_mul_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
AXISEnhanced_mul_hbi_U4(
    .din0(reg_692),
    .din1(reg_696),
    .dout(tmp_2_i4_fu_1830_p2)
);

AXISEnhanced_mul_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
AXISEnhanced_mul_hbi_U5(
    .din0(reg_700),
    .din1(reg_704),
    .dout(tmp_2_i5_fu_1837_p2)
);

AXISEnhanced_mul_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
AXISEnhanced_mul_hbi_U6(
    .din0(reg_700),
    .din1(reg_704),
    .dout(tmp_2_i6_fu_1844_p2)
);

AXISEnhanced_mul_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
AXISEnhanced_mul_hbi_U7(
    .din0(reg_700),
    .din1(reg_704),
    .dout(tmp_2_i7_fu_1851_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_data_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_data_1_ack_out) & (1'b1 == M_AXIS_V_data_1_vld_out))) begin
            M_AXIS_V_data_1_sel_rd <= ~M_AXIS_V_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_data_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_data_1_vld_in) & (1'b1 == M_AXIS_V_data_1_ack_in))) begin
            M_AXIS_V_data_1_sel_wr <= ~M_AXIS_V_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_data_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == M_AXIS_V_data_1_vld_in) & (1'b1 == M_AXIS_V_data_1_ack_out) & (ap_const_lv2_3 == M_AXIS_V_data_1_state)) | ((1'b0 == M_AXIS_V_data_1_vld_in) & (ap_const_lv2_2 == M_AXIS_V_data_1_state)))) begin
            M_AXIS_V_data_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == M_AXIS_V_data_1_vld_in) & (1'b0 == M_AXIS_V_data_1_ack_out) & (ap_const_lv2_3 == M_AXIS_V_data_1_state)) | ((1'b0 == M_AXIS_V_data_1_ack_out) & (ap_const_lv2_1 == M_AXIS_V_data_1_state)))) begin
            M_AXIS_V_data_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == M_AXIS_V_data_1_vld_in) & (ap_const_lv2_2 == M_AXIS_V_data_1_state)) | ((1'b1 == M_AXIS_V_data_1_ack_out) & (ap_const_lv2_1 == M_AXIS_V_data_1_state)) | ((ap_const_lv2_3 == M_AXIS_V_data_1_state) & ~((1'b1 == M_AXIS_V_data_1_vld_in) & (1'b0 == M_AXIS_V_data_1_ack_out)) & ~((1'b0 == M_AXIS_V_data_1_vld_in) & (1'b1 == M_AXIS_V_data_1_ack_out))))) begin
            M_AXIS_V_data_1_state <= ap_const_lv2_3;
        end else begin
            M_AXIS_V_data_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_last_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_last_1_ack_out) & (1'b1 == M_AXIS_V_last_1_vld_out))) begin
            M_AXIS_V_last_1_sel_rd <= ~M_AXIS_V_last_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_last_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == M_AXIS_V_last_1_vld_in) & (1'b1 == M_AXIS_V_last_1_ack_out) & (ap_const_lv2_3 == M_AXIS_V_last_1_state)) | ((1'b0 == M_AXIS_V_last_1_vld_in) & (ap_const_lv2_2 == M_AXIS_V_last_1_state)))) begin
            M_AXIS_V_last_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == M_AXIS_V_last_1_vld_in) & (1'b0 == M_AXIS_V_last_1_ack_out) & (ap_const_lv2_3 == M_AXIS_V_last_1_state)) | ((1'b0 == M_AXIS_V_last_1_ack_out) & (ap_const_lv2_1 == M_AXIS_V_last_1_state)))) begin
            M_AXIS_V_last_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == M_AXIS_V_last_1_vld_in) & (ap_const_lv2_2 == M_AXIS_V_last_1_state)) | ((1'b1 == M_AXIS_V_last_1_ack_out) & (ap_const_lv2_1 == M_AXIS_V_last_1_state)) | ((ap_const_lv2_3 == M_AXIS_V_last_1_state) & ~((1'b1 == M_AXIS_V_last_1_vld_in) & (1'b0 == M_AXIS_V_last_1_ack_out)) & ~((1'b0 == M_AXIS_V_last_1_vld_in) & (1'b1 == M_AXIS_V_last_1_ack_out))))) begin
            M_AXIS_V_last_1_state <= ap_const_lv2_3;
        end else begin
            M_AXIS_V_last_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_data_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == S_AXIS_V_data_0_ack_out) & (1'b1 == S_AXIS_V_data_0_vld_out))) begin
            S_AXIS_V_data_0_sel_rd <= ~S_AXIS_V_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_data_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == S_AXIS_V_data_0_vld_in) & (1'b1 == S_AXIS_V_data_0_ack_in))) begin
            S_AXIS_V_data_0_sel_wr <= ~S_AXIS_V_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_data_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == S_AXIS_V_data_0_vld_in) & (1'b1 == S_AXIS_V_data_0_ack_out) & (S_AXIS_V_data_0_state == ap_const_lv2_3)) | ((1'b0 == S_AXIS_V_data_0_vld_in) & (S_AXIS_V_data_0_state == ap_const_lv2_2)))) begin
            S_AXIS_V_data_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == S_AXIS_V_data_0_vld_in) & (1'b0 == S_AXIS_V_data_0_ack_out) & (S_AXIS_V_data_0_state == ap_const_lv2_3)) | ((1'b0 == S_AXIS_V_data_0_ack_out) & (S_AXIS_V_data_0_state == ap_const_lv2_1)))) begin
            S_AXIS_V_data_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == S_AXIS_V_data_0_vld_in) & (S_AXIS_V_data_0_state == ap_const_lv2_2)) | ((1'b1 == S_AXIS_V_data_0_ack_out) & (S_AXIS_V_data_0_state == ap_const_lv2_1)) | ((S_AXIS_V_data_0_state == ap_const_lv2_3) & ~((1'b1 == S_AXIS_V_data_0_vld_in) & (1'b0 == S_AXIS_V_data_0_ack_out)) & ~((1'b0 == S_AXIS_V_data_0_vld_in) & (1'b1 == S_AXIS_V_data_0_ack_out))))) begin
            S_AXIS_V_data_0_state <= ap_const_lv2_3;
        end else begin
            S_AXIS_V_data_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_last_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == S_AXIS_V_last_0_vld_in) & (1'b1 == S_AXIS_V_last_0_ack_out) & (ap_const_lv2_3 == S_AXIS_V_last_0_state)) | ((1'b0 == S_AXIS_V_last_0_vld_in) & (ap_const_lv2_2 == S_AXIS_V_last_0_state)))) begin
            S_AXIS_V_last_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == S_AXIS_V_last_0_vld_in) & (1'b0 == S_AXIS_V_last_0_ack_out) & (ap_const_lv2_3 == S_AXIS_V_last_0_state)) | ((1'b0 == S_AXIS_V_last_0_ack_out) & (ap_const_lv2_1 == S_AXIS_V_last_0_state)))) begin
            S_AXIS_V_last_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == S_AXIS_V_last_0_vld_in) & (ap_const_lv2_2 == S_AXIS_V_last_0_state)) | ((1'b1 == S_AXIS_V_last_0_ack_out) & (ap_const_lv2_1 == S_AXIS_V_last_0_state)) | ((ap_const_lv2_3 == S_AXIS_V_last_0_state) & ~((1'b1 == S_AXIS_V_last_0_vld_in) & (1'b0 == S_AXIS_V_last_0_ack_out)) & ~((1'b0 == S_AXIS_V_last_0_vld_in) & (1'b1 == S_AXIS_V_last_0_ack_out))))) begin
            S_AXIS_V_last_0_state <= ap_const_lv2_3;
        end else begin
            S_AXIS_V_last_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == exitcond1_fu_740_p2))) begin
        i_1_reg_452 <= ap_const_lv3_0;
    end else if (((1'b1 == ap_CS_fsm_state6) & ~(1'b0 == exitcond5_fu_827_p2))) begin
        i_1_reg_452 <= i_4_reg_1892;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & ~(S_AXIS_V_data_0_vld_out == 1'b0))) begin
        i_2_reg_485 <= i_5_reg_1926;
    end else if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == exitcond4_fu_844_p2) & ~((M_AXIS_V_data_1_ack_in == 1'b0) | (M_AXIS_V_last_1_ack_in == 1'b0)))) begin
        i_2_reg_485 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == exitcond3_fu_766_p2))) begin
        i_reg_430 <= i_3_reg_1866;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i_reg_430 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & ~(S_AXIS_V_data_0_vld_out == 1'b0))) begin
        j_1_reg_463 <= j_3_reg_1905;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == exitcond2_fu_801_p2) & ~(~(1'b0 == exitcond2_fu_801_p2) & (1'b0 == M_AXIS_V_data_1_ack_in)))) begin
        j_1_reg_463 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        j_2_1_reg_533 <= j_6_1_reg_1980;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        j_2_1_reg_533 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        j_2_2_reg_557 <= j_6_2_reg_2021;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        j_2_2_reg_557 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        j_2_3_reg_581 <= j_6_3_reg_2062;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        j_2_3_reg_581 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        j_2_4_reg_605 <= j_6_4_reg_2103;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        j_2_4_reg_605 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        j_3_1_reg_653 <= j_7_1_reg_2190;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        j_3_1_reg_653 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        j_3_2_reg_677 <= j_7_2_reg_2246;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        j_3_2_reg_677 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        j_4_reg_629 <= j_7_reg_2144;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        j_4_reg_629 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(S_AXIS_V_data_0_vld_out == 1'b0))) begin
        j_reg_441 <= j_2_reg_1879;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == exitcond1_fu_740_p2))) begin
        j_reg_441 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        j_s_reg_509 <= j_6_reg_1939;
    end else if (((1'b1 == ap_CS_fsm_state10) & ~(1'b0 == exitcond6_fu_860_p2))) begin
        j_s_reg_509 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if (~(1'b0 == M_AXIS_V_data_1_ack_in)) begin
        if ((1'b1 == ap_CS_fsm_state77)) begin
            k_reg_474 <= k_1_reg_1913;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            k_reg_474 <= ap_const_lv6_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        values_hidden_layer_1_reg_592 <= tmp_5_4_fu_1416_p2;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        values_hidden_layer_1_reg_592 <= ap_const_lv16_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        values_hidden_layer_2_reg_496 <= tmp_5_fu_960_p2;
    end else if (((1'b1 == ap_CS_fsm_state10) & ~(1'b0 == exitcond6_fu_860_p2))) begin
        values_hidden_layer_2_reg_496 <= ap_const_lv16_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        values_hidden_layer_5_reg_520 <= tmp_5_1_fu_1074_p2;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        values_hidden_layer_5_reg_520 <= ap_const_lv16_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        values_hidden_layer_7_reg_568 <= tmp_5_3_fu_1302_p2;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        values_hidden_layer_7_reg_568 <= ap_const_lv16_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        values_hidden_layer_8_reg_544 <= tmp_5_2_fu_1188_p2;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        values_hidden_layer_8_reg_544 <= ap_const_lv16_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        values_output_layer_2_reg_616 <= tmp_22_fu_1520_p2;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        values_output_layer_2_reg_616 <= ap_const_lv16_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        values_output_layer_5_reg_640 <= tmp_11_1_fu_1630_p2;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        values_output_layer_5_reg_640 <= ap_const_lv16_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        values_output_layer_8_reg_664 <= tmp_11_2_fu_1751_p2;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        values_output_layer_8_reg_664 <= ap_const_lv16_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_V_data_1_load_A)) begin
        M_AXIS_V_data_1_payload_A <= M_AXIS_V_data_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_V_data_1_load_B)) begin
        M_AXIS_V_data_1_payload_B <= M_AXIS_V_data_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == S_AXIS_V_data_0_load_A)) begin
        S_AXIS_V_data_0_payload_A <= S_AXIS_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == S_AXIS_V_data_0_load_B)) begin
        S_AXIS_V_data_0_payload_B <= S_AXIS_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_2_cast_reg_1918[3 : 0] <= i_2_cast_fu_856_p1[3 : 0];
        i_5_reg_1926 <= i_5_fu_866_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_3_reg_1866 <= i_3_fu_746_p2;
        tmp_1_reg_1858 <= tmp_1_fu_734_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & ~(~(1'b0 == exitcond2_fu_801_p2) & (1'b0 == M_AXIS_V_data_1_ack_in)))) begin
        i_4_reg_1892 <= i_4_fu_807_p2;
        tmp_6_reg_1884 <= tmp_6_fu_795_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & ~(1'b0 == exitcond9_1_fu_1023_p2) & (1'b0 == tmp_2_1_fu_1035_p2))) begin
        icmp1_reg_1994 <= icmp1_fu_1051_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & ~(1'b0 == exitcond9_2_fu_1137_p2) & (1'b0 == tmp_2_2_fu_1149_p2))) begin
        icmp2_reg_2035 <= icmp2_fu_1165_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) & ~(1'b0 == exitcond9_3_fu_1251_p2) & (1'b0 == tmp_2_3_fu_1263_p2))) begin
        icmp3_reg_2076 <= icmp3_fu_1279_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) & ~(1'b0 == exitcond9_4_fu_1365_p2) & (1'b0 == tmp_2_4_fu_1377_p2))) begin
        icmp4_reg_2117 <= icmp4_fu_1393_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state52) & ~(1'b0 == exitcond_fu_1469_p2) & (1'b0 == tmp_17_fu_1481_p2))) begin
        icmp5_reg_2158 <= icmp5_fu_1497_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state60) & ~(1'b0 == exitcond_1_fu_1579_p2) & (1'b0 == tmp_8_1_fu_1591_p2))) begin
        icmp6_reg_2204 <= icmp6_fu_1607_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state69) & ~(1'b0 == exitcond_2_fu_1700_p2) & (1'b0 == tmp_8_2_fu_1712_p2))) begin
        icmp7_reg_2260 <= icmp7_fu_1728_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & ~(1'b0 == exitcond9_fu_909_p2) & (1'b0 == tmp_2_fu_921_p2))) begin
        icmp_reg_1953 <= icmp_fu_937_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_2_reg_1879 <= j_2_fu_772_p2;
        weights_IH_addr_reg_1871 <= tmp_29_cast_fu_761_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_3_reg_1905 <= j_3_fu_833_p2;
        weights_HO_addr_reg_1897 <= tmp_30_cast_fu_822_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        j_6_1_reg_1980 <= j_6_1_fu_1029_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        j_6_2_reg_2021 <= j_6_2_fu_1143_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        j_6_3_reg_2062 <= j_6_3_fu_1257_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        j_6_4_reg_2103 <= j_6_4_fu_1371_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        j_6_reg_1939 <= j_6_fu_915_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        j_7_1_reg_2190 <= j_7_1_fu_1585_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        j_7_2_reg_2246 <= j_7_2_fu_1706_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        j_7_reg_2144 <= j_7_fu_1475_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~((M_AXIS_V_data_1_ack_in == 1'b0) | (M_AXIS_V_last_1_ack_in == 1'b0)))) begin
        k_1_reg_1913 <= k_1_fu_850_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state45))) begin
        reg_692 <= test_data_q0;
        reg_696 <= weights_IH_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state70))) begin
        reg_700 <= values_hidden_layer_q0;
        reg_704 <= weights_HO_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state68))) begin
        reg_708 <= sigmoid_arr_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        tmp_10_1_reg_2208 <= {{tmp_2_i6_fu_1844_p2[ap_const_lv32_17 : ap_const_lv32_8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        tmp_10_2_reg_2264 <= {{tmp_2_i7_fu_1851_p2[ap_const_lv32_17 : ap_const_lv32_8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        tmp_17_1_reg_2218 <= tmp_17_1_fu_1639_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state52) & ~(1'b0 == exitcond_fu_1469_p2))) begin
        tmp_17_reg_2154 <= tmp_17_fu_1481_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        tmp_18_1_reg_2228 <= grp_fu_712_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        tmp_21_reg_2162 <= {{tmp_2_i5_fu_1837_p2[ap_const_lv32_17 : ap_const_lv32_8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        tmp_24_reg_2172 <= tmp_24_fu_1529_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & ~(1'b0 == exitcond9_1_fu_1023_p2))) begin
        tmp_2_1_reg_1990 <= tmp_2_1_fu_1035_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & ~(1'b0 == exitcond9_2_fu_1137_p2))) begin
        tmp_2_2_reg_2031 <= tmp_2_2_fu_1149_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) & ~(1'b0 == exitcond9_3_fu_1251_p2))) begin
        tmp_2_3_reg_2072 <= tmp_2_3_fu_1263_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) & ~(1'b0 == exitcond9_4_fu_1365_p2))) begin
        tmp_2_4_reg_2113 <= tmp_2_4_fu_1377_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & ~(1'b0 == exitcond9_fu_909_p2))) begin
        tmp_2_reg_1949 <= tmp_2_fu_921_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_4_1_reg_1998 <= {{tmp_2_i1_fu_1809_p2[ap_const_lv32_17 : ap_const_lv32_8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        tmp_4_2_reg_2039 <= {{tmp_2_i2_fu_1816_p2[ap_const_lv32_17 : ap_const_lv32_8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        tmp_4_3_reg_2080 <= {{tmp_2_i3_fu_1823_p2[ap_const_lv32_17 : ap_const_lv32_8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        tmp_4_4_reg_2121 <= {{tmp_2_i4_fu_1830_p2[ap_const_lv32_17 : ap_const_lv32_8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_4_reg_1957 <= {{tmp_2_i_fu_1802_p2[ap_const_lv32_17 : ap_const_lv32_8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state60) & ~(1'b0 == exitcond_1_fu_1579_p2))) begin
        tmp_8_1_reg_2200 <= tmp_8_1_fu_1591_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state69) & ~(1'b0 == exitcond_2_fu_1700_p2))) begin
        tmp_8_2_reg_2256 <= tmp_8_2_fu_1712_p2;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == exitcond2_fu_801_p2)) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state77))) begin
        M_AXIS_TDATA_blk_n = M_AXIS_V_data_1_state[1'b1];
    end else begin
        M_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        M_AXIS_V_data_1_data_in = tmp_data_1_fu_1797_p1;
    end else if (((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == exitcond2_fu_801_p2))) begin
        M_AXIS_V_data_1_data_in = ap_const_lv32_3039;
    end else begin
        M_AXIS_V_data_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == M_AXIS_V_data_1_sel)) begin
        M_AXIS_V_data_1_data_out = M_AXIS_V_data_1_payload_B;
    end else begin
        M_AXIS_V_data_1_data_out = M_AXIS_V_data_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state76) & ~(1'b0 == M_AXIS_V_data_1_ack_in)) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == exitcond2_fu_801_p2) & ~(~(1'b0 == exitcond2_fu_801_p2) & (1'b0 == M_AXIS_V_data_1_ack_in))))) begin
        M_AXIS_V_data_1_vld_in = 1'b1;
    end else begin
        M_AXIS_V_data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state76) & ~(1'b0 == M_AXIS_V_data_1_ack_in)) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == exitcond2_fu_801_p2) & ~(~(1'b0 == exitcond2_fu_801_p2) & (1'b0 == M_AXIS_V_data_1_ack_in))))) begin
        M_AXIS_V_last_1_vld_in = 1'b1;
    end else begin
        M_AXIS_V_last_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state11))) begin
        S_AXIS_TDATA_blk_n = S_AXIS_V_data_0_state[1'b0];
    end else begin
        S_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & ~(S_AXIS_V_data_0_vld_out == 1'b0)) | ((1'b1 == ap_CS_fsm_state7) & ~(S_AXIS_V_data_0_vld_out == 1'b0)) | ((1'b1 == ap_CS_fsm_state11) & ~(S_AXIS_V_data_0_vld_out == 1'b0)))) begin
        S_AXIS_V_data_0_ack_out = 1'b1;
    end else begin
        S_AXIS_V_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == S_AXIS_V_data_0_sel)) begin
        S_AXIS_V_data_0_data_out = S_AXIS_V_data_0_payload_B;
    end else begin
        S_AXIS_V_data_0_data_out = S_AXIS_V_data_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & ~(S_AXIS_V_data_0_vld_out == 1'b0)) | ((1'b1 == ap_CS_fsm_state7) & ~(S_AXIS_V_data_0_vld_out == 1'b0)) | ((1'b1 == ap_CS_fsm_state11) & ~(S_AXIS_V_data_0_vld_out == 1'b0)))) begin
        S_AXIS_V_last_0_ack_out = 1'b1;
    end else begin
        S_AXIS_V_last_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        sigmoid_arr_address0 = tmp_17_2_cast_fu_1766_p1;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        sigmoid_arr_address0 = highest_pred_2_highe_1_fu_1661_p1;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        sigmoid_arr_address0 = tmp_17_1_cast_fu_1645_p1;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        sigmoid_arr_address0 = tmp_26_cast_fu_1535_p1;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        sigmoid_arr_address0 = tmp_14_4_cast_fu_1431_p1;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        sigmoid_arr_address0 = tmp_14_3_cast_fu_1317_p1;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        sigmoid_arr_address0 = tmp_14_2_cast_fu_1203_p1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        sigmoid_arr_address0 = tmp_14_1_cast_fu_1089_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        sigmoid_arr_address0 = tmp_14_cast_fu_975_p1;
    end else begin
        sigmoid_arr_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state75))) begin
        sigmoid_arr_ce0 = 1'b1;
    end else begin
        sigmoid_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        test_data_address0 = j_2_4_cast6_fu_1327_p1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        test_data_address0 = j_2_3_cast7_fu_1213_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        test_data_address0 = j_2_2_cast8_fu_1099_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        test_data_address0 = j_2_1_cast9_fu_985_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        test_data_address0 = j_cast_fu_877_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        test_data_address0 = i_2_cast_reg_1918;
    end else begin
        test_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state44) | ((1'b1 == ap_CS_fsm_state11) & ~(S_AXIS_V_data_0_vld_out == 1'b0)))) begin
        test_data_ce0 = 1'b1;
    end else begin
        test_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & ~(S_AXIS_V_data_0_vld_out == 1'b0))) begin
        test_data_we0 = 1'b1;
    end else begin
        test_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        values_hidden_layer_address0 = j_3_2_cast1_fu_1666_p1;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        values_hidden_layer_address0 = j_3_1_cast2_fu_1545_p1;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        values_hidden_layer_address0 = j_4_cast4_fu_1441_p1;
    end else if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state51) | ((1'b1 == ap_CS_fsm_state48) & (1'b0 == tmp_2_4_reg_2113) & ~(1'b0 == icmp4_reg_2117)) | ((1'b1 == ap_CS_fsm_state48) & ~(1'b0 == tmp_2_4_reg_2113)) | (1'b1 == ap_CS_fsm_state49))) begin
        values_hidden_layer_address0 = ap_const_lv3_4;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state43) | ((1'b1 == ap_CS_fsm_state40) & (1'b0 == tmp_2_3_reg_2072) & ~(1'b0 == icmp3_reg_2076)) | ((1'b1 == ap_CS_fsm_state40) & ~(1'b0 == tmp_2_3_reg_2072)) | (1'b1 == ap_CS_fsm_state41))) begin
        values_hidden_layer_address0 = ap_const_lv3_3;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state35) | ((1'b1 == ap_CS_fsm_state32) & (1'b0 == tmp_2_2_reg_2031) & ~(1'b0 == icmp2_reg_2035)) | ((1'b1 == ap_CS_fsm_state32) & ~(1'b0 == tmp_2_2_reg_2031)) | (1'b1 == ap_CS_fsm_state33))) begin
        values_hidden_layer_address0 = ap_const_lv3_2;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state27) | ((1'b1 == ap_CS_fsm_state24) & (1'b0 == tmp_2_1_reg_1990) & ~(1'b0 == icmp1_reg_1994)) | ((1'b1 == ap_CS_fsm_state24) & ~(1'b0 == tmp_2_1_reg_1990)) | (1'b1 == ap_CS_fsm_state25))) begin
        values_hidden_layer_address0 = ap_const_lv3_1;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state19) | ((1'b1 == ap_CS_fsm_state16) & (1'b0 == tmp_2_reg_1949) & ~(1'b0 == icmp_reg_1953)) | ((1'b1 == ap_CS_fsm_state16) & ~(1'b0 == tmp_2_reg_1949)) | (1'b1 == ap_CS_fsm_state17))) begin
        values_hidden_layer_address0 = ap_const_lv3_0;
    end else begin
        values_hidden_layer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state51) | ((1'b1 == ap_CS_fsm_state16) & (1'b0 == tmp_2_reg_1949) & ~(1'b0 == icmp_reg_1953)) | ((1'b1 == ap_CS_fsm_state16) & ~(1'b0 == tmp_2_reg_1949)) | (1'b1 == ap_CS_fsm_state17) | ((1'b1 == ap_CS_fsm_state24) & (1'b0 == tmp_2_1_reg_1990) & ~(1'b0 == icmp1_reg_1994)) | ((1'b1 == ap_CS_fsm_state24) & ~(1'b0 == tmp_2_1_reg_1990)) | (1'b1 == ap_CS_fsm_state25) | ((1'b1 == ap_CS_fsm_state32) & (1'b0 == tmp_2_2_reg_2031) & ~(1'b0 == icmp2_reg_2035)) | ((1'b1 == ap_CS_fsm_state32) & ~(1'b0 == tmp_2_2_reg_2031)) | (1'b1 == ap_CS_fsm_state33) | ((1'b1 == ap_CS_fsm_state40) & (1'b0 == tmp_2_3_reg_2072) & ~(1'b0 == icmp3_reg_2076)) | ((1'b1 == ap_CS_fsm_state40) & ~(1'b0 == tmp_2_3_reg_2072)) | (1'b1 == ap_CS_fsm_state41) | ((1'b1 == ap_CS_fsm_state48) & (1'b0 == tmp_2_4_reg_2113) & ~(1'b0 == icmp4_reg_2117)) | ((1'b1 == ap_CS_fsm_state48) & ~(1'b0 == tmp_2_4_reg_2113)) | (1'b1 == ap_CS_fsm_state49))) begin
        values_hidden_layer_ce0 = 1'b1;
    end else begin
        values_hidden_layer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        values_hidden_layer_d0 = tmp_15_4_fu_1436_p1;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        values_hidden_layer_d0 = values_hidden_layer_1_reg_592;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        values_hidden_layer_d0 = tmp_15_3_fu_1322_p1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        values_hidden_layer_d0 = values_hidden_layer_7_reg_568;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        values_hidden_layer_d0 = tmp_15_2_fu_1208_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        values_hidden_layer_d0 = values_hidden_layer_8_reg_544;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        values_hidden_layer_d0 = tmp_15_1_fu_1094_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        values_hidden_layer_d0 = values_hidden_layer_5_reg_520;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        values_hidden_layer_d0 = tmp_14_fu_980_p1;
    end else if ((((1'b1 == ap_CS_fsm_state16) & ~(1'b0 == tmp_2_reg_1949)) | ((1'b1 == ap_CS_fsm_state24) & ~(1'b0 == tmp_2_1_reg_1990)) | ((1'b1 == ap_CS_fsm_state32) & ~(1'b0 == tmp_2_2_reg_2031)) | ((1'b1 == ap_CS_fsm_state40) & ~(1'b0 == tmp_2_3_reg_2072)) | ((1'b1 == ap_CS_fsm_state48) & ~(1'b0 == tmp_2_4_reg_2113)))) begin
        values_hidden_layer_d0 = ap_const_lv16_FC00;
    end else if ((((1'b1 == ap_CS_fsm_state16) & (1'b0 == tmp_2_reg_1949) & ~(1'b0 == icmp_reg_1953)) | ((1'b1 == ap_CS_fsm_state24) & (1'b0 == tmp_2_1_reg_1990) & ~(1'b0 == icmp1_reg_1994)) | ((1'b1 == ap_CS_fsm_state32) & (1'b0 == tmp_2_2_reg_2031) & ~(1'b0 == icmp2_reg_2035)) | ((1'b1 == ap_CS_fsm_state40) & (1'b0 == tmp_2_3_reg_2072) & ~(1'b0 == icmp3_reg_2076)) | ((1'b1 == ap_CS_fsm_state48) & (1'b0 == tmp_2_4_reg_2113) & ~(1'b0 == icmp4_reg_2117)))) begin
        values_hidden_layer_d0 = ap_const_lv16_3FF;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        values_hidden_layer_d0 = values_hidden_layer_2_reg_496;
    end else begin
        values_hidden_layer_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state51) | ((1'b1 == ap_CS_fsm_state16) & (1'b0 == tmp_2_reg_1949) & ~(1'b0 == icmp_reg_1953)) | ((1'b1 == ap_CS_fsm_state16) & ~(1'b0 == tmp_2_reg_1949)) | ((1'b1 == ap_CS_fsm_state24) & (1'b0 == tmp_2_1_reg_1990) & ~(1'b0 == icmp1_reg_1994)) | ((1'b1 == ap_CS_fsm_state24) & ~(1'b0 == tmp_2_1_reg_1990)) | ((1'b1 == ap_CS_fsm_state32) & (1'b0 == tmp_2_2_reg_2031) & ~(1'b0 == icmp2_reg_2035)) | ((1'b1 == ap_CS_fsm_state32) & ~(1'b0 == tmp_2_2_reg_2031)) | ((1'b1 == ap_CS_fsm_state40) & (1'b0 == tmp_2_3_reg_2072) & ~(1'b0 == icmp3_reg_2076)) | ((1'b1 == ap_CS_fsm_state40) & ~(1'b0 == tmp_2_3_reg_2072)) | ((1'b1 == ap_CS_fsm_state48) & (1'b0 == tmp_2_4_reg_2113) & ~(1'b0 == icmp4_reg_2117)) | ((1'b1 == ap_CS_fsm_state48) & ~(1'b0 == tmp_2_4_reg_2113)))) begin
        values_hidden_layer_we0 = 1'b1;
    end else begin
        values_hidden_layer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state69) | ((1'b1 == ap_CS_fsm_state73) & (1'b0 == tmp_8_2_reg_2256) & ~(1'b0 == icmp7_reg_2260)) | ((1'b1 == ap_CS_fsm_state73) & ~(1'b0 == tmp_8_2_reg_2256)) | (1'b1 == ap_CS_fsm_state74))) begin
        values_output_layer_address0 = ap_const_lv2_2;
    end else if (((1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state67) | ((1'b1 == ap_CS_fsm_state64) & (1'b0 == tmp_8_1_reg_2200) & ~(1'b0 == icmp6_reg_2204)) | ((1'b1 == ap_CS_fsm_state64) & ~(1'b0 == tmp_8_1_reg_2200)) | (1'b1 == ap_CS_fsm_state65))) begin
        values_output_layer_address0 = ap_const_lv2_1;
    end else if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state52) | ((1'b1 == ap_CS_fsm_state56) & (1'b0 == tmp_17_reg_2154) & ~(1'b0 == icmp5_reg_2158)) | ((1'b1 == ap_CS_fsm_state56) & ~(1'b0 == tmp_17_reg_2154)) | (1'b1 == ap_CS_fsm_state57))) begin
        values_output_layer_address0 = ap_const_lv2_0;
    end else begin
        values_output_layer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state69) | ((1'b1 == ap_CS_fsm_state76) & ~(1'b0 == M_AXIS_V_data_1_ack_in)) | ((1'b1 == ap_CS_fsm_state56) & (1'b0 == tmp_17_reg_2154) & ~(1'b0 == icmp5_reg_2158)) | ((1'b1 == ap_CS_fsm_state56) & ~(1'b0 == tmp_17_reg_2154)) | (1'b1 == ap_CS_fsm_state57) | ((1'b1 == ap_CS_fsm_state64) & (1'b0 == tmp_8_1_reg_2200) & ~(1'b0 == icmp6_reg_2204)) | ((1'b1 == ap_CS_fsm_state64) & ~(1'b0 == tmp_8_1_reg_2200)) | (1'b1 == ap_CS_fsm_state65) | ((1'b1 == ap_CS_fsm_state73) & (1'b0 == tmp_8_2_reg_2256) & ~(1'b0 == icmp7_reg_2260)) | ((1'b1 == ap_CS_fsm_state73) & ~(1'b0 == tmp_8_2_reg_2256)) | (1'b1 == ap_CS_fsm_state74))) begin
        values_output_layer_ce0 = 1'b1;
    end else begin
        values_output_layer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        values_output_layer_d0 = highest_pred_2_2_fu_1771_p1;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        values_output_layer_d0 = values_output_layer_8_reg_664;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        values_output_layer_d0 = highest_pred_2_1_fu_1650_p1;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        values_output_layer_d0 = values_output_layer_5_reg_640;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        values_output_layer_d0 = highest_pred_2_fu_1540_p1;
    end else if ((((1'b1 == ap_CS_fsm_state56) & ~(1'b0 == tmp_17_reg_2154)) | ((1'b1 == ap_CS_fsm_state64) & ~(1'b0 == tmp_8_1_reg_2200)) | ((1'b1 == ap_CS_fsm_state73) & ~(1'b0 == tmp_8_2_reg_2256)))) begin
        values_output_layer_d0 = ap_const_lv16_FC00;
    end else if ((((1'b1 == ap_CS_fsm_state56) & (1'b0 == tmp_17_reg_2154) & ~(1'b0 == icmp5_reg_2158)) | ((1'b1 == ap_CS_fsm_state64) & (1'b0 == tmp_8_1_reg_2200) & ~(1'b0 == icmp6_reg_2204)) | ((1'b1 == ap_CS_fsm_state73) & (1'b0 == tmp_8_2_reg_2256) & ~(1'b0 == icmp7_reg_2260)))) begin
        values_output_layer_d0 = ap_const_lv16_3FF;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        values_output_layer_d0 = values_output_layer_2_reg_616;
    end else begin
        values_output_layer_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state69) | ((1'b1 == ap_CS_fsm_state76) & ~(1'b0 == M_AXIS_V_data_1_ack_in)) | ((1'b1 == ap_CS_fsm_state56) & (1'b0 == tmp_17_reg_2154) & ~(1'b0 == icmp5_reg_2158)) | ((1'b1 == ap_CS_fsm_state56) & ~(1'b0 == tmp_17_reg_2154)) | ((1'b1 == ap_CS_fsm_state64) & (1'b0 == tmp_8_1_reg_2200) & ~(1'b0 == icmp6_reg_2204)) | ((1'b1 == ap_CS_fsm_state64) & ~(1'b0 == tmp_8_1_reg_2200)) | ((1'b1 == ap_CS_fsm_state73) & (1'b0 == tmp_8_2_reg_2256) & ~(1'b0 == icmp7_reg_2260)) | ((1'b1 == ap_CS_fsm_state73) & ~(1'b0 == tmp_8_2_reg_2256)))) begin
        values_output_layer_we0 = 1'b1;
    end else begin
        values_output_layer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        weights_HO_address0 = tmp_52_cast_fu_1695_p1;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        weights_HO_address0 = tmp_49_cast_fu_1574_p1;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        weights_HO_address0 = tmp_46_cast_fu_1464_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        weights_HO_address0 = weights_HO_addr_reg_1897;
    end else begin
        weights_HO_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state69) | ((1'b1 == ap_CS_fsm_state7) & ~(S_AXIS_V_data_0_vld_out == 1'b0)))) begin
        weights_HO_ce0 = 1'b1;
    end else begin
        weights_HO_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & ~(S_AXIS_V_data_0_vld_out == 1'b0))) begin
        weights_HO_we0 = 1'b1;
    end else begin
        weights_HO_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        weights_IH_address0 = tmp_44_cast_fu_1360_p1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        weights_IH_address0 = tmp_41_cast_fu_1246_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        weights_IH_address0 = tmp_38_cast_fu_1132_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        weights_IH_address0 = tmp_35_cast_fu_1018_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        weights_IH_address0 = tmp_32_cast_fu_904_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        weights_IH_address0 = weights_IH_addr_reg_1871;
    end else begin
        weights_IH_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state44) | ((1'b1 == ap_CS_fsm_state4) & ~(S_AXIS_V_data_0_vld_out == 1'b0)))) begin
        weights_IH_ce0 = 1'b1;
    end else begin
        weights_IH_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(S_AXIS_V_data_0_vld_out == 1'b0))) begin
        weights_IH_we0 = 1'b1;
    end else begin
        weights_IH_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (~(1'b0 == exitcond1_fu_740_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (~(1'b0 == exitcond3_fu_766_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (~(S_AXIS_V_data_0_vld_out == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b0 == exitcond2_fu_801_p2) & ~(~(1'b0 == exitcond2_fu_801_p2) & (1'b0 == M_AXIS_V_data_1_ack_in)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if ((~(1'b0 == exitcond2_fu_801_p2) & ~(~(1'b0 == exitcond2_fu_801_p2) & (1'b0 == M_AXIS_V_data_1_ack_in)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (~(1'b0 == exitcond5_fu_827_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (~(S_AXIS_V_data_0_vld_out == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (~(1'b0 == M_AXIS_V_data_1_ack_in)) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if ((~(1'b0 == exitcond4_fu_844_p2) & ~((M_AXIS_V_data_1_ack_in == 1'b0) | (M_AXIS_V_last_1_ack_in == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == exitcond4_fu_844_p2) & ~((M_AXIS_V_data_1_ack_in == 1'b0) | (M_AXIS_V_last_1_ack_in == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (~(1'b0 == exitcond6_fu_860_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (~(S_AXIS_V_data_0_vld_out == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (~(1'b0 == exitcond9_fu_909_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (~(1'b0 == exitcond9_1_fu_1023_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (~(1'b0 == exitcond9_2_fu_1137_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            if (~(1'b0 == exitcond9_3_fu_1251_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            if (~(1'b0 == exitcond9_4_fu_1365_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            if (~(1'b0 == exitcond_fu_1469_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            if (~(1'b0 == exitcond_1_fu_1579_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            if (~(1'b0 == exitcond_2_fu_1700_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            if (~(1'b0 == M_AXIS_V_data_1_ack_in)) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state77 : begin
            if (~(1'b0 == M_AXIS_V_data_1_ack_in)) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M_AXIS_TDATA = M_AXIS_V_data_1_data_out;

assign M_AXIS_TLAST = M_AXIS_V_last_1_data_out;

assign M_AXIS_TVALID = M_AXIS_V_last_1_state[1'b0];

assign M_AXIS_V_data_1_ack_in = M_AXIS_V_data_1_state[1'b1];

assign M_AXIS_V_data_1_ack_out = M_AXIS_TREADY;

assign M_AXIS_V_data_1_load_A = (M_AXIS_V_data_1_state_cmp_full & ~M_AXIS_V_data_1_sel_wr);

assign M_AXIS_V_data_1_load_B = (M_AXIS_V_data_1_sel_wr & M_AXIS_V_data_1_state_cmp_full);

assign M_AXIS_V_data_1_sel = M_AXIS_V_data_1_sel_rd;

assign M_AXIS_V_data_1_state_cmp_full = ((M_AXIS_V_data_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign M_AXIS_V_data_1_vld_out = M_AXIS_V_data_1_state[1'b0];

assign M_AXIS_V_last_1_ack_in = M_AXIS_V_last_1_state[1'b1];

assign M_AXIS_V_last_1_ack_out = M_AXIS_TREADY;

assign M_AXIS_V_last_1_data_out = 1'b1;

assign M_AXIS_V_last_1_sel = M_AXIS_V_last_1_sel_rd;

assign M_AXIS_V_last_1_vld_out = M_AXIS_V_last_1_state[1'b0];

assign S_AXIS_TREADY = S_AXIS_V_last_0_state[1'b1];

assign S_AXIS_V_data_0_ack_in = S_AXIS_V_data_0_state[1'b1];

assign S_AXIS_V_data_0_load_A = (S_AXIS_V_data_0_state_cmp_full & ~S_AXIS_V_data_0_sel_wr);

assign S_AXIS_V_data_0_load_B = (S_AXIS_V_data_0_sel_wr & S_AXIS_V_data_0_state_cmp_full);

assign S_AXIS_V_data_0_sel = S_AXIS_V_data_0_sel_rd;

assign S_AXIS_V_data_0_state_cmp_full = ((S_AXIS_V_data_0_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign S_AXIS_V_data_0_vld_in = S_AXIS_TVALID;

assign S_AXIS_V_data_0_vld_out = S_AXIS_V_data_0_state[1'b0];

assign S_AXIS_V_last_0_vld_in = S_AXIS_TVALID;

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state17 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_state18 = ap_CS_fsm[ap_const_lv32_11];

assign ap_CS_fsm_state19 = ap_CS_fsm[ap_const_lv32_12];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state20 = ap_CS_fsm[ap_const_lv32_13];

assign ap_CS_fsm_state21 = ap_CS_fsm[ap_const_lv32_14];

assign ap_CS_fsm_state22 = ap_CS_fsm[ap_const_lv32_15];

assign ap_CS_fsm_state23 = ap_CS_fsm[ap_const_lv32_16];

assign ap_CS_fsm_state24 = ap_CS_fsm[ap_const_lv32_17];

assign ap_CS_fsm_state25 = ap_CS_fsm[ap_const_lv32_18];

assign ap_CS_fsm_state26 = ap_CS_fsm[ap_const_lv32_19];

assign ap_CS_fsm_state27 = ap_CS_fsm[ap_const_lv32_1A];

assign ap_CS_fsm_state28 = ap_CS_fsm[ap_const_lv32_1B];

assign ap_CS_fsm_state29 = ap_CS_fsm[ap_const_lv32_1C];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state30 = ap_CS_fsm[ap_const_lv32_1D];

assign ap_CS_fsm_state31 = ap_CS_fsm[ap_const_lv32_1E];

assign ap_CS_fsm_state32 = ap_CS_fsm[ap_const_lv32_1F];

assign ap_CS_fsm_state33 = ap_CS_fsm[ap_const_lv32_20];

assign ap_CS_fsm_state34 = ap_CS_fsm[ap_const_lv32_21];

assign ap_CS_fsm_state35 = ap_CS_fsm[ap_const_lv32_22];

assign ap_CS_fsm_state36 = ap_CS_fsm[ap_const_lv32_23];

assign ap_CS_fsm_state37 = ap_CS_fsm[ap_const_lv32_24];

assign ap_CS_fsm_state38 = ap_CS_fsm[ap_const_lv32_25];

assign ap_CS_fsm_state39 = ap_CS_fsm[ap_const_lv32_26];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state40 = ap_CS_fsm[ap_const_lv32_27];

assign ap_CS_fsm_state41 = ap_CS_fsm[ap_const_lv32_28];

assign ap_CS_fsm_state42 = ap_CS_fsm[ap_const_lv32_29];

assign ap_CS_fsm_state43 = ap_CS_fsm[ap_const_lv32_2A];

assign ap_CS_fsm_state44 = ap_CS_fsm[ap_const_lv32_2B];

assign ap_CS_fsm_state45 = ap_CS_fsm[ap_const_lv32_2C];

assign ap_CS_fsm_state46 = ap_CS_fsm[ap_const_lv32_2D];

assign ap_CS_fsm_state47 = ap_CS_fsm[ap_const_lv32_2E];

assign ap_CS_fsm_state48 = ap_CS_fsm[ap_const_lv32_2F];

assign ap_CS_fsm_state49 = ap_CS_fsm[ap_const_lv32_30];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state50 = ap_CS_fsm[ap_const_lv32_31];

assign ap_CS_fsm_state51 = ap_CS_fsm[ap_const_lv32_32];

assign ap_CS_fsm_state52 = ap_CS_fsm[ap_const_lv32_33];

assign ap_CS_fsm_state53 = ap_CS_fsm[ap_const_lv32_34];

assign ap_CS_fsm_state54 = ap_CS_fsm[ap_const_lv32_35];

assign ap_CS_fsm_state55 = ap_CS_fsm[ap_const_lv32_36];

assign ap_CS_fsm_state56 = ap_CS_fsm[ap_const_lv32_37];

assign ap_CS_fsm_state57 = ap_CS_fsm[ap_const_lv32_38];

assign ap_CS_fsm_state58 = ap_CS_fsm[ap_const_lv32_39];

assign ap_CS_fsm_state59 = ap_CS_fsm[ap_const_lv32_3A];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state60 = ap_CS_fsm[ap_const_lv32_3B];

assign ap_CS_fsm_state61 = ap_CS_fsm[ap_const_lv32_3C];

assign ap_CS_fsm_state62 = ap_CS_fsm[ap_const_lv32_3D];

assign ap_CS_fsm_state63 = ap_CS_fsm[ap_const_lv32_3E];

assign ap_CS_fsm_state64 = ap_CS_fsm[ap_const_lv32_3F];

assign ap_CS_fsm_state65 = ap_CS_fsm[ap_const_lv32_40];

assign ap_CS_fsm_state66 = ap_CS_fsm[ap_const_lv32_41];

assign ap_CS_fsm_state67 = ap_CS_fsm[ap_const_lv32_42];

assign ap_CS_fsm_state68 = ap_CS_fsm[ap_const_lv32_43];

assign ap_CS_fsm_state69 = ap_CS_fsm[ap_const_lv32_44];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state70 = ap_CS_fsm[ap_const_lv32_45];

assign ap_CS_fsm_state71 = ap_CS_fsm[ap_const_lv32_46];

assign ap_CS_fsm_state72 = ap_CS_fsm[ap_const_lv32_47];

assign ap_CS_fsm_state73 = ap_CS_fsm[ap_const_lv32_48];

assign ap_CS_fsm_state74 = ap_CS_fsm[ap_const_lv32_49];

assign ap_CS_fsm_state75 = ap_CS_fsm[ap_const_lv32_4A];

assign ap_CS_fsm_state76 = ap_CS_fsm[ap_const_lv32_4B];

assign ap_CS_fsm_state77 = ap_CS_fsm[ap_const_lv32_4C];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_740_p2 = ((i_reg_430 == ap_const_lv4_D) ? 1'b1 : 1'b0);

assign exitcond2_fu_801_p2 = ((i_1_reg_452 == ap_const_lv3_5) ? 1'b1 : 1'b0);

assign exitcond3_fu_766_p2 = ((j_reg_441 == ap_const_lv3_5) ? 1'b1 : 1'b0);

assign exitcond4_fu_844_p2 = ((k_reg_474 == ap_const_lv6_24) ? 1'b1 : 1'b0);

assign exitcond5_fu_827_p2 = ((j_1_reg_463 == ap_const_lv2_3) ? 1'b1 : 1'b0);

assign exitcond6_fu_860_p2 = ((i_2_reg_485 == ap_const_lv4_D) ? 1'b1 : 1'b0);

assign exitcond9_1_fu_1023_p2 = ((j_2_1_reg_533 == ap_const_lv4_D) ? 1'b1 : 1'b0);

assign exitcond9_2_fu_1137_p2 = ((j_2_2_reg_557 == ap_const_lv4_D) ? 1'b1 : 1'b0);

assign exitcond9_3_fu_1251_p2 = ((j_2_3_reg_581 == ap_const_lv4_D) ? 1'b1 : 1'b0);

assign exitcond9_4_fu_1365_p2 = ((j_2_4_reg_605 == ap_const_lv4_D) ? 1'b1 : 1'b0);

assign exitcond9_fu_909_p2 = ((j_s_reg_509 == ap_const_lv4_D) ? 1'b1 : 1'b0);

assign exitcond_1_fu_1579_p2 = ((j_3_1_reg_653 == ap_const_lv3_5) ? 1'b1 : 1'b0);

assign exitcond_2_fu_1700_p2 = ((j_3_2_reg_677 == ap_const_lv3_5) ? 1'b1 : 1'b0);

assign exitcond_fu_1469_p2 = ((j_4_reg_629 == ap_const_lv3_5) ? 1'b1 : 1'b0);

assign grp_fu_712_p2 = ((sigmoid_arr_q0 > reg_708) ? 1'b1 : 1'b0);

assign highest_pred_2_1_fu_1650_p1 = sigmoid_arr_q0;

assign highest_pred_2_2_fu_1771_p1 = sigmoid_arr_q0;

assign highest_pred_2_fu_1540_p1 = sigmoid_arr_q0;

assign highest_pred_2_highe_1_fu_1661_p1 = $signed(highest_pred_2_highe_fu_1655_p3);

assign highest_pred_2_highe_fu_1655_p3 = ((grp_fu_712_p2[0:0] === 1'b1) ? tmp_17_1_reg_2218 : tmp_24_reg_2172);

assign i_1_cast_cast_fu_783_p1 = i_1_reg_452;

assign i_2_cast_fu_856_p1 = i_2_reg_485;

assign i_3_fu_746_p2 = (i_reg_430 + ap_const_lv4_1);

assign i_4_fu_807_p2 = (i_1_reg_452 + ap_const_lv3_1);

assign i_5_fu_866_p2 = (i_2_reg_485 + ap_const_lv4_1);

assign i_cast_cast_fu_718_p1 = i_reg_430;

assign icmp1_fu_1051_p2 = (($signed(tmp_53_fu_1041_p4) > $signed(6'b000000)) ? 1'b1 : 1'b0);

assign icmp2_fu_1165_p2 = (($signed(tmp_55_fu_1155_p4) > $signed(6'b000000)) ? 1'b1 : 1'b0);

assign icmp3_fu_1279_p2 = (($signed(tmp_57_fu_1269_p4) > $signed(6'b000000)) ? 1'b1 : 1'b0);

assign icmp4_fu_1393_p2 = (($signed(tmp_59_fu_1383_p4) > $signed(6'b000000)) ? 1'b1 : 1'b0);

assign icmp5_fu_1497_p2 = (($signed(tmp_61_fu_1487_p4) > $signed(6'b000000)) ? 1'b1 : 1'b0);

assign icmp6_fu_1607_p2 = (($signed(tmp_63_fu_1597_p4) > $signed(6'b000000)) ? 1'b1 : 1'b0);

assign icmp7_fu_1728_p2 = (($signed(tmp_65_fu_1718_p4) > $signed(6'b000000)) ? 1'b1 : 1'b0);

assign icmp_fu_937_p2 = (($signed(tmp_31_fu_927_p4) > $signed(6'b000000)) ? 1'b1 : 1'b0);

assign j_1_cast_cast_fu_813_p1 = j_1_reg_463;

assign j_2_1_cast9_cast_fu_990_p1 = j_2_1_reg_533;

assign j_2_1_cast9_fu_985_p1 = j_2_1_reg_533;

assign j_2_2_cast8_cast_fu_1104_p1 = j_2_2_reg_557;

assign j_2_2_cast8_fu_1099_p1 = j_2_2_reg_557;

assign j_2_3_cast7_cast_fu_1218_p1 = j_2_3_reg_581;

assign j_2_3_cast7_fu_1213_p1 = j_2_3_reg_581;

assign j_2_4_cast6_cast_fu_1332_p1 = j_2_4_reg_605;

assign j_2_4_cast6_fu_1327_p1 = j_2_4_reg_605;

assign j_2_fu_772_p2 = (j_reg_441 + ap_const_lv3_1);

assign j_3_1_cast2_cast_fu_1550_p1 = j_3_1_reg_653;

assign j_3_1_cast2_fu_1545_p1 = j_3_1_reg_653;

assign j_3_2_cast1_cast_fu_1671_p1 = j_3_2_reg_677;

assign j_3_2_cast1_fu_1666_p1 = j_3_2_reg_677;

assign j_3_fu_833_p2 = (j_1_reg_463 + ap_const_lv2_1);

assign j_4_cast4_cast_fu_1446_p1 = j_4_reg_629;

assign j_4_cast4_fu_1441_p1 = j_4_reg_629;

assign j_6_1_fu_1029_p2 = (j_2_1_reg_533 + ap_const_lv4_1);

assign j_6_2_fu_1143_p2 = (j_2_2_reg_557 + ap_const_lv4_1);

assign j_6_3_fu_1257_p2 = (j_2_3_reg_581 + ap_const_lv4_1);

assign j_6_4_fu_1371_p2 = (j_2_4_reg_605 + ap_const_lv4_1);

assign j_6_fu_915_p2 = (j_s_reg_509 + ap_const_lv4_1);

assign j_7_1_fu_1585_p2 = (j_3_1_reg_653 + ap_const_lv3_1);

assign j_7_2_fu_1706_p2 = (j_3_2_reg_677 + ap_const_lv3_1);

assign j_7_fu_1475_p2 = (j_4_reg_629 + ap_const_lv3_1);

assign j_cast_cast_26_fu_882_p1 = j_s_reg_509;

assign j_cast_cast_fu_752_p1 = j_reg_441;

assign j_cast_fu_877_p1 = j_s_reg_509;

assign k_1_fu_850_p2 = (k_reg_474 + ap_const_lv6_1);

assign p_shl2_cast_fu_894_p1 = tmp_29_fu_886_p3;

assign p_shl3_cast_fu_1002_p1 = tmp_33_fu_994_p3;

assign p_shl4_cast_fu_1116_p1 = tmp_36_fu_1108_p3;

assign p_shl5_cast_fu_1230_p1 = tmp_39_fu_1222_p3;

assign p_shl6_cast_fu_1344_p1 = tmp_42_fu_1336_p3;

assign p_shl_cast_fu_730_p1 = tmp_s_fu_722_p3;

assign prediction_write_out_fu_1776_p3 = ((grp_fu_712_p2[0:0] === 1'b1) ? ap_const_lv2_3 : ap_const_lv2_2);

assign test_data_d0 = S_AXIS_V_data_0_data_out[15:0];

assign tmp_11_1_fu_1630_p2 = (values_output_layer_5_reg_640 + tmp_10_1_reg_2208);

assign tmp_11_2_fu_1751_p2 = (values_output_layer_8_reg_664 + tmp_10_2_reg_2264);

assign tmp_13_fu_969_p2 = (ap_const_lv13_400 + tmp_32_fu_965_p1);

assign tmp_14_1_cast_fu_1089_p1 = $signed(tmp_14_1_fu_1083_p2);

assign tmp_14_1_fu_1083_p2 = (ap_const_lv13_400 + tmp_54_fu_1079_p1);

assign tmp_14_2_cast_fu_1203_p1 = $signed(tmp_14_2_fu_1197_p2);

assign tmp_14_2_fu_1197_p2 = (ap_const_lv13_400 + tmp_56_fu_1193_p1);

assign tmp_14_3_cast_fu_1317_p1 = $signed(tmp_14_3_fu_1311_p2);

assign tmp_14_3_fu_1311_p2 = (ap_const_lv13_400 + tmp_58_fu_1307_p1);

assign tmp_14_4_cast_fu_1431_p1 = $signed(tmp_14_4_fu_1425_p2);

assign tmp_14_4_fu_1425_p2 = (ap_const_lv13_400 + tmp_60_fu_1421_p1);

assign tmp_14_cast_fu_975_p1 = $signed(tmp_13_fu_969_p2);

assign tmp_14_fu_980_p1 = sigmoid_arr_q0;

assign tmp_15_1_fu_1094_p1 = sigmoid_arr_q0;

assign tmp_15_2_fu_1208_p1 = sigmoid_arr_q0;

assign tmp_15_3_fu_1322_p1 = sigmoid_arr_q0;

assign tmp_15_4_fu_1436_p1 = sigmoid_arr_q0;

assign tmp_17_1_cast_fu_1645_p1 = $signed(tmp_17_1_fu_1639_p2);

assign tmp_17_1_fu_1639_p2 = (ap_const_lv13_400 + tmp_64_fu_1635_p1);

assign tmp_17_2_cast_fu_1766_p1 = $signed(tmp_17_2_fu_1760_p2);

assign tmp_17_2_fu_1760_p2 = (ap_const_lv13_400 + tmp_66_fu_1756_p1);

assign tmp_17_fu_1481_p2 = (($signed(values_output_layer_2_reg_616) < $signed(16'b1111110000000000)) ? 1'b1 : 1'b0);

assign tmp_1_fu_734_p2 = (i_cast_cast_fu_718_p1 + p_shl_cast_fu_730_p1);

assign tmp_20_fu_1784_p2 = (grp_fu_712_p2 | tmp_18_1_reg_2228);

assign tmp_22_fu_1520_p2 = (values_output_layer_2_reg_616 + tmp_21_reg_2162);

assign tmp_23_fu_756_p2 = (tmp_1_reg_1858 + j_cast_cast_fu_752_p1);

assign tmp_24_fu_1529_p2 = (ap_const_lv13_400 + tmp_62_fu_1525_p1);

assign tmp_26_cast_fu_1535_p1 = $signed(tmp_24_fu_1529_p2);

assign tmp_26_fu_817_p2 = (tmp_6_reg_1884 + j_1_cast_cast_fu_813_p1);

assign tmp_29_cast_fu_761_p1 = tmp_23_fu_756_p2;

assign tmp_29_fu_886_p3 = {{j_s_reg_509}, {ap_const_lv2_0}};

assign tmp_2_1_fu_1035_p2 = (($signed(values_hidden_layer_5_reg_520) < $signed(16'b1111110000000000)) ? 1'b1 : 1'b0);

assign tmp_2_2_fu_1149_p2 = (($signed(values_hidden_layer_8_reg_544) < $signed(16'b1111110000000000)) ? 1'b1 : 1'b0);

assign tmp_2_3_fu_1263_p2 = (($signed(values_hidden_layer_7_reg_568) < $signed(16'b1111110000000000)) ? 1'b1 : 1'b0);

assign tmp_2_4_fu_1377_p2 = (($signed(values_hidden_layer_1_reg_592) < $signed(16'b1111110000000000)) ? 1'b1 : 1'b0);

assign tmp_2_fu_921_p2 = (($signed(values_hidden_layer_2_reg_496) < $signed(16'b1111110000000000)) ? 1'b1 : 1'b0);

assign tmp_30_cast_fu_822_p1 = $signed(tmp_26_fu_817_p2);

assign tmp_30_fu_898_p2 = (j_cast_cast_26_fu_882_p1 + p_shl2_cast_fu_894_p1);

assign tmp_31_fu_927_p4 = {{values_hidden_layer_2_reg_496[ap_const_lv32_F : ap_const_lv32_A]}};

assign tmp_32_cast_fu_904_p1 = tmp_30_fu_898_p2;

assign tmp_32_fu_965_p1 = values_hidden_layer_q0[12:0];

assign tmp_33_fu_994_p3 = {{j_2_1_reg_533}, {ap_const_lv2_0}};

assign tmp_34_fu_1006_p2 = (j_2_1_cast9_cast_fu_990_p1 + p_shl3_cast_fu_1002_p1);

assign tmp_35_cast_fu_1018_p1 = tmp_35_fu_1012_p2;

assign tmp_35_fu_1012_p2 = (tmp_34_fu_1006_p2 + ap_const_lv7_1);

assign tmp_36_fu_1108_p3 = {{j_2_2_reg_557}, {ap_const_lv2_0}};

assign tmp_37_fu_1120_p2 = (j_2_2_cast8_cast_fu_1104_p1 + p_shl4_cast_fu_1116_p1);

assign tmp_38_cast_fu_1132_p1 = tmp_38_fu_1126_p2;

assign tmp_38_fu_1126_p2 = (tmp_37_fu_1120_p2 + ap_const_lv7_2);

assign tmp_39_fu_1222_p3 = {{j_2_3_reg_581}, {ap_const_lv2_0}};

assign tmp_3_fu_787_p3 = {{i_1_reg_452}, {ap_const_lv2_0}};

assign tmp_40_fu_1234_p2 = (j_2_3_cast7_cast_fu_1218_p1 + p_shl5_cast_fu_1230_p1);

assign tmp_41_cast_fu_1246_p1 = tmp_41_fu_1240_p2;

assign tmp_41_fu_1240_p2 = (tmp_40_fu_1234_p2 + ap_const_lv7_3);

assign tmp_42_fu_1336_p3 = {{j_2_4_reg_605}, {ap_const_lv2_0}};

assign tmp_43_fu_1348_p2 = (j_2_4_cast6_cast_fu_1332_p1 + p_shl6_cast_fu_1344_p1);

assign tmp_44_cast_fu_1360_p1 = tmp_44_fu_1354_p2;

assign tmp_44_fu_1354_p2 = (tmp_43_fu_1348_p2 + ap_const_lv7_4);

assign tmp_45_fu_1450_p3 = {{j_4_reg_629}, {ap_const_lv2_0}};

assign tmp_46_cast_fu_1464_p1 = $signed(tmp_46_fu_1458_p2);

assign tmp_46_fu_1458_p2 = (tmp_45_fu_1450_p3 - j_4_cast4_cast_fu_1446_p1);

assign tmp_47_fu_1554_p3 = {{j_3_1_reg_653}, {ap_const_lv2_0}};

assign tmp_48_fu_1562_p2 = (tmp_47_fu_1554_p3 - j_3_1_cast2_cast_fu_1550_p1);

assign tmp_49_cast_fu_1574_p1 = $signed(tmp_49_fu_1568_p2);

assign tmp_49_fu_1568_p2 = (tmp_48_fu_1562_p2 + ap_const_lv5_1);

assign tmp_50_fu_1675_p3 = {{j_3_2_reg_677}, {ap_const_lv2_0}};

assign tmp_51_fu_1683_p2 = (tmp_50_fu_1675_p3 - j_3_2_cast1_cast_fu_1671_p1);

assign tmp_52_cast_fu_1695_p1 = $signed(tmp_52_fu_1689_p2);

assign tmp_52_fu_1689_p2 = (tmp_51_fu_1683_p2 + ap_const_lv5_2);

assign tmp_53_fu_1041_p4 = {{values_hidden_layer_5_reg_520[ap_const_lv32_F : ap_const_lv32_A]}};

assign tmp_54_fu_1079_p1 = values_hidden_layer_q0[12:0];

assign tmp_55_fu_1155_p4 = {{values_hidden_layer_8_reg_544[ap_const_lv32_F : ap_const_lv32_A]}};

assign tmp_56_fu_1193_p1 = values_hidden_layer_q0[12:0];

assign tmp_57_fu_1269_p4 = {{values_hidden_layer_7_reg_568[ap_const_lv32_F : ap_const_lv32_A]}};

assign tmp_58_fu_1307_p1 = values_hidden_layer_q0[12:0];

assign tmp_59_fu_1383_p4 = {{values_hidden_layer_1_reg_592[ap_const_lv32_F : ap_const_lv32_A]}};

assign tmp_5_1_fu_1074_p2 = (values_hidden_layer_5_reg_520 + tmp_4_1_reg_1998);

assign tmp_5_2_fu_1188_p2 = (values_hidden_layer_8_reg_544 + tmp_4_2_reg_2039);

assign tmp_5_3_fu_1302_p2 = (values_hidden_layer_7_reg_568 + tmp_4_3_reg_2080);

assign tmp_5_4_fu_1416_p2 = (values_hidden_layer_1_reg_592 + tmp_4_4_reg_2121);

assign tmp_5_fu_960_p2 = (values_hidden_layer_2_reg_496 + tmp_4_reg_1957);

assign tmp_60_fu_1421_p1 = values_hidden_layer_q0[12:0];

assign tmp_61_fu_1487_p4 = {{values_output_layer_2_reg_616[ap_const_lv32_F : ap_const_lv32_A]}};

assign tmp_62_fu_1525_p1 = values_output_layer_q0[12:0];

assign tmp_63_fu_1597_p4 = {{values_output_layer_5_reg_640[ap_const_lv32_F : ap_const_lv32_A]}};

assign tmp_64_fu_1635_p1 = values_output_layer_q0[12:0];

assign tmp_65_fu_1718_p4 = {{values_output_layer_8_reg_664[ap_const_lv32_F : ap_const_lv32_A]}};

assign tmp_66_fu_1756_p1 = values_output_layer_q0[12:0];

assign tmp_6_fu_795_p2 = (tmp_3_fu_787_p3 - i_1_cast_cast_fu_783_p1);

assign tmp_8_1_fu_1591_p2 = (($signed(values_output_layer_5_reg_640) < $signed(16'b1111110000000000)) ? 1'b1 : 1'b0);

assign tmp_8_2_fu_1712_p2 = (($signed(values_output_layer_8_reg_664) < $signed(16'b1111110000000000)) ? 1'b1 : 1'b0);

assign tmp_data_1_fu_1797_p1 = tmp_data_fu_1789_p3;

assign tmp_data_fu_1789_p3 = ((tmp_20_fu_1784_p2[0:0] === 1'b1) ? prediction_write_out_fu_1776_p3 : ap_const_lv2_1);

assign tmp_s_fu_722_p3 = {{i_reg_430}, {ap_const_lv2_0}};

assign weights_HO_d0 = S_AXIS_V_data_0_data_out[15:0];

assign weights_IH_d0 = S_AXIS_V_data_0_data_out[15:0];

always @ (posedge ap_clk) begin
    i_2_cast_reg_1918[31:4] <= 28'b0000000000000000000000000000;
end

endmodule //AXISEnhanced
