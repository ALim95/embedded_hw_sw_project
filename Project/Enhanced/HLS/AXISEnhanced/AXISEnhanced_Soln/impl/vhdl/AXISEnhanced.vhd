-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AXISEnhanced is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    S_AXIS_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    S_AXIS_TVALID : IN STD_LOGIC;
    S_AXIS_TREADY : OUT STD_LOGIC;
    S_AXIS_TLAST : IN STD_LOGIC;
    M_AXIS_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    M_AXIS_TVALID : OUT STD_LOGIC;
    M_AXIS_TREADY : IN STD_LOGIC;
    M_AXIS_TLAST : OUT STD_LOGIC );
end;


architecture behav of AXISEnhanced is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "AXISEnhanced,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.148000,HLS_SYN_LAT=14240,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=8,HLS_SYN_FF=846,HLS_SYN_LUT=1066}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (76 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (76 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (76 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (76 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (76 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (76 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (76 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (76 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (76 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (76 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (76 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_3039 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011000000111001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_3FF : STD_LOGIC_VECTOR (15 downto 0) := "0000001111111111";
    constant ap_const_lv16_FC00 : STD_LOGIC_VECTOR (15 downto 0) := "1111110000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv13_400 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal S_AXIS_V_data_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal S_AXIS_V_data_0_vld_in : STD_LOGIC;
    signal S_AXIS_V_data_0_vld_out : STD_LOGIC;
    signal S_AXIS_V_data_0_ack_in : STD_LOGIC;
    signal S_AXIS_V_data_0_ack_out : STD_LOGIC;
    signal S_AXIS_V_data_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal S_AXIS_V_data_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal S_AXIS_V_data_0_sel_rd : STD_LOGIC := '0';
    signal S_AXIS_V_data_0_sel_wr : STD_LOGIC := '0';
    signal S_AXIS_V_data_0_sel : STD_LOGIC;
    signal S_AXIS_V_data_0_load_A : STD_LOGIC;
    signal S_AXIS_V_data_0_load_B : STD_LOGIC;
    signal S_AXIS_V_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal S_AXIS_V_data_0_state_cmp_full : STD_LOGIC;
    signal S_AXIS_V_last_0_vld_in : STD_LOGIC;
    signal S_AXIS_V_last_0_ack_out : STD_LOGIC;
    signal S_AXIS_V_last_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal M_AXIS_V_data_1_data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal M_AXIS_V_data_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal M_AXIS_V_data_1_vld_in : STD_LOGIC;
    signal M_AXIS_V_data_1_vld_out : STD_LOGIC;
    signal M_AXIS_V_data_1_ack_in : STD_LOGIC;
    signal M_AXIS_V_data_1_ack_out : STD_LOGIC;
    signal M_AXIS_V_data_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal M_AXIS_V_data_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal M_AXIS_V_data_1_sel_rd : STD_LOGIC := '0';
    signal M_AXIS_V_data_1_sel_wr : STD_LOGIC := '0';
    signal M_AXIS_V_data_1_sel : STD_LOGIC;
    signal M_AXIS_V_data_1_load_A : STD_LOGIC;
    signal M_AXIS_V_data_1_load_B : STD_LOGIC;
    signal M_AXIS_V_data_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal M_AXIS_V_data_1_state_cmp_full : STD_LOGIC;
    signal M_AXIS_V_last_1_data_out : STD_LOGIC;
    signal M_AXIS_V_last_1_vld_in : STD_LOGIC;
    signal M_AXIS_V_last_1_vld_out : STD_LOGIC;
    signal M_AXIS_V_last_1_ack_in : STD_LOGIC;
    signal M_AXIS_V_last_1_ack_out : STD_LOGIC;
    signal M_AXIS_V_last_1_sel_rd : STD_LOGIC := '0';
    signal M_AXIS_V_last_1_sel : STD_LOGIC;
    signal M_AXIS_V_last_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal weights_IH_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_IH_ce0 : STD_LOGIC;
    signal weights_IH_we0 : STD_LOGIC;
    signal weights_IH_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal weights_IH_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal weights_HO_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal weights_HO_ce0 : STD_LOGIC;
    signal weights_HO_we0 : STD_LOGIC;
    signal weights_HO_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal weights_HO_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal test_data_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal test_data_ce0 : STD_LOGIC;
    signal test_data_we0 : STD_LOGIC;
    signal test_data_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal test_data_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sigmoid_arr_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sigmoid_arr_ce0 : STD_LOGIC;
    signal sigmoid_arr_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal values_hidden_layer_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal values_hidden_layer_ce0 : STD_LOGIC;
    signal values_hidden_layer_we0 : STD_LOGIC;
    signal values_hidden_layer_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal values_hidden_layer_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal values_output_layer_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal values_output_layer_ce0 : STD_LOGIC;
    signal values_output_layer_we0 : STD_LOGIC;
    signal values_output_layer_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal values_output_layer_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal S_AXIS_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal M_AXIS_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond2_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state77 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal reg_692 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal reg_696 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_700 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal reg_704 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_708 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal tmp_1_fu_734_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_reg_1858 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_3_fu_746_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_1866 : STD_LOGIC_VECTOR (3 downto 0);
    signal weights_IH_addr_reg_1871 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_2_fu_772_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_2_reg_1879 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_795_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_reg_1884 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_fu_807_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_reg_1892 : STD_LOGIC_VECTOR (2 downto 0);
    signal weights_HO_addr_reg_1897 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j_3_fu_833_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_3_reg_1905 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_1_fu_850_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_1_reg_1913 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal exitcond4_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_cast_fu_856_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_cast_reg_1918 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_5_fu_866_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_reg_1926 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal j_6_fu_915_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_6_reg_1939 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond9_fu_909_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_921_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_1949 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_937_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_1953 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1957 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_5_fu_960_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal j_6_1_fu_1029_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_6_1_reg_1980 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond9_1_fu_1023_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_1_fu_1035_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_1_reg_1990 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_fu_1051_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_1994 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_1_reg_1998 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_5_1_fu_1074_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal j_6_2_fu_1143_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_6_2_reg_2021 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond9_2_fu_1137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_2_fu_1149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_2_reg_2031 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_fu_1165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_2035 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_2_reg_2039 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal tmp_5_2_fu_1188_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal j_6_3_fu_1257_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_6_3_reg_2062 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond9_3_fu_1251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_3_fu_1263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_3_reg_2072 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp3_fu_1279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp3_reg_2076 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_3_reg_2080 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal tmp_5_3_fu_1302_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal j_6_4_fu_1371_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_6_4_reg_2103 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond9_4_fu_1365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_4_fu_1377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_4_reg_2113 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp4_fu_1393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp4_reg_2117 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_4_reg_2121 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal tmp_5_4_fu_1416_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal j_7_fu_1475_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_7_reg_2144 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_fu_1469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_1481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_2154 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp5_fu_1497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp5_reg_2158 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_2162 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal tmp_22_fu_1520_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal tmp_24_fu_1529_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_24_reg_2172 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal j_7_1_fu_1585_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_7_1_reg_2190 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_1_fu_1579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_1_fu_1591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_1_reg_2200 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp6_fu_1607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp6_reg_2204 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_1_reg_2208 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal tmp_11_1_fu_1630_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal tmp_17_1_fu_1639_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_17_1_reg_2218 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal grp_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_1_reg_2228 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal j_7_2_fu_1706_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_7_2_reg_2246 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_2_fu_1700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_2_fu_1712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_2_reg_2256 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp7_fu_1728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp7_reg_2260 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_2_reg_2264 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal tmp_11_2_fu_1751_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal tmp_data_1_fu_1797_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_430 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal exitcond3_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_441 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond1_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_452 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond5_fu_827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_reg_463 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_474 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_reg_485 : STD_LOGIC_VECTOR (3 downto 0);
    signal values_hidden_layer_2_reg_496 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond6_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_s_reg_509 : STD_LOGIC_VECTOR (3 downto 0);
    signal values_hidden_layer_5_reg_520 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal j_2_1_reg_533 : STD_LOGIC_VECTOR (3 downto 0);
    signal values_hidden_layer_8_reg_544 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal j_2_2_reg_557 : STD_LOGIC_VECTOR (3 downto 0);
    signal values_hidden_layer_7_reg_568 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal j_2_3_reg_581 : STD_LOGIC_VECTOR (3 downto 0);
    signal values_hidden_layer_1_reg_592 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal j_2_4_reg_605 : STD_LOGIC_VECTOR (3 downto 0);
    signal values_output_layer_2_reg_616 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal j_4_reg_629 : STD_LOGIC_VECTOR (2 downto 0);
    signal values_output_layer_5_reg_640 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_3_1_reg_653 : STD_LOGIC_VECTOR (2 downto 0);
    signal values_output_layer_8_reg_664 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_3_2_reg_677 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_29_cast_fu_761_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_cast_fu_822_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_cast_fu_904_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast_fu_877_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_cast_fu_975_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_cast_fu_1018_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_1_cast9_fu_985_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_1_cast_fu_1089_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_cast_fu_1132_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_2_cast8_fu_1099_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_2_cast_fu_1203_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_cast_fu_1246_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_3_cast7_fu_1213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_cast_fu_1317_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_cast_fu_1360_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_4_cast6_fu_1327_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_cast_fu_1431_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_cast_fu_1464_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_4_cast4_fu_1441_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_cast_fu_1535_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_cast_fu_1574_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_1_cast2_fu_1545_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_1_cast_fu_1645_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal highest_pred_2_highe_1_fu_1661_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_cast_fu_1695_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_2_cast1_fu_1666_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_2_cast_fu_1766_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_14_fu_980_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_15_1_fu_1094_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal tmp_15_2_fu_1208_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal tmp_15_3_fu_1322_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal tmp_15_4_fu_1436_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal highest_pred_2_fu_1540_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal highest_pred_2_1_fu_1650_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal highest_pred_2_2_fu_1771_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_722_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_cast_cast_fu_718_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_730_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_cast_cast_fu_752_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_fu_756_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_787_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_cast_cast_fu_783_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_cast_cast_fu_813_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_26_fu_817_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_29_fu_886_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_cast_cast_26_fu_882_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_cast_fu_894_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_30_fu_898_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_31_fu_927_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_i_fu_1802_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_32_fu_965_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_13_fu_969_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_33_fu_994_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_1_cast9_cast_fu_990_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl3_cast_fu_1002_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_34_fu_1006_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_35_fu_1012_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_53_fu_1041_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_i1_fu_1809_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_54_fu_1079_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_14_1_fu_1083_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_36_fu_1108_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_2_cast8_cast_fu_1104_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl4_cast_fu_1116_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_37_fu_1120_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_38_fu_1126_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_55_fu_1155_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_i2_fu_1816_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_56_fu_1193_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_14_2_fu_1197_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_39_fu_1222_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_3_cast7_cast_fu_1218_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl5_cast_fu_1230_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_40_fu_1234_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_41_fu_1240_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_57_fu_1269_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_i3_fu_1823_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_58_fu_1307_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_14_3_fu_1311_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_42_fu_1336_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_4_cast6_cast_fu_1332_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl6_cast_fu_1344_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_43_fu_1348_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_44_fu_1354_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_59_fu_1383_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_i4_fu_1830_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_60_fu_1421_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_14_4_fu_1425_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_45_fu_1450_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_4_cast4_cast_fu_1446_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_46_fu_1458_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_61_fu_1487_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_i5_fu_1837_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_62_fu_1525_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_47_fu_1554_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_3_1_cast2_cast_fu_1550_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_48_fu_1562_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_49_fu_1568_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_63_fu_1597_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_i6_fu_1844_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_64_fu_1635_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal highest_pred_2_highe_fu_1655_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_50_fu_1675_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_3_2_cast1_cast_fu_1671_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_51_fu_1683_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_52_fu_1689_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_65_fu_1718_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_i7_fu_1851_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_66_fu_1756_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_17_2_fu_1760_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_20_fu_1784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal prediction_write_out_fu_1776_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_data_fu_1789_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (76 downto 0);

    component AXISEnhanced_mul_hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component AXISEnhanced_weigbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component AXISEnhanced_weigcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component AXISEnhanced_testdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component AXISEnhanced_sigmeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AXISEnhanced_valufYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component AXISEnhanced_valug8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    weights_IH_U : component AXISEnhanced_weigbkb
    generic map (
        DataWidth => 16,
        AddressRange => 65,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_IH_address0,
        ce0 => weights_IH_ce0,
        we0 => weights_IH_we0,
        d0 => weights_IH_d0,
        q0 => weights_IH_q0);

    weights_HO_U : component AXISEnhanced_weigcud
    generic map (
        DataWidth => 16,
        AddressRange => 15,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_HO_address0,
        ce0 => weights_HO_ce0,
        we0 => weights_HO_we0,
        d0 => weights_HO_d0,
        q0 => weights_HO_q0);

    test_data_U : component AXISEnhanced_testdEe
    generic map (
        DataWidth => 16,
        AddressRange => 13,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => test_data_address0,
        ce0 => test_data_ce0,
        we0 => test_data_we0,
        d0 => test_data_d0,
        q0 => test_data_q0);

    sigmoid_arr_U : component AXISEnhanced_sigmeOg
    generic map (
        DataWidth => 8,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sigmoid_arr_address0,
        ce0 => sigmoid_arr_ce0,
        q0 => sigmoid_arr_q0);

    values_hidden_layer_U : component AXISEnhanced_valufYi
    generic map (
        DataWidth => 16,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => values_hidden_layer_address0,
        ce0 => values_hidden_layer_ce0,
        we0 => values_hidden_layer_we0,
        d0 => values_hidden_layer_d0,
        q0 => values_hidden_layer_q0);

    values_output_layer_U : component AXISEnhanced_valug8j
    generic map (
        DataWidth => 16,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => values_output_layer_address0,
        ce0 => values_output_layer_ce0,
        we0 => values_output_layer_we0,
        d0 => values_output_layer_d0,
        q0 => values_output_layer_q0);

    AXISEnhanced_mul_hbi_U0 : component AXISEnhanced_mul_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => reg_692,
        din1 => reg_696,
        dout => tmp_2_i_fu_1802_p2);

    AXISEnhanced_mul_hbi_U1 : component AXISEnhanced_mul_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => reg_692,
        din1 => reg_696,
        dout => tmp_2_i1_fu_1809_p2);

    AXISEnhanced_mul_hbi_U2 : component AXISEnhanced_mul_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => reg_692,
        din1 => reg_696,
        dout => tmp_2_i2_fu_1816_p2);

    AXISEnhanced_mul_hbi_U3 : component AXISEnhanced_mul_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => reg_692,
        din1 => reg_696,
        dout => tmp_2_i3_fu_1823_p2);

    AXISEnhanced_mul_hbi_U4 : component AXISEnhanced_mul_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => reg_692,
        din1 => reg_696,
        dout => tmp_2_i4_fu_1830_p2);

    AXISEnhanced_mul_hbi_U5 : component AXISEnhanced_mul_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => reg_700,
        din1 => reg_704,
        dout => tmp_2_i5_fu_1837_p2);

    AXISEnhanced_mul_hbi_U6 : component AXISEnhanced_mul_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => reg_700,
        din1 => reg_704,
        dout => tmp_2_i6_fu_1844_p2);

    AXISEnhanced_mul_hbi_U7 : component AXISEnhanced_mul_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => reg_700,
        din1 => reg_704,
        dout => tmp_2_i7_fu_1851_p2);





    M_AXIS_V_data_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_data_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = M_AXIS_V_data_1_ack_out) and (ap_const_logic_1 = M_AXIS_V_data_1_vld_out))) then 
                                        M_AXIS_V_data_1_sel_rd <= not(M_AXIS_V_data_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_data_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_data_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = M_AXIS_V_data_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_data_1_ack_in))) then 
                                        M_AXIS_V_data_1_sel_wr <= not(M_AXIS_V_data_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_data_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_data_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = M_AXIS_V_data_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_data_1_ack_out) and (ap_const_lv2_3 = M_AXIS_V_data_1_state)) or ((ap_const_logic_0 = M_AXIS_V_data_1_vld_in) and (ap_const_lv2_2 = M_AXIS_V_data_1_state)))) then 
                    M_AXIS_V_data_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = M_AXIS_V_data_1_vld_in) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_out) and (ap_const_lv2_3 = M_AXIS_V_data_1_state)) or ((ap_const_logic_0 = M_AXIS_V_data_1_ack_out) and (ap_const_lv2_1 = M_AXIS_V_data_1_state)))) then 
                    M_AXIS_V_data_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = M_AXIS_V_data_1_vld_in) and (ap_const_lv2_2 = M_AXIS_V_data_1_state)) or ((ap_const_logic_1 = M_AXIS_V_data_1_ack_out) and (ap_const_lv2_1 = M_AXIS_V_data_1_state)) or ((ap_const_lv2_3 = M_AXIS_V_data_1_state) and not(((ap_const_logic_1 = M_AXIS_V_data_1_vld_in) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_out))) and not(((ap_const_logic_0 = M_AXIS_V_data_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_data_1_ack_out)))))) then 
                    M_AXIS_V_data_1_state <= ap_const_lv2_3;
                else 
                    M_AXIS_V_data_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_last_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_last_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = M_AXIS_V_last_1_ack_out) and (ap_const_logic_1 = M_AXIS_V_last_1_vld_out))) then 
                                        M_AXIS_V_last_1_sel_rd <= not(M_AXIS_V_last_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_last_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_last_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = M_AXIS_V_last_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_last_1_ack_out) and (ap_const_lv2_3 = M_AXIS_V_last_1_state)) or ((ap_const_logic_0 = M_AXIS_V_last_1_vld_in) and (ap_const_lv2_2 = M_AXIS_V_last_1_state)))) then 
                    M_AXIS_V_last_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = M_AXIS_V_last_1_vld_in) and (ap_const_logic_0 = M_AXIS_V_last_1_ack_out) and (ap_const_lv2_3 = M_AXIS_V_last_1_state)) or ((ap_const_logic_0 = M_AXIS_V_last_1_ack_out) and (ap_const_lv2_1 = M_AXIS_V_last_1_state)))) then 
                    M_AXIS_V_last_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = M_AXIS_V_last_1_vld_in) and (ap_const_lv2_2 = M_AXIS_V_last_1_state)) or ((ap_const_logic_1 = M_AXIS_V_last_1_ack_out) and (ap_const_lv2_1 = M_AXIS_V_last_1_state)) or ((ap_const_lv2_3 = M_AXIS_V_last_1_state) and not(((ap_const_logic_1 = M_AXIS_V_last_1_vld_in) and (ap_const_logic_0 = M_AXIS_V_last_1_ack_out))) and not(((ap_const_logic_0 = M_AXIS_V_last_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_last_1_ack_out)))))) then 
                    M_AXIS_V_last_1_state <= ap_const_lv2_3;
                else 
                    M_AXIS_V_last_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = S_AXIS_V_data_0_ack_out) and (ap_const_logic_1 = S_AXIS_V_data_0_vld_out))) then 
                                        S_AXIS_V_data_0_sel_rd <= not(S_AXIS_V_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = S_AXIS_V_data_0_vld_in) and (ap_const_logic_1 = S_AXIS_V_data_0_ack_in))) then 
                                        S_AXIS_V_data_0_sel_wr <= not(S_AXIS_V_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_data_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = S_AXIS_V_data_0_vld_in) and (ap_const_logic_1 = S_AXIS_V_data_0_ack_out) and (S_AXIS_V_data_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = S_AXIS_V_data_0_vld_in) and (S_AXIS_V_data_0_state = ap_const_lv2_2)))) then 
                    S_AXIS_V_data_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = S_AXIS_V_data_0_vld_in) and (ap_const_logic_0 = S_AXIS_V_data_0_ack_out) and (S_AXIS_V_data_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = S_AXIS_V_data_0_ack_out) and (S_AXIS_V_data_0_state = ap_const_lv2_1)))) then 
                    S_AXIS_V_data_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = S_AXIS_V_data_0_vld_in) and (S_AXIS_V_data_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = S_AXIS_V_data_0_ack_out) and (S_AXIS_V_data_0_state = ap_const_lv2_1)) or ((S_AXIS_V_data_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = S_AXIS_V_data_0_vld_in) and (ap_const_logic_0 = S_AXIS_V_data_0_ack_out))) and not(((ap_const_logic_0 = S_AXIS_V_data_0_vld_in) and (ap_const_logic_1 = S_AXIS_V_data_0_ack_out)))))) then 
                    S_AXIS_V_data_0_state <= ap_const_lv2_3;
                else 
                    S_AXIS_V_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_last_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_last_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = S_AXIS_V_last_0_vld_in) and (ap_const_logic_1 = S_AXIS_V_last_0_ack_out) and (ap_const_lv2_3 = S_AXIS_V_last_0_state)) or ((ap_const_logic_0 = S_AXIS_V_last_0_vld_in) and (ap_const_lv2_2 = S_AXIS_V_last_0_state)))) then 
                    S_AXIS_V_last_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = S_AXIS_V_last_0_vld_in) and (ap_const_logic_0 = S_AXIS_V_last_0_ack_out) and (ap_const_lv2_3 = S_AXIS_V_last_0_state)) or ((ap_const_logic_0 = S_AXIS_V_last_0_ack_out) and (ap_const_lv2_1 = S_AXIS_V_last_0_state)))) then 
                    S_AXIS_V_last_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = S_AXIS_V_last_0_vld_in) and (ap_const_lv2_2 = S_AXIS_V_last_0_state)) or ((ap_const_logic_1 = S_AXIS_V_last_0_ack_out) and (ap_const_lv2_1 = S_AXIS_V_last_0_state)) or ((ap_const_lv2_3 = S_AXIS_V_last_0_state) and not(((ap_const_logic_1 = S_AXIS_V_last_0_vld_in) and (ap_const_logic_0 = S_AXIS_V_last_0_ack_out))) and not(((ap_const_logic_0 = S_AXIS_V_last_0_vld_in) and (ap_const_logic_1 = S_AXIS_V_last_0_ack_out)))))) then 
                    S_AXIS_V_last_0_state <= ap_const_lv2_3;
                else 
                    S_AXIS_V_last_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_452_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = exitcond1_fu_740_p2)))) then 
                i_1_reg_452 <= ap_const_lv3_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state6) and not((ap_const_lv1_0 = exitcond5_fu_827_p2)))) then 
                i_1_reg_452 <= i_4_reg_1892;
            end if; 
        end if;
    end process;

    i_2_reg_485_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state11) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0)))) then 
                i_2_reg_485 <= i_5_reg_1926;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond4_fu_844_p2) and not(((M_AXIS_V_data_1_ack_in = ap_const_logic_0) or (M_AXIS_V_last_1_ack_in = ap_const_logic_0))))) then 
                i_2_reg_485 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = exitcond3_fu_766_p2)))) then 
                i_reg_430 <= i_3_reg_1866;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state1))) then 
                i_reg_430 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_1_reg_463_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0)))) then 
                j_1_reg_463 <= j_3_reg_1905;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond2_fu_801_p2) and not((not((ap_const_lv1_0 = exitcond2_fu_801_p2)) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_in))))) then 
                j_1_reg_463 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_2_1_reg_533_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
                j_2_1_reg_533 <= j_6_1_reg_1980;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state19))) then 
                j_2_1_reg_533 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_2_2_reg_557_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state31))) then 
                j_2_2_reg_557 <= j_6_2_reg_2021;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state27))) then 
                j_2_2_reg_557 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_2_3_reg_581_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state39))) then 
                j_2_3_reg_581 <= j_6_3_reg_2062;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state35))) then 
                j_2_3_reg_581 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_2_4_reg_605_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state47))) then 
                j_2_4_reg_605 <= j_6_4_reg_2103;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state43))) then 
                j_2_4_reg_605 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_3_1_reg_653_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state63))) then 
                j_3_1_reg_653 <= j_7_1_reg_2190;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state59))) then 
                j_3_1_reg_653 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_3_2_reg_677_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state72))) then 
                j_3_2_reg_677 <= j_7_2_reg_2246;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state68))) then 
                j_3_2_reg_677 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_4_reg_629_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state55))) then 
                j_4_reg_629 <= j_7_reg_2144;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state51))) then 
                j_4_reg_629 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_reg_441_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0)))) then 
                j_reg_441 <= j_2_reg_1879;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond1_fu_740_p2))) then 
                j_reg_441 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_s_reg_509_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
                j_s_reg_509 <= j_6_reg_1939;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state10) and not((ap_const_lv1_0 = exitcond6_fu_860_p2)))) then 
                j_s_reg_509 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_reg_474_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_const_logic_0 = M_AXIS_V_data_1_ack_in))) then
                if ((ap_const_lv1_1 = ap_CS_fsm_state77)) then 
                    k_reg_474 <= k_1_reg_1913;
                elsif ((ap_const_lv1_1 = ap_CS_fsm_state8)) then 
                    k_reg_474 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    values_hidden_layer_1_reg_592_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state47))) then 
                values_hidden_layer_1_reg_592 <= tmp_5_4_fu_1416_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state43))) then 
                values_hidden_layer_1_reg_592 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    values_hidden_layer_2_reg_496_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
                values_hidden_layer_2_reg_496 <= tmp_5_fu_960_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state10) and not((ap_const_lv1_0 = exitcond6_fu_860_p2)))) then 
                values_hidden_layer_2_reg_496 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    values_hidden_layer_5_reg_520_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
                values_hidden_layer_5_reg_520 <= tmp_5_1_fu_1074_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state19))) then 
                values_hidden_layer_5_reg_520 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    values_hidden_layer_7_reg_568_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state39))) then 
                values_hidden_layer_7_reg_568 <= tmp_5_3_fu_1302_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state35))) then 
                values_hidden_layer_7_reg_568 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    values_hidden_layer_8_reg_544_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state31))) then 
                values_hidden_layer_8_reg_544 <= tmp_5_2_fu_1188_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state27))) then 
                values_hidden_layer_8_reg_544 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    values_output_layer_2_reg_616_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state55))) then 
                values_output_layer_2_reg_616 <= tmp_22_fu_1520_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state51))) then 
                values_output_layer_2_reg_616 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    values_output_layer_5_reg_640_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state63))) then 
                values_output_layer_5_reg_640 <= tmp_11_1_fu_1630_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state59))) then 
                values_output_layer_5_reg_640 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    values_output_layer_8_reg_664_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state72))) then 
                values_output_layer_8_reg_664 <= tmp_11_2_fu_1751_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state68))) then 
                values_output_layer_8_reg_664 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = M_AXIS_V_data_1_load_A)) then
                M_AXIS_V_data_1_payload_A <= M_AXIS_V_data_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = M_AXIS_V_data_1_load_B)) then
                M_AXIS_V_data_1_payload_B <= M_AXIS_V_data_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = S_AXIS_V_data_0_load_A)) then
                S_AXIS_V_data_0_payload_A <= S_AXIS_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = S_AXIS_V_data_0_load_B)) then
                S_AXIS_V_data_0_payload_B <= S_AXIS_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then
                    i_2_cast_reg_1918(3 downto 0) <= i_2_cast_fu_856_p1(3 downto 0);
                i_5_reg_1926 <= i_5_fu_866_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                i_3_reg_1866 <= i_3_fu_746_p2;
                tmp_1_reg_1858 <= tmp_1_fu_734_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((not((ap_const_lv1_0 = exitcond2_fu_801_p2)) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_in))))) then
                i_4_reg_1892 <= i_4_fu_807_p2;
                tmp_6_reg_1884 <= tmp_6_fu_795_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state20) and not((ap_const_lv1_0 = exitcond9_1_fu_1023_p2)) and (ap_const_lv1_0 = tmp_2_1_fu_1035_p2))) then
                icmp1_reg_1994 <= icmp1_fu_1051_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state28) and not((ap_const_lv1_0 = exitcond9_2_fu_1137_p2)) and (ap_const_lv1_0 = tmp_2_2_fu_1149_p2))) then
                icmp2_reg_2035 <= icmp2_fu_1165_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state36) and not((ap_const_lv1_0 = exitcond9_3_fu_1251_p2)) and (ap_const_lv1_0 = tmp_2_3_fu_1263_p2))) then
                icmp3_reg_2076 <= icmp3_fu_1279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state44) and not((ap_const_lv1_0 = exitcond9_4_fu_1365_p2)) and (ap_const_lv1_0 = tmp_2_4_fu_1377_p2))) then
                icmp4_reg_2117 <= icmp4_fu_1393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state52) and not((ap_const_lv1_0 = exitcond_fu_1469_p2)) and (ap_const_lv1_0 = tmp_17_fu_1481_p2))) then
                icmp5_reg_2158 <= icmp5_fu_1497_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state60) and not((ap_const_lv1_0 = exitcond_1_fu_1579_p2)) and (ap_const_lv1_0 = tmp_8_1_fu_1591_p2))) then
                icmp6_reg_2204 <= icmp6_fu_1607_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state69) and not((ap_const_lv1_0 = exitcond_2_fu_1700_p2)) and (ap_const_lv1_0 = tmp_8_2_fu_1712_p2))) then
                icmp7_reg_2260 <= icmp7_fu_1728_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state12) and not((ap_const_lv1_0 = exitcond9_fu_909_p2)) and (ap_const_lv1_0 = tmp_2_fu_921_p2))) then
                icmp_reg_1953 <= icmp_fu_937_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                j_2_reg_1879 <= j_2_fu_772_p2;
                weights_IH_addr_reg_1871 <= tmp_29_cast_fu_761_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then
                j_3_reg_1905 <= j_3_fu_833_p2;
                weights_HO_addr_reg_1897 <= tmp_30_cast_fu_822_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state20))) then
                j_6_1_reg_1980 <= j_6_1_fu_1029_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state28))) then
                j_6_2_reg_2021 <= j_6_2_fu_1143_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state36))) then
                j_6_3_reg_2062 <= j_6_3_fu_1257_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state44))) then
                j_6_4_reg_2103 <= j_6_4_fu_1371_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then
                j_6_reg_1939 <= j_6_fu_915_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state60))) then
                j_7_1_reg_2190 <= j_7_1_fu_1585_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state69))) then
                j_7_2_reg_2246 <= j_7_2_fu_1706_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state52))) then
                j_7_reg_2144 <= j_7_fu_1475_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not(((M_AXIS_V_data_1_ack_in = ap_const_logic_0) or (M_AXIS_V_last_1_ack_in = ap_const_logic_0))))) then
                k_1_reg_1913 <= k_1_fu_850_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state21)) or ((ap_const_lv1_1 = ap_CS_fsm_state29)) or ((ap_const_lv1_1 = ap_CS_fsm_state37)) or ((ap_const_lv1_1 = ap_CS_fsm_state45)))) then
                reg_692 <= test_data_q0;
                reg_696 <= weights_IH_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state53)) or ((ap_const_lv1_1 = ap_CS_fsm_state61)) or ((ap_const_lv1_1 = ap_CS_fsm_state70)))) then
                reg_700 <= values_hidden_layer_q0;
                reg_704 <= weights_HO_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state59)) or ((ap_const_lv1_1 = ap_CS_fsm_state68)))) then
                reg_708 <= sigmoid_arr_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state62))) then
                tmp_10_1_reg_2208 <= tmp_2_i6_fu_1844_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state71))) then
                tmp_10_2_reg_2264 <= tmp_2_i7_fu_1851_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state66))) then
                tmp_17_1_reg_2218 <= tmp_17_1_fu_1639_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state52) and not((ap_const_lv1_0 = exitcond_fu_1469_p2)))) then
                tmp_17_reg_2154 <= tmp_17_fu_1481_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state67))) then
                tmp_18_1_reg_2228 <= grp_fu_712_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state54))) then
                tmp_21_reg_2162 <= tmp_2_i5_fu_1837_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state58))) then
                tmp_24_reg_2172 <= tmp_24_fu_1529_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state20) and not((ap_const_lv1_0 = exitcond9_1_fu_1023_p2)))) then
                tmp_2_1_reg_1990 <= tmp_2_1_fu_1035_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state28) and not((ap_const_lv1_0 = exitcond9_2_fu_1137_p2)))) then
                tmp_2_2_reg_2031 <= tmp_2_2_fu_1149_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state36) and not((ap_const_lv1_0 = exitcond9_3_fu_1251_p2)))) then
                tmp_2_3_reg_2072 <= tmp_2_3_fu_1263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state44) and not((ap_const_lv1_0 = exitcond9_4_fu_1365_p2)))) then
                tmp_2_4_reg_2113 <= tmp_2_4_fu_1377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state12) and not((ap_const_lv1_0 = exitcond9_fu_909_p2)))) then
                tmp_2_reg_1949 <= tmp_2_fu_921_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state22))) then
                tmp_4_1_reg_1998 <= tmp_2_i1_fu_1809_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state30))) then
                tmp_4_2_reg_2039 <= tmp_2_i2_fu_1816_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state38))) then
                tmp_4_3_reg_2080 <= tmp_2_i3_fu_1823_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state46))) then
                tmp_4_4_reg_2121 <= tmp_2_i4_fu_1830_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state14))) then
                tmp_4_reg_1957 <= tmp_2_i_fu_1802_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state60) and not((ap_const_lv1_0 = exitcond_1_fu_1579_p2)))) then
                tmp_8_1_reg_2200 <= tmp_8_1_fu_1591_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state69) and not((ap_const_lv1_0 = exitcond_2_fu_1700_p2)))) then
                tmp_8_2_reg_2256 <= tmp_8_2_fu_1712_p2;
            end if;
        end if;
    end process;
    i_2_cast_reg_1918(31 downto 4) <= "0000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (S_AXIS_V_data_0_vld_out, M_AXIS_V_data_1_ack_in, M_AXIS_V_last_1_ack_in, ap_CS_fsm, exitcond2_fu_801_p2, exitcond4_fu_844_p2, exitcond9_fu_909_p2, exitcond9_1_fu_1023_p2, exitcond9_2_fu_1137_p2, exitcond9_3_fu_1251_p2, exitcond9_4_fu_1365_p2, exitcond_fu_1469_p2, exitcond_1_fu_1579_p2, exitcond_2_fu_1700_p2, exitcond3_fu_766_p2, exitcond1_fu_740_p2, exitcond5_fu_827_p2, exitcond6_fu_860_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_740_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_766_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_lv1_0 = exitcond2_fu_801_p2) and not((not((ap_const_lv1_0 = exitcond2_fu_801_p2)) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_in))))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif ((not((ap_const_lv1_0 = exitcond2_fu_801_p2)) and not((not((ap_const_lv1_0 = exitcond2_fu_801_p2)) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_in))))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (not((ap_const_lv1_0 = exitcond5_fu_827_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (not((ap_const_logic_0 = M_AXIS_V_data_1_ack_in))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not((ap_const_lv1_0 = exitcond4_fu_844_p2)) and not(((M_AXIS_V_data_1_ack_in = ap_const_logic_0) or (M_AXIS_V_last_1_ack_in = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_lv1_0 = exitcond4_fu_844_p2) and not(((M_AXIS_V_data_1_ack_in = ap_const_logic_0) or (M_AXIS_V_last_1_ack_in = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (not((ap_const_lv1_0 = exitcond6_fu_860_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (not((ap_const_lv1_0 = exitcond9_fu_909_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (not((ap_const_lv1_0 = exitcond9_1_fu_1023_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (not((ap_const_lv1_0 = exitcond9_2_fu_1137_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (not((ap_const_lv1_0 = exitcond9_3_fu_1251_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (not((ap_const_lv1_0 = exitcond9_4_fu_1365_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                if (not((ap_const_lv1_0 = exitcond_fu_1469_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                if (not((ap_const_lv1_0 = exitcond_1_fu_1579_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                if (not((ap_const_lv1_0 = exitcond_2_fu_1700_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                if (not((ap_const_logic_0 = M_AXIS_V_data_1_ack_in))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state77 => 
                if (not((ap_const_logic_0 = M_AXIS_V_data_1_ack_in))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state77;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    M_AXIS_TDATA <= M_AXIS_V_data_1_data_out;

    M_AXIS_TDATA_blk_n_assign_proc : process(M_AXIS_V_data_1_state, ap_CS_fsm_state5, exitcond2_fu_801_p2, ap_CS_fsm_state8, ap_CS_fsm_state76, ap_CS_fsm_state77)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond2_fu_801_p2))) or ((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state76)) or ((ap_const_lv1_1 = ap_CS_fsm_state77)))) then 
            M_AXIS_TDATA_blk_n <= M_AXIS_V_data_1_state(1);
        else 
            M_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    M_AXIS_TLAST <= M_AXIS_V_last_1_data_out;
    M_AXIS_TVALID <= M_AXIS_V_last_1_state(0);
    M_AXIS_V_data_1_ack_in <= M_AXIS_V_data_1_state(1);
    M_AXIS_V_data_1_ack_out <= M_AXIS_TREADY;

    M_AXIS_V_data_1_data_in_assign_proc : process(ap_CS_fsm_state5, exitcond2_fu_801_p2, ap_CS_fsm_state76, tmp_data_1_fu_1797_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state76))) then 
            M_AXIS_V_data_1_data_in <= tmp_data_1_fu_1797_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond2_fu_801_p2)))) then 
            M_AXIS_V_data_1_data_in <= ap_const_lv32_3039;
        else 
            M_AXIS_V_data_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    M_AXIS_V_data_1_data_out_assign_proc : process(M_AXIS_V_data_1_payload_A, M_AXIS_V_data_1_payload_B, M_AXIS_V_data_1_sel)
    begin
        if ((ap_const_logic_1 = M_AXIS_V_data_1_sel)) then 
            M_AXIS_V_data_1_data_out <= M_AXIS_V_data_1_payload_B;
        else 
            M_AXIS_V_data_1_data_out <= M_AXIS_V_data_1_payload_A;
        end if; 
    end process;

    M_AXIS_V_data_1_load_A <= (M_AXIS_V_data_1_state_cmp_full and not(M_AXIS_V_data_1_sel_wr));
    M_AXIS_V_data_1_load_B <= (M_AXIS_V_data_1_sel_wr and M_AXIS_V_data_1_state_cmp_full);
    M_AXIS_V_data_1_sel <= M_AXIS_V_data_1_sel_rd;
    M_AXIS_V_data_1_state_cmp_full <= '0' when (M_AXIS_V_data_1_state = ap_const_lv2_1) else '1';

    M_AXIS_V_data_1_vld_in_assign_proc : process(M_AXIS_V_data_1_ack_in, ap_CS_fsm_state5, exitcond2_fu_801_p2, ap_CS_fsm_state76)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state76) and not((ap_const_logic_0 = M_AXIS_V_data_1_ack_in))) or ((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond2_fu_801_p2)) and not((not((ap_const_lv1_0 = exitcond2_fu_801_p2)) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_in)))))) then 
            M_AXIS_V_data_1_vld_in <= ap_const_logic_1;
        else 
            M_AXIS_V_data_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    M_AXIS_V_data_1_vld_out <= M_AXIS_V_data_1_state(0);
    M_AXIS_V_last_1_ack_in <= M_AXIS_V_last_1_state(1);
    M_AXIS_V_last_1_ack_out <= M_AXIS_TREADY;
    M_AXIS_V_last_1_data_out <= ap_const_logic_1;
    M_AXIS_V_last_1_sel <= M_AXIS_V_last_1_sel_rd;

    M_AXIS_V_last_1_vld_in_assign_proc : process(M_AXIS_V_data_1_ack_in, ap_CS_fsm_state5, exitcond2_fu_801_p2, ap_CS_fsm_state76)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state76) and not((ap_const_logic_0 = M_AXIS_V_data_1_ack_in))) or ((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond2_fu_801_p2)) and not((not((ap_const_lv1_0 = exitcond2_fu_801_p2)) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_in)))))) then 
            M_AXIS_V_last_1_vld_in <= ap_const_logic_1;
        else 
            M_AXIS_V_last_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    M_AXIS_V_last_1_vld_out <= M_AXIS_V_last_1_state(0);

    S_AXIS_TDATA_blk_n_assign_proc : process(S_AXIS_V_data_0_state, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state11)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state4)) or ((ap_const_lv1_1 = ap_CS_fsm_state7)) or ((ap_const_lv1_1 = ap_CS_fsm_state11)))) then 
            S_AXIS_TDATA_blk_n <= S_AXIS_V_data_0_state(0);
        else 
            S_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    S_AXIS_TREADY <= S_AXIS_V_last_0_state(1);
    S_AXIS_V_data_0_ack_in <= S_AXIS_V_data_0_state(1);

    S_AXIS_V_data_0_ack_out_assign_proc : process(S_AXIS_V_data_0_vld_out, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state11)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state4) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state7) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state11) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))))) then 
            S_AXIS_V_data_0_ack_out <= ap_const_logic_1;
        else 
            S_AXIS_V_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    S_AXIS_V_data_0_data_out_assign_proc : process(S_AXIS_V_data_0_payload_A, S_AXIS_V_data_0_payload_B, S_AXIS_V_data_0_sel)
    begin
        if ((ap_const_logic_1 = S_AXIS_V_data_0_sel)) then 
            S_AXIS_V_data_0_data_out <= S_AXIS_V_data_0_payload_B;
        else 
            S_AXIS_V_data_0_data_out <= S_AXIS_V_data_0_payload_A;
        end if; 
    end process;

    S_AXIS_V_data_0_load_A <= (S_AXIS_V_data_0_state_cmp_full and not(S_AXIS_V_data_0_sel_wr));
    S_AXIS_V_data_0_load_B <= (S_AXIS_V_data_0_sel_wr and S_AXIS_V_data_0_state_cmp_full);
    S_AXIS_V_data_0_sel <= S_AXIS_V_data_0_sel_rd;
    S_AXIS_V_data_0_state_cmp_full <= '0' when (S_AXIS_V_data_0_state = ap_const_lv2_1) else '1';
    S_AXIS_V_data_0_vld_in <= S_AXIS_TVALID;
    S_AXIS_V_data_0_vld_out <= S_AXIS_V_data_0_state(0);

    S_AXIS_V_last_0_ack_out_assign_proc : process(S_AXIS_V_data_0_vld_out, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state11)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state4) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state7) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state11) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))))) then 
            S_AXIS_V_last_0_ack_out <= ap_const_logic_1;
        else 
            S_AXIS_V_last_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    S_AXIS_V_last_0_vld_in <= S_AXIS_TVALID;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18 downto 18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19 downto 19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20 downto 20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21 downto 21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22 downto 22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23 downto 23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24 downto 24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25 downto 25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26 downto 26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27 downto 27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28 downto 28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29 downto 29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30 downto 30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31 downto 31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32 downto 32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33 downto 33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34 downto 34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35 downto 35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36 downto 36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37 downto 37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38 downto 38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39 downto 39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40 downto 40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41 downto 41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42 downto 42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43 downto 43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44 downto 44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45 downto 45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46 downto 46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47 downto 47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48 downto 48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49 downto 49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50 downto 50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51 downto 51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52 downto 52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53 downto 53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54 downto 54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55 downto 55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56 downto 56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57 downto 57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58 downto 58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59 downto 59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60 downto 60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61 downto 61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62 downto 62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63 downto 63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64 downto 64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65 downto 65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66 downto 66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67 downto 67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68 downto 68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69 downto 69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70 downto 70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71 downto 71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72 downto 72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73 downto 73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74 downto 74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75 downto 75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76 downto 76);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond1_fu_740_p2 <= "1" when (i_reg_430 = ap_const_lv4_D) else "0";
    exitcond2_fu_801_p2 <= "1" when (i_1_reg_452 = ap_const_lv3_5) else "0";
    exitcond3_fu_766_p2 <= "1" when (j_reg_441 = ap_const_lv3_5) else "0";
    exitcond4_fu_844_p2 <= "1" when (k_reg_474 = ap_const_lv6_24) else "0";
    exitcond5_fu_827_p2 <= "1" when (j_1_reg_463 = ap_const_lv2_3) else "0";
    exitcond6_fu_860_p2 <= "1" when (i_2_reg_485 = ap_const_lv4_D) else "0";
    exitcond9_1_fu_1023_p2 <= "1" when (j_2_1_reg_533 = ap_const_lv4_D) else "0";
    exitcond9_2_fu_1137_p2 <= "1" when (j_2_2_reg_557 = ap_const_lv4_D) else "0";
    exitcond9_3_fu_1251_p2 <= "1" when (j_2_3_reg_581 = ap_const_lv4_D) else "0";
    exitcond9_4_fu_1365_p2 <= "1" when (j_2_4_reg_605 = ap_const_lv4_D) else "0";
    exitcond9_fu_909_p2 <= "1" when (j_s_reg_509 = ap_const_lv4_D) else "0";
    exitcond_1_fu_1579_p2 <= "1" when (j_3_1_reg_653 = ap_const_lv3_5) else "0";
    exitcond_2_fu_1700_p2 <= "1" when (j_3_2_reg_677 = ap_const_lv3_5) else "0";
    exitcond_fu_1469_p2 <= "1" when (j_4_reg_629 = ap_const_lv3_5) else "0";
    grp_fu_712_p2 <= "1" when (unsigned(sigmoid_arr_q0) > unsigned(reg_708)) else "0";
    highest_pred_2_1_fu_1650_p1 <= std_logic_vector(resize(unsigned(sigmoid_arr_q0),16));
    highest_pred_2_2_fu_1771_p1 <= std_logic_vector(resize(unsigned(sigmoid_arr_q0),16));
    highest_pred_2_fu_1540_p1 <= std_logic_vector(resize(unsigned(sigmoid_arr_q0),16));
        highest_pred_2_highe_1_fu_1661_p1 <= std_logic_vector(resize(signed(highest_pred_2_highe_fu_1655_p3),32));

    highest_pred_2_highe_fu_1655_p3 <= 
        tmp_17_1_reg_2218 when (grp_fu_712_p2(0) = '1') else 
        tmp_24_reg_2172;
    i_1_cast_cast_fu_783_p1 <= std_logic_vector(resize(unsigned(i_1_reg_452),5));
    i_2_cast_fu_856_p1 <= std_logic_vector(resize(unsigned(i_2_reg_485),32));
    i_3_fu_746_p2 <= std_logic_vector(unsigned(i_reg_430) + unsigned(ap_const_lv4_1));
    i_4_fu_807_p2 <= std_logic_vector(unsigned(i_1_reg_452) + unsigned(ap_const_lv3_1));
    i_5_fu_866_p2 <= std_logic_vector(unsigned(i_2_reg_485) + unsigned(ap_const_lv4_1));
    i_cast_cast_fu_718_p1 <= std_logic_vector(resize(unsigned(i_reg_430),7));
    icmp1_fu_1051_p2 <= "1" when (signed(tmp_53_fu_1041_p4) > signed(ap_const_lv6_0)) else "0";
    icmp2_fu_1165_p2 <= "1" when (signed(tmp_55_fu_1155_p4) > signed(ap_const_lv6_0)) else "0";
    icmp3_fu_1279_p2 <= "1" when (signed(tmp_57_fu_1269_p4) > signed(ap_const_lv6_0)) else "0";
    icmp4_fu_1393_p2 <= "1" when (signed(tmp_59_fu_1383_p4) > signed(ap_const_lv6_0)) else "0";
    icmp5_fu_1497_p2 <= "1" when (signed(tmp_61_fu_1487_p4) > signed(ap_const_lv6_0)) else "0";
    icmp6_fu_1607_p2 <= "1" when (signed(tmp_63_fu_1597_p4) > signed(ap_const_lv6_0)) else "0";
    icmp7_fu_1728_p2 <= "1" when (signed(tmp_65_fu_1718_p4) > signed(ap_const_lv6_0)) else "0";
    icmp_fu_937_p2 <= "1" when (signed(tmp_31_fu_927_p4) > signed(ap_const_lv6_0)) else "0";
    j_1_cast_cast_fu_813_p1 <= std_logic_vector(resize(unsigned(j_1_reg_463),5));
    j_2_1_cast9_cast_fu_990_p1 <= std_logic_vector(resize(unsigned(j_2_1_reg_533),7));
    j_2_1_cast9_fu_985_p1 <= std_logic_vector(resize(unsigned(j_2_1_reg_533),32));
    j_2_2_cast8_cast_fu_1104_p1 <= std_logic_vector(resize(unsigned(j_2_2_reg_557),7));
    j_2_2_cast8_fu_1099_p1 <= std_logic_vector(resize(unsigned(j_2_2_reg_557),32));
    j_2_3_cast7_cast_fu_1218_p1 <= std_logic_vector(resize(unsigned(j_2_3_reg_581),7));
    j_2_3_cast7_fu_1213_p1 <= std_logic_vector(resize(unsigned(j_2_3_reg_581),32));
    j_2_4_cast6_cast_fu_1332_p1 <= std_logic_vector(resize(unsigned(j_2_4_reg_605),7));
    j_2_4_cast6_fu_1327_p1 <= std_logic_vector(resize(unsigned(j_2_4_reg_605),32));
    j_2_fu_772_p2 <= std_logic_vector(unsigned(j_reg_441) + unsigned(ap_const_lv3_1));
    j_3_1_cast2_cast_fu_1550_p1 <= std_logic_vector(resize(unsigned(j_3_1_reg_653),5));
    j_3_1_cast2_fu_1545_p1 <= std_logic_vector(resize(unsigned(j_3_1_reg_653),32));
    j_3_2_cast1_cast_fu_1671_p1 <= std_logic_vector(resize(unsigned(j_3_2_reg_677),5));
    j_3_2_cast1_fu_1666_p1 <= std_logic_vector(resize(unsigned(j_3_2_reg_677),32));
    j_3_fu_833_p2 <= std_logic_vector(unsigned(j_1_reg_463) + unsigned(ap_const_lv2_1));
    j_4_cast4_cast_fu_1446_p1 <= std_logic_vector(resize(unsigned(j_4_reg_629),5));
    j_4_cast4_fu_1441_p1 <= std_logic_vector(resize(unsigned(j_4_reg_629),32));
    j_6_1_fu_1029_p2 <= std_logic_vector(unsigned(j_2_1_reg_533) + unsigned(ap_const_lv4_1));
    j_6_2_fu_1143_p2 <= std_logic_vector(unsigned(j_2_2_reg_557) + unsigned(ap_const_lv4_1));
    j_6_3_fu_1257_p2 <= std_logic_vector(unsigned(j_2_3_reg_581) + unsigned(ap_const_lv4_1));
    j_6_4_fu_1371_p2 <= std_logic_vector(unsigned(j_2_4_reg_605) + unsigned(ap_const_lv4_1));
    j_6_fu_915_p2 <= std_logic_vector(unsigned(j_s_reg_509) + unsigned(ap_const_lv4_1));
    j_7_1_fu_1585_p2 <= std_logic_vector(unsigned(j_3_1_reg_653) + unsigned(ap_const_lv3_1));
    j_7_2_fu_1706_p2 <= std_logic_vector(unsigned(j_3_2_reg_677) + unsigned(ap_const_lv3_1));
    j_7_fu_1475_p2 <= std_logic_vector(unsigned(j_4_reg_629) + unsigned(ap_const_lv3_1));
    j_cast_cast_26_fu_882_p1 <= std_logic_vector(resize(unsigned(j_s_reg_509),7));
    j_cast_cast_fu_752_p1 <= std_logic_vector(resize(unsigned(j_reg_441),7));
    j_cast_fu_877_p1 <= std_logic_vector(resize(unsigned(j_s_reg_509),32));
    k_1_fu_850_p2 <= std_logic_vector(unsigned(k_reg_474) + unsigned(ap_const_lv6_1));
    p_shl2_cast_fu_894_p1 <= std_logic_vector(resize(unsigned(tmp_29_fu_886_p3),7));
    p_shl3_cast_fu_1002_p1 <= std_logic_vector(resize(unsigned(tmp_33_fu_994_p3),7));
    p_shl4_cast_fu_1116_p1 <= std_logic_vector(resize(unsigned(tmp_36_fu_1108_p3),7));
    p_shl5_cast_fu_1230_p1 <= std_logic_vector(resize(unsigned(tmp_39_fu_1222_p3),7));
    p_shl6_cast_fu_1344_p1 <= std_logic_vector(resize(unsigned(tmp_42_fu_1336_p3),7));
    p_shl_cast_fu_730_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_722_p3),7));
    prediction_write_out_fu_1776_p3 <= 
        ap_const_lv2_3 when (grp_fu_712_p2(0) = '1') else 
        ap_const_lv2_2;

    sigmoid_arr_address0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state26, ap_CS_fsm_state34, ap_CS_fsm_state42, ap_CS_fsm_state50, ap_CS_fsm_state58, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state75, tmp_14_cast_fu_975_p1, tmp_14_1_cast_fu_1089_p1, tmp_14_2_cast_fu_1203_p1, tmp_14_3_cast_fu_1317_p1, tmp_14_4_cast_fu_1431_p1, tmp_26_cast_fu_1535_p1, tmp_17_1_cast_fu_1645_p1, highest_pred_2_highe_1_fu_1661_p1, tmp_17_2_cast_fu_1766_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state75))) then 
            sigmoid_arr_address0 <= tmp_17_2_cast_fu_1766_p1(11 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state67))) then 
            sigmoid_arr_address0 <= highest_pred_2_highe_1_fu_1661_p1(11 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state66))) then 
            sigmoid_arr_address0 <= tmp_17_1_cast_fu_1645_p1(11 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state58))) then 
            sigmoid_arr_address0 <= tmp_26_cast_fu_1535_p1(11 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state50))) then 
            sigmoid_arr_address0 <= tmp_14_4_cast_fu_1431_p1(11 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state42))) then 
            sigmoid_arr_address0 <= tmp_14_3_cast_fu_1317_p1(11 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state34))) then 
            sigmoid_arr_address0 <= tmp_14_2_cast_fu_1203_p1(11 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state26))) then 
            sigmoid_arr_address0 <= tmp_14_1_cast_fu_1089_p1(11 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state18))) then 
            sigmoid_arr_address0 <= tmp_14_cast_fu_975_p1(11 - 1 downto 0);
        else 
            sigmoid_arr_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    sigmoid_arr_ce0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state26, ap_CS_fsm_state34, ap_CS_fsm_state42, ap_CS_fsm_state50, ap_CS_fsm_state58, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state75)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state18)) or ((ap_const_lv1_1 = ap_CS_fsm_state26)) or ((ap_const_lv1_1 = ap_CS_fsm_state34)) or ((ap_const_lv1_1 = ap_CS_fsm_state42)) or ((ap_const_lv1_1 = ap_CS_fsm_state50)) or ((ap_const_lv1_1 = ap_CS_fsm_state58)) or ((ap_const_lv1_1 = ap_CS_fsm_state66)) or ((ap_const_lv1_1 = ap_CS_fsm_state67)) or ((ap_const_lv1_1 = ap_CS_fsm_state75)))) then 
            sigmoid_arr_ce0 <= ap_const_logic_1;
        else 
            sigmoid_arr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    test_data_address0_assign_proc : process(ap_CS_fsm_state11, i_2_cast_reg_1918, ap_CS_fsm_state12, ap_CS_fsm_state20, ap_CS_fsm_state28, ap_CS_fsm_state36, ap_CS_fsm_state44, j_cast_fu_877_p1, j_2_1_cast9_fu_985_p1, j_2_2_cast8_fu_1099_p1, j_2_3_cast7_fu_1213_p1, j_2_4_cast6_fu_1327_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state44))) then 
            test_data_address0 <= j_2_4_cast6_fu_1327_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state36))) then 
            test_data_address0 <= j_2_3_cast7_fu_1213_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state28))) then 
            test_data_address0 <= j_2_2_cast8_fu_1099_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
            test_data_address0 <= j_2_1_cast9_fu_985_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            test_data_address0 <= j_cast_fu_877_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
            test_data_address0 <= i_2_cast_reg_1918(4 - 1 downto 0);
        else 
            test_data_address0 <= "XXXX";
        end if; 
    end process;


    test_data_ce0_assign_proc : process(S_AXIS_V_data_0_vld_out, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state20, ap_CS_fsm_state28, ap_CS_fsm_state36, ap_CS_fsm_state44)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state20)) or ((ap_const_lv1_1 = ap_CS_fsm_state28)) or ((ap_const_lv1_1 = ap_CS_fsm_state36)) or ((ap_const_lv1_1 = ap_CS_fsm_state44)) or ((ap_const_lv1_1 = ap_CS_fsm_state11) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))))) then 
            test_data_ce0 <= ap_const_logic_1;
        else 
            test_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    test_data_d0 <= S_AXIS_V_data_0_data_out(16 - 1 downto 0);

    test_data_we0_assign_proc : process(S_AXIS_V_data_0_vld_out, ap_CS_fsm_state11)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state11) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))))) then 
            test_data_we0 <= ap_const_logic_1;
        else 
            test_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_11_1_fu_1630_p2 <= std_logic_vector(unsigned(values_output_layer_5_reg_640) + unsigned(tmp_10_1_reg_2208));
    tmp_11_2_fu_1751_p2 <= std_logic_vector(unsigned(values_output_layer_8_reg_664) + unsigned(tmp_10_2_reg_2264));
    tmp_13_fu_969_p2 <= std_logic_vector(unsigned(ap_const_lv13_400) + unsigned(tmp_32_fu_965_p1));
        tmp_14_1_cast_fu_1089_p1 <= std_logic_vector(resize(signed(tmp_14_1_fu_1083_p2),32));

    tmp_14_1_fu_1083_p2 <= std_logic_vector(unsigned(ap_const_lv13_400) + unsigned(tmp_54_fu_1079_p1));
        tmp_14_2_cast_fu_1203_p1 <= std_logic_vector(resize(signed(tmp_14_2_fu_1197_p2),32));

    tmp_14_2_fu_1197_p2 <= std_logic_vector(unsigned(ap_const_lv13_400) + unsigned(tmp_56_fu_1193_p1));
        tmp_14_3_cast_fu_1317_p1 <= std_logic_vector(resize(signed(tmp_14_3_fu_1311_p2),32));

    tmp_14_3_fu_1311_p2 <= std_logic_vector(unsigned(ap_const_lv13_400) + unsigned(tmp_58_fu_1307_p1));
        tmp_14_4_cast_fu_1431_p1 <= std_logic_vector(resize(signed(tmp_14_4_fu_1425_p2),32));

    tmp_14_4_fu_1425_p2 <= std_logic_vector(unsigned(ap_const_lv13_400) + unsigned(tmp_60_fu_1421_p1));
        tmp_14_cast_fu_975_p1 <= std_logic_vector(resize(signed(tmp_13_fu_969_p2),32));

    tmp_14_fu_980_p1 <= std_logic_vector(resize(unsigned(sigmoid_arr_q0),16));
    tmp_15_1_fu_1094_p1 <= std_logic_vector(resize(unsigned(sigmoid_arr_q0),16));
    tmp_15_2_fu_1208_p1 <= std_logic_vector(resize(unsigned(sigmoid_arr_q0),16));
    tmp_15_3_fu_1322_p1 <= std_logic_vector(resize(unsigned(sigmoid_arr_q0),16));
    tmp_15_4_fu_1436_p1 <= std_logic_vector(resize(unsigned(sigmoid_arr_q0),16));
        tmp_17_1_cast_fu_1645_p1 <= std_logic_vector(resize(signed(tmp_17_1_fu_1639_p2),32));

    tmp_17_1_fu_1639_p2 <= std_logic_vector(unsigned(ap_const_lv13_400) + unsigned(tmp_64_fu_1635_p1));
        tmp_17_2_cast_fu_1766_p1 <= std_logic_vector(resize(signed(tmp_17_2_fu_1760_p2),32));

    tmp_17_2_fu_1760_p2 <= std_logic_vector(unsigned(ap_const_lv13_400) + unsigned(tmp_66_fu_1756_p1));
    tmp_17_fu_1481_p2 <= "1" when (signed(values_output_layer_2_reg_616) < signed(ap_const_lv16_FC00)) else "0";
    tmp_1_fu_734_p2 <= std_logic_vector(unsigned(i_cast_cast_fu_718_p1) + unsigned(p_shl_cast_fu_730_p1));
    tmp_20_fu_1784_p2 <= (grp_fu_712_p2 or tmp_18_1_reg_2228);
    tmp_22_fu_1520_p2 <= std_logic_vector(unsigned(values_output_layer_2_reg_616) + unsigned(tmp_21_reg_2162));
    tmp_23_fu_756_p2 <= std_logic_vector(unsigned(tmp_1_reg_1858) + unsigned(j_cast_cast_fu_752_p1));
    tmp_24_fu_1529_p2 <= std_logic_vector(unsigned(ap_const_lv13_400) + unsigned(tmp_62_fu_1525_p1));
        tmp_26_cast_fu_1535_p1 <= std_logic_vector(resize(signed(tmp_24_fu_1529_p2),32));

    tmp_26_fu_817_p2 <= std_logic_vector(unsigned(tmp_6_reg_1884) + unsigned(j_1_cast_cast_fu_813_p1));
    tmp_29_cast_fu_761_p1 <= std_logic_vector(resize(unsigned(tmp_23_fu_756_p2),32));
    tmp_29_fu_886_p3 <= (j_s_reg_509 & ap_const_lv2_0);
    tmp_2_1_fu_1035_p2 <= "1" when (signed(values_hidden_layer_5_reg_520) < signed(ap_const_lv16_FC00)) else "0";
    tmp_2_2_fu_1149_p2 <= "1" when (signed(values_hidden_layer_8_reg_544) < signed(ap_const_lv16_FC00)) else "0";
    tmp_2_3_fu_1263_p2 <= "1" when (signed(values_hidden_layer_7_reg_568) < signed(ap_const_lv16_FC00)) else "0";
    tmp_2_4_fu_1377_p2 <= "1" when (signed(values_hidden_layer_1_reg_592) < signed(ap_const_lv16_FC00)) else "0";
    tmp_2_fu_921_p2 <= "1" when (signed(values_hidden_layer_2_reg_496) < signed(ap_const_lv16_FC00)) else "0";
        tmp_30_cast_fu_822_p1 <= std_logic_vector(resize(signed(tmp_26_fu_817_p2),32));

    tmp_30_fu_898_p2 <= std_logic_vector(unsigned(j_cast_cast_26_fu_882_p1) + unsigned(p_shl2_cast_fu_894_p1));
    tmp_31_fu_927_p4 <= values_hidden_layer_2_reg_496(15 downto 10);
    tmp_32_cast_fu_904_p1 <= std_logic_vector(resize(unsigned(tmp_30_fu_898_p2),32));
    tmp_32_fu_965_p1 <= values_hidden_layer_q0(13 - 1 downto 0);
    tmp_33_fu_994_p3 <= (j_2_1_reg_533 & ap_const_lv2_0);
    tmp_34_fu_1006_p2 <= std_logic_vector(unsigned(j_2_1_cast9_cast_fu_990_p1) + unsigned(p_shl3_cast_fu_1002_p1));
    tmp_35_cast_fu_1018_p1 <= std_logic_vector(resize(unsigned(tmp_35_fu_1012_p2),32));
    tmp_35_fu_1012_p2 <= std_logic_vector(unsigned(tmp_34_fu_1006_p2) + unsigned(ap_const_lv7_1));
    tmp_36_fu_1108_p3 <= (j_2_2_reg_557 & ap_const_lv2_0);
    tmp_37_fu_1120_p2 <= std_logic_vector(unsigned(j_2_2_cast8_cast_fu_1104_p1) + unsigned(p_shl4_cast_fu_1116_p1));
    tmp_38_cast_fu_1132_p1 <= std_logic_vector(resize(unsigned(tmp_38_fu_1126_p2),32));
    tmp_38_fu_1126_p2 <= std_logic_vector(unsigned(tmp_37_fu_1120_p2) + unsigned(ap_const_lv7_2));
    tmp_39_fu_1222_p3 <= (j_2_3_reg_581 & ap_const_lv2_0);
    tmp_3_fu_787_p3 <= (i_1_reg_452 & ap_const_lv2_0);
    tmp_40_fu_1234_p2 <= std_logic_vector(unsigned(j_2_3_cast7_cast_fu_1218_p1) + unsigned(p_shl5_cast_fu_1230_p1));
    tmp_41_cast_fu_1246_p1 <= std_logic_vector(resize(unsigned(tmp_41_fu_1240_p2),32));
    tmp_41_fu_1240_p2 <= std_logic_vector(unsigned(tmp_40_fu_1234_p2) + unsigned(ap_const_lv7_3));
    tmp_42_fu_1336_p3 <= (j_2_4_reg_605 & ap_const_lv2_0);
    tmp_43_fu_1348_p2 <= std_logic_vector(unsigned(j_2_4_cast6_cast_fu_1332_p1) + unsigned(p_shl6_cast_fu_1344_p1));
    tmp_44_cast_fu_1360_p1 <= std_logic_vector(resize(unsigned(tmp_44_fu_1354_p2),32));
    tmp_44_fu_1354_p2 <= std_logic_vector(unsigned(tmp_43_fu_1348_p2) + unsigned(ap_const_lv7_4));
    tmp_45_fu_1450_p3 <= (j_4_reg_629 & ap_const_lv2_0);
        tmp_46_cast_fu_1464_p1 <= std_logic_vector(resize(signed(tmp_46_fu_1458_p2),32));

    tmp_46_fu_1458_p2 <= std_logic_vector(unsigned(tmp_45_fu_1450_p3) - unsigned(j_4_cast4_cast_fu_1446_p1));
    tmp_47_fu_1554_p3 <= (j_3_1_reg_653 & ap_const_lv2_0);
    tmp_48_fu_1562_p2 <= std_logic_vector(unsigned(tmp_47_fu_1554_p3) - unsigned(j_3_1_cast2_cast_fu_1550_p1));
        tmp_49_cast_fu_1574_p1 <= std_logic_vector(resize(signed(tmp_49_fu_1568_p2),32));

    tmp_49_fu_1568_p2 <= std_logic_vector(unsigned(tmp_48_fu_1562_p2) + unsigned(ap_const_lv5_1));
    tmp_50_fu_1675_p3 <= (j_3_2_reg_677 & ap_const_lv2_0);
    tmp_51_fu_1683_p2 <= std_logic_vector(unsigned(tmp_50_fu_1675_p3) - unsigned(j_3_2_cast1_cast_fu_1671_p1));
        tmp_52_cast_fu_1695_p1 <= std_logic_vector(resize(signed(tmp_52_fu_1689_p2),32));

    tmp_52_fu_1689_p2 <= std_logic_vector(unsigned(tmp_51_fu_1683_p2) + unsigned(ap_const_lv5_2));
    tmp_53_fu_1041_p4 <= values_hidden_layer_5_reg_520(15 downto 10);
    tmp_54_fu_1079_p1 <= values_hidden_layer_q0(13 - 1 downto 0);
    tmp_55_fu_1155_p4 <= values_hidden_layer_8_reg_544(15 downto 10);
    tmp_56_fu_1193_p1 <= values_hidden_layer_q0(13 - 1 downto 0);
    tmp_57_fu_1269_p4 <= values_hidden_layer_7_reg_568(15 downto 10);
    tmp_58_fu_1307_p1 <= values_hidden_layer_q0(13 - 1 downto 0);
    tmp_59_fu_1383_p4 <= values_hidden_layer_1_reg_592(15 downto 10);
    tmp_5_1_fu_1074_p2 <= std_logic_vector(unsigned(values_hidden_layer_5_reg_520) + unsigned(tmp_4_1_reg_1998));
    tmp_5_2_fu_1188_p2 <= std_logic_vector(unsigned(values_hidden_layer_8_reg_544) + unsigned(tmp_4_2_reg_2039));
    tmp_5_3_fu_1302_p2 <= std_logic_vector(unsigned(values_hidden_layer_7_reg_568) + unsigned(tmp_4_3_reg_2080));
    tmp_5_4_fu_1416_p2 <= std_logic_vector(unsigned(values_hidden_layer_1_reg_592) + unsigned(tmp_4_4_reg_2121));
    tmp_5_fu_960_p2 <= std_logic_vector(unsigned(values_hidden_layer_2_reg_496) + unsigned(tmp_4_reg_1957));
    tmp_60_fu_1421_p1 <= values_hidden_layer_q0(13 - 1 downto 0);
    tmp_61_fu_1487_p4 <= values_output_layer_2_reg_616(15 downto 10);
    tmp_62_fu_1525_p1 <= values_output_layer_q0(13 - 1 downto 0);
    tmp_63_fu_1597_p4 <= values_output_layer_5_reg_640(15 downto 10);
    tmp_64_fu_1635_p1 <= values_output_layer_q0(13 - 1 downto 0);
    tmp_65_fu_1718_p4 <= values_output_layer_8_reg_664(15 downto 10);
    tmp_66_fu_1756_p1 <= values_output_layer_q0(13 - 1 downto 0);
    tmp_6_fu_795_p2 <= std_logic_vector(unsigned(tmp_3_fu_787_p3) - unsigned(i_1_cast_cast_fu_783_p1));
    tmp_8_1_fu_1591_p2 <= "1" when (signed(values_output_layer_5_reg_640) < signed(ap_const_lv16_FC00)) else "0";
    tmp_8_2_fu_1712_p2 <= "1" when (signed(values_output_layer_8_reg_664) < signed(ap_const_lv16_FC00)) else "0";
    tmp_data_1_fu_1797_p1 <= std_logic_vector(resize(unsigned(tmp_data_fu_1789_p3),32));
    tmp_data_fu_1789_p3 <= 
        prediction_write_out_fu_1776_p3 when (tmp_20_fu_1784_p2(0) = '1') else 
        ap_const_lv2_1;
    tmp_s_fu_722_p3 <= (i_reg_430 & ap_const_lv2_0);

    values_hidden_layer_address0_assign_proc : process(ap_CS_fsm_state12, tmp_2_reg_1949, icmp_reg_1953, ap_CS_fsm_state20, tmp_2_1_reg_1990, icmp1_reg_1994, ap_CS_fsm_state28, tmp_2_2_reg_2031, icmp2_reg_2035, ap_CS_fsm_state36, tmp_2_3_reg_2072, icmp3_reg_2076, ap_CS_fsm_state44, tmp_2_4_reg_2113, icmp4_reg_2117, ap_CS_fsm_state52, ap_CS_fsm_state60, ap_CS_fsm_state69, ap_CS_fsm_state19, ap_CS_fsm_state27, ap_CS_fsm_state35, ap_CS_fsm_state43, ap_CS_fsm_state51, j_4_cast4_fu_1441_p1, j_3_1_cast2_fu_1545_p1, j_3_2_cast1_fu_1666_p1, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state48, ap_CS_fsm_state49)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state69))) then 
            values_hidden_layer_address0 <= j_3_2_cast1_fu_1666_p1(3 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state60))) then 
            values_hidden_layer_address0 <= j_3_1_cast2_fu_1545_p1(3 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state52))) then 
            values_hidden_layer_address0 <= j_4_cast4_fu_1441_p1(3 - 1 downto 0);
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state44)) or ((ap_const_lv1_1 = ap_CS_fsm_state51)) or ((ap_const_lv1_1 = ap_CS_fsm_state48) and (ap_const_lv1_0 = tmp_2_4_reg_2113) and not((ap_const_lv1_0 = icmp4_reg_2117))) or ((ap_const_lv1_1 = ap_CS_fsm_state48) and not((ap_const_lv1_0 = tmp_2_4_reg_2113))) or ((ap_const_lv1_1 = ap_CS_fsm_state49)))) then 
            values_hidden_layer_address0 <= ap_const_lv3_4;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state36)) or ((ap_const_lv1_1 = ap_CS_fsm_state43)) or ((ap_const_lv1_1 = ap_CS_fsm_state40) and (ap_const_lv1_0 = tmp_2_3_reg_2072) and not((ap_const_lv1_0 = icmp3_reg_2076))) or ((ap_const_lv1_1 = ap_CS_fsm_state40) and not((ap_const_lv1_0 = tmp_2_3_reg_2072))) or ((ap_const_lv1_1 = ap_CS_fsm_state41)))) then 
            values_hidden_layer_address0 <= ap_const_lv3_3;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state28)) or ((ap_const_lv1_1 = ap_CS_fsm_state35)) or ((ap_const_lv1_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = tmp_2_2_reg_2031) and not((ap_const_lv1_0 = icmp2_reg_2035))) or ((ap_const_lv1_1 = ap_CS_fsm_state32) and not((ap_const_lv1_0 = tmp_2_2_reg_2031))) or ((ap_const_lv1_1 = ap_CS_fsm_state33)))) then 
            values_hidden_layer_address0 <= ap_const_lv3_2;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state20)) or ((ap_const_lv1_1 = ap_CS_fsm_state27)) or ((ap_const_lv1_1 = ap_CS_fsm_state24) and (ap_const_lv1_0 = tmp_2_1_reg_1990) and not((ap_const_lv1_0 = icmp1_reg_1994))) or ((ap_const_lv1_1 = ap_CS_fsm_state24) and not((ap_const_lv1_0 = tmp_2_1_reg_1990))) or ((ap_const_lv1_1 = ap_CS_fsm_state25)))) then 
            values_hidden_layer_address0 <= ap_const_lv3_1;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state19)) or ((ap_const_lv1_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = tmp_2_reg_1949) and not((ap_const_lv1_0 = icmp_reg_1953))) or ((ap_const_lv1_1 = ap_CS_fsm_state16) and not((ap_const_lv1_0 = tmp_2_reg_1949))) or ((ap_const_lv1_1 = ap_CS_fsm_state17)))) then 
            values_hidden_layer_address0 <= ap_const_lv3_0;
        else 
            values_hidden_layer_address0 <= "XXX";
        end if; 
    end process;


    values_hidden_layer_ce0_assign_proc : process(ap_CS_fsm_state12, tmp_2_reg_1949, icmp_reg_1953, ap_CS_fsm_state20, tmp_2_1_reg_1990, icmp1_reg_1994, ap_CS_fsm_state28, tmp_2_2_reg_2031, icmp2_reg_2035, ap_CS_fsm_state36, tmp_2_3_reg_2072, icmp3_reg_2076, ap_CS_fsm_state44, tmp_2_4_reg_2113, icmp4_reg_2117, ap_CS_fsm_state52, ap_CS_fsm_state60, ap_CS_fsm_state69, ap_CS_fsm_state19, ap_CS_fsm_state27, ap_CS_fsm_state35, ap_CS_fsm_state43, ap_CS_fsm_state51, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state48, ap_CS_fsm_state49)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state20)) or ((ap_const_lv1_1 = ap_CS_fsm_state28)) or ((ap_const_lv1_1 = ap_CS_fsm_state36)) or ((ap_const_lv1_1 = ap_CS_fsm_state44)) or ((ap_const_lv1_1 = ap_CS_fsm_state52)) or ((ap_const_lv1_1 = ap_CS_fsm_state60)) or ((ap_const_lv1_1 = ap_CS_fsm_state69)) or ((ap_const_lv1_1 = ap_CS_fsm_state19)) or ((ap_const_lv1_1 = ap_CS_fsm_state27)) or ((ap_const_lv1_1 = ap_CS_fsm_state35)) or ((ap_const_lv1_1 = ap_CS_fsm_state43)) or ((ap_const_lv1_1 = ap_CS_fsm_state51)) or ((ap_const_lv1_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = tmp_2_reg_1949) and not((ap_const_lv1_0 = icmp_reg_1953))) or ((ap_const_lv1_1 = ap_CS_fsm_state16) and not((ap_const_lv1_0 = tmp_2_reg_1949))) or ((ap_const_lv1_1 = ap_CS_fsm_state17)) or ((ap_const_lv1_1 = ap_CS_fsm_state24) and (ap_const_lv1_0 = tmp_2_1_reg_1990) and not((ap_const_lv1_0 = icmp1_reg_1994))) or ((ap_const_lv1_1 = ap_CS_fsm_state24) and not((ap_const_lv1_0 = tmp_2_1_reg_1990))) or ((ap_const_lv1_1 = ap_CS_fsm_state25)) or ((ap_const_lv1_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = tmp_2_2_reg_2031) and not((ap_const_lv1_0 = icmp2_reg_2035))) or ((ap_const_lv1_1 = ap_CS_fsm_state32) and not((ap_const_lv1_0 = tmp_2_2_reg_2031))) or ((ap_const_lv1_1 = ap_CS_fsm_state33)) or ((ap_const_lv1_1 = ap_CS_fsm_state40) and (ap_const_lv1_0 = tmp_2_3_reg_2072) and not((ap_const_lv1_0 = icmp3_reg_2076))) or ((ap_const_lv1_1 = ap_CS_fsm_state40) and not((ap_const_lv1_0 = tmp_2_3_reg_2072))) or ((ap_const_lv1_1 = ap_CS_fsm_state41)) or ((ap_const_lv1_1 = ap_CS_fsm_state48) and (ap_const_lv1_0 = tmp_2_4_reg_2113) and not((ap_const_lv1_0 = icmp4_reg_2117))) or ((ap_const_lv1_1 = ap_CS_fsm_state48) and not((ap_const_lv1_0 = tmp_2_4_reg_2113))) or ((ap_const_lv1_1 = ap_CS_fsm_state49)))) then 
            values_hidden_layer_ce0 <= ap_const_logic_1;
        else 
            values_hidden_layer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    values_hidden_layer_d0_assign_proc : process(ap_CS_fsm_state12, tmp_2_reg_1949, icmp_reg_1953, ap_CS_fsm_state20, tmp_2_1_reg_1990, icmp1_reg_1994, ap_CS_fsm_state28, tmp_2_2_reg_2031, icmp2_reg_2035, ap_CS_fsm_state36, tmp_2_3_reg_2072, icmp3_reg_2076, ap_CS_fsm_state44, tmp_2_4_reg_2113, icmp4_reg_2117, values_hidden_layer_2_reg_496, values_hidden_layer_5_reg_520, ap_CS_fsm_state19, values_hidden_layer_8_reg_544, ap_CS_fsm_state27, values_hidden_layer_7_reg_568, ap_CS_fsm_state35, values_hidden_layer_1_reg_592, ap_CS_fsm_state43, ap_CS_fsm_state51, ap_CS_fsm_state16, tmp_14_fu_980_p1, ap_CS_fsm_state24, tmp_15_1_fu_1094_p1, ap_CS_fsm_state32, tmp_15_2_fu_1208_p1, ap_CS_fsm_state40, tmp_15_3_fu_1322_p1, ap_CS_fsm_state48, tmp_15_4_fu_1436_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state51))) then 
            values_hidden_layer_d0 <= tmp_15_4_fu_1436_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state44))) then 
            values_hidden_layer_d0 <= values_hidden_layer_1_reg_592;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state43))) then 
            values_hidden_layer_d0 <= tmp_15_3_fu_1322_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state36))) then 
            values_hidden_layer_d0 <= values_hidden_layer_7_reg_568;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state35))) then 
            values_hidden_layer_d0 <= tmp_15_2_fu_1208_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state28))) then 
            values_hidden_layer_d0 <= values_hidden_layer_8_reg_544;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state27))) then 
            values_hidden_layer_d0 <= tmp_15_1_fu_1094_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
            values_hidden_layer_d0 <= values_hidden_layer_5_reg_520;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state19))) then 
            values_hidden_layer_d0 <= tmp_14_fu_980_p1;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state16) and not((ap_const_lv1_0 = tmp_2_reg_1949))) or ((ap_const_lv1_1 = ap_CS_fsm_state24) and not((ap_const_lv1_0 = tmp_2_1_reg_1990))) or ((ap_const_lv1_1 = ap_CS_fsm_state32) and not((ap_const_lv1_0 = tmp_2_2_reg_2031))) or ((ap_const_lv1_1 = ap_CS_fsm_state40) and not((ap_const_lv1_0 = tmp_2_3_reg_2072))) or ((ap_const_lv1_1 = ap_CS_fsm_state48) and not((ap_const_lv1_0 = tmp_2_4_reg_2113))))) then 
            values_hidden_layer_d0 <= ap_const_lv16_FC00;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = tmp_2_reg_1949) and not((ap_const_lv1_0 = icmp_reg_1953))) or ((ap_const_lv1_1 = ap_CS_fsm_state24) and (ap_const_lv1_0 = tmp_2_1_reg_1990) and not((ap_const_lv1_0 = icmp1_reg_1994))) or ((ap_const_lv1_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = tmp_2_2_reg_2031) and not((ap_const_lv1_0 = icmp2_reg_2035))) or ((ap_const_lv1_1 = ap_CS_fsm_state40) and (ap_const_lv1_0 = tmp_2_3_reg_2072) and not((ap_const_lv1_0 = icmp3_reg_2076))) or ((ap_const_lv1_1 = ap_CS_fsm_state48) and (ap_const_lv1_0 = tmp_2_4_reg_2113) and not((ap_const_lv1_0 = icmp4_reg_2117))))) then 
            values_hidden_layer_d0 <= ap_const_lv16_3FF;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            values_hidden_layer_d0 <= values_hidden_layer_2_reg_496;
        else 
            values_hidden_layer_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    values_hidden_layer_we0_assign_proc : process(ap_CS_fsm_state12, tmp_2_reg_1949, icmp_reg_1953, ap_CS_fsm_state20, tmp_2_1_reg_1990, icmp1_reg_1994, ap_CS_fsm_state28, tmp_2_2_reg_2031, icmp2_reg_2035, ap_CS_fsm_state36, tmp_2_3_reg_2072, icmp3_reg_2076, ap_CS_fsm_state44, tmp_2_4_reg_2113, icmp4_reg_2117, ap_CS_fsm_state19, ap_CS_fsm_state27, ap_CS_fsm_state35, ap_CS_fsm_state43, ap_CS_fsm_state51, ap_CS_fsm_state16, ap_CS_fsm_state24, ap_CS_fsm_state32, ap_CS_fsm_state40, ap_CS_fsm_state48)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state20)) or ((ap_const_lv1_1 = ap_CS_fsm_state28)) or ((ap_const_lv1_1 = ap_CS_fsm_state36)) or ((ap_const_lv1_1 = ap_CS_fsm_state44)) or ((ap_const_lv1_1 = ap_CS_fsm_state19)) or ((ap_const_lv1_1 = ap_CS_fsm_state27)) or ((ap_const_lv1_1 = ap_CS_fsm_state35)) or ((ap_const_lv1_1 = ap_CS_fsm_state43)) or ((ap_const_lv1_1 = ap_CS_fsm_state51)) or ((ap_const_lv1_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = tmp_2_reg_1949) and not((ap_const_lv1_0 = icmp_reg_1953))) or ((ap_const_lv1_1 = ap_CS_fsm_state16) and not((ap_const_lv1_0 = tmp_2_reg_1949))) or ((ap_const_lv1_1 = ap_CS_fsm_state24) and (ap_const_lv1_0 = tmp_2_1_reg_1990) and not((ap_const_lv1_0 = icmp1_reg_1994))) or ((ap_const_lv1_1 = ap_CS_fsm_state24) and not((ap_const_lv1_0 = tmp_2_1_reg_1990))) or ((ap_const_lv1_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = tmp_2_2_reg_2031) and not((ap_const_lv1_0 = icmp2_reg_2035))) or ((ap_const_lv1_1 = ap_CS_fsm_state32) and not((ap_const_lv1_0 = tmp_2_2_reg_2031))) or ((ap_const_lv1_1 = ap_CS_fsm_state40) and (ap_const_lv1_0 = tmp_2_3_reg_2072) and not((ap_const_lv1_0 = icmp3_reg_2076))) or ((ap_const_lv1_1 = ap_CS_fsm_state40) and not((ap_const_lv1_0 = tmp_2_3_reg_2072))) or ((ap_const_lv1_1 = ap_CS_fsm_state48) and (ap_const_lv1_0 = tmp_2_4_reg_2113) and not((ap_const_lv1_0 = icmp4_reg_2117))) or ((ap_const_lv1_1 = ap_CS_fsm_state48) and not((ap_const_lv1_0 = tmp_2_4_reg_2113))))) then 
            values_hidden_layer_we0 <= ap_const_logic_1;
        else 
            values_hidden_layer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    values_output_layer_address0_assign_proc : process(ap_CS_fsm_state76, ap_CS_fsm_state59, ap_CS_fsm_state52, tmp_17_reg_2154, icmp5_reg_2158, ap_CS_fsm_state60, tmp_8_1_reg_2200, icmp6_reg_2204, ap_CS_fsm_state67, ap_CS_fsm_state69, tmp_8_2_reg_2256, icmp7_reg_2260, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state73, ap_CS_fsm_state74)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state76)) or ((ap_const_lv1_1 = ap_CS_fsm_state69)) or ((ap_const_lv1_1 = ap_CS_fsm_state73) and (ap_const_lv1_0 = tmp_8_2_reg_2256) and not((ap_const_lv1_0 = icmp7_reg_2260))) or ((ap_const_lv1_1 = ap_CS_fsm_state73) and not((ap_const_lv1_0 = tmp_8_2_reg_2256))) or ((ap_const_lv1_1 = ap_CS_fsm_state74)))) then 
            values_output_layer_address0 <= ap_const_lv2_2;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state60)) or ((ap_const_lv1_1 = ap_CS_fsm_state67)) or ((ap_const_lv1_1 = ap_CS_fsm_state64) and (ap_const_lv1_0 = tmp_8_1_reg_2200) and not((ap_const_lv1_0 = icmp6_reg_2204))) or ((ap_const_lv1_1 = ap_CS_fsm_state64) and not((ap_const_lv1_0 = tmp_8_1_reg_2200))) or ((ap_const_lv1_1 = ap_CS_fsm_state65)))) then 
            values_output_layer_address0 <= ap_const_lv2_1;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state59)) or ((ap_const_lv1_1 = ap_CS_fsm_state52)) or ((ap_const_lv1_1 = ap_CS_fsm_state56) and (ap_const_lv1_0 = tmp_17_reg_2154) and not((ap_const_lv1_0 = icmp5_reg_2158))) or ((ap_const_lv1_1 = ap_CS_fsm_state56) and not((ap_const_lv1_0 = tmp_17_reg_2154))) or ((ap_const_lv1_1 = ap_CS_fsm_state57)))) then 
            values_output_layer_address0 <= ap_const_lv2_0;
        else 
            values_output_layer_address0 <= "XX";
        end if; 
    end process;


    values_output_layer_ce0_assign_proc : process(M_AXIS_V_data_1_ack_in, ap_CS_fsm_state76, ap_CS_fsm_state59, ap_CS_fsm_state52, tmp_17_reg_2154, icmp5_reg_2158, ap_CS_fsm_state60, tmp_8_1_reg_2200, icmp6_reg_2204, ap_CS_fsm_state67, ap_CS_fsm_state69, tmp_8_2_reg_2256, icmp7_reg_2260, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state73, ap_CS_fsm_state74)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state59)) or ((ap_const_lv1_1 = ap_CS_fsm_state52)) or ((ap_const_lv1_1 = ap_CS_fsm_state60)) or ((ap_const_lv1_1 = ap_CS_fsm_state67)) or ((ap_const_lv1_1 = ap_CS_fsm_state69)) or ((ap_const_lv1_1 = ap_CS_fsm_state76) and not((ap_const_logic_0 = M_AXIS_V_data_1_ack_in))) or ((ap_const_lv1_1 = ap_CS_fsm_state56) and (ap_const_lv1_0 = tmp_17_reg_2154) and not((ap_const_lv1_0 = icmp5_reg_2158))) or ((ap_const_lv1_1 = ap_CS_fsm_state56) and not((ap_const_lv1_0 = tmp_17_reg_2154))) or ((ap_const_lv1_1 = ap_CS_fsm_state57)) or ((ap_const_lv1_1 = ap_CS_fsm_state64) and (ap_const_lv1_0 = tmp_8_1_reg_2200) and not((ap_const_lv1_0 = icmp6_reg_2204))) or ((ap_const_lv1_1 = ap_CS_fsm_state64) and not((ap_const_lv1_0 = tmp_8_1_reg_2200))) or ((ap_const_lv1_1 = ap_CS_fsm_state65)) or ((ap_const_lv1_1 = ap_CS_fsm_state73) and (ap_const_lv1_0 = tmp_8_2_reg_2256) and not((ap_const_lv1_0 = icmp7_reg_2260))) or ((ap_const_lv1_1 = ap_CS_fsm_state73) and not((ap_const_lv1_0 = tmp_8_2_reg_2256))) or ((ap_const_lv1_1 = ap_CS_fsm_state74)))) then 
            values_output_layer_ce0 <= ap_const_logic_1;
        else 
            values_output_layer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    values_output_layer_d0_assign_proc : process(ap_CS_fsm_state76, ap_CS_fsm_state59, ap_CS_fsm_state52, tmp_17_reg_2154, icmp5_reg_2158, ap_CS_fsm_state60, tmp_8_1_reg_2200, icmp6_reg_2204, ap_CS_fsm_state67, ap_CS_fsm_state69, tmp_8_2_reg_2256, icmp7_reg_2260, values_output_layer_2_reg_616, values_output_layer_5_reg_640, values_output_layer_8_reg_664, ap_CS_fsm_state56, highest_pred_2_fu_1540_p1, ap_CS_fsm_state64, highest_pred_2_1_fu_1650_p1, ap_CS_fsm_state73, highest_pred_2_2_fu_1771_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state76))) then 
            values_output_layer_d0 <= highest_pred_2_2_fu_1771_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state69))) then 
            values_output_layer_d0 <= values_output_layer_8_reg_664;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state67))) then 
            values_output_layer_d0 <= highest_pred_2_1_fu_1650_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state60))) then 
            values_output_layer_d0 <= values_output_layer_5_reg_640;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state59))) then 
            values_output_layer_d0 <= highest_pred_2_fu_1540_p1;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state56) and not((ap_const_lv1_0 = tmp_17_reg_2154))) or ((ap_const_lv1_1 = ap_CS_fsm_state64) and not((ap_const_lv1_0 = tmp_8_1_reg_2200))) or ((ap_const_lv1_1 = ap_CS_fsm_state73) and not((ap_const_lv1_0 = tmp_8_2_reg_2256))))) then 
            values_output_layer_d0 <= ap_const_lv16_FC00;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state56) and (ap_const_lv1_0 = tmp_17_reg_2154) and not((ap_const_lv1_0 = icmp5_reg_2158))) or ((ap_const_lv1_1 = ap_CS_fsm_state64) and (ap_const_lv1_0 = tmp_8_1_reg_2200) and not((ap_const_lv1_0 = icmp6_reg_2204))) or ((ap_const_lv1_1 = ap_CS_fsm_state73) and (ap_const_lv1_0 = tmp_8_2_reg_2256) and not((ap_const_lv1_0 = icmp7_reg_2260))))) then 
            values_output_layer_d0 <= ap_const_lv16_3FF;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state52))) then 
            values_output_layer_d0 <= values_output_layer_2_reg_616;
        else 
            values_output_layer_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    values_output_layer_we0_assign_proc : process(M_AXIS_V_data_1_ack_in, ap_CS_fsm_state76, ap_CS_fsm_state59, ap_CS_fsm_state52, tmp_17_reg_2154, icmp5_reg_2158, ap_CS_fsm_state60, tmp_8_1_reg_2200, icmp6_reg_2204, ap_CS_fsm_state67, ap_CS_fsm_state69, tmp_8_2_reg_2256, icmp7_reg_2260, ap_CS_fsm_state56, ap_CS_fsm_state64, ap_CS_fsm_state73)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state59)) or ((ap_const_lv1_1 = ap_CS_fsm_state52)) or ((ap_const_lv1_1 = ap_CS_fsm_state60)) or ((ap_const_lv1_1 = ap_CS_fsm_state67)) or ((ap_const_lv1_1 = ap_CS_fsm_state69)) or ((ap_const_lv1_1 = ap_CS_fsm_state76) and not((ap_const_logic_0 = M_AXIS_V_data_1_ack_in))) or ((ap_const_lv1_1 = ap_CS_fsm_state56) and (ap_const_lv1_0 = tmp_17_reg_2154) and not((ap_const_lv1_0 = icmp5_reg_2158))) or ((ap_const_lv1_1 = ap_CS_fsm_state56) and not((ap_const_lv1_0 = tmp_17_reg_2154))) or ((ap_const_lv1_1 = ap_CS_fsm_state64) and (ap_const_lv1_0 = tmp_8_1_reg_2200) and not((ap_const_lv1_0 = icmp6_reg_2204))) or ((ap_const_lv1_1 = ap_CS_fsm_state64) and not((ap_const_lv1_0 = tmp_8_1_reg_2200))) or ((ap_const_lv1_1 = ap_CS_fsm_state73) and (ap_const_lv1_0 = tmp_8_2_reg_2256) and not((ap_const_lv1_0 = icmp7_reg_2260))) or ((ap_const_lv1_1 = ap_CS_fsm_state73) and not((ap_const_lv1_0 = tmp_8_2_reg_2256))))) then 
            values_output_layer_we0 <= ap_const_logic_1;
        else 
            values_output_layer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_HO_address0_assign_proc : process(ap_CS_fsm_state7, weights_HO_addr_reg_1897, ap_CS_fsm_state52, ap_CS_fsm_state60, ap_CS_fsm_state69, tmp_46_cast_fu_1464_p1, tmp_49_cast_fu_1574_p1, tmp_52_cast_fu_1695_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state69))) then 
            weights_HO_address0 <= tmp_52_cast_fu_1695_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state60))) then 
            weights_HO_address0 <= tmp_49_cast_fu_1574_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state52))) then 
            weights_HO_address0 <= tmp_46_cast_fu_1464_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
            weights_HO_address0 <= weights_HO_addr_reg_1897;
        else 
            weights_HO_address0 <= "XXXX";
        end if; 
    end process;


    weights_HO_ce0_assign_proc : process(S_AXIS_V_data_0_vld_out, ap_CS_fsm_state7, ap_CS_fsm_state52, ap_CS_fsm_state60, ap_CS_fsm_state69)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state52)) or ((ap_const_lv1_1 = ap_CS_fsm_state60)) or ((ap_const_lv1_1 = ap_CS_fsm_state69)) or ((ap_const_lv1_1 = ap_CS_fsm_state7) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))))) then 
            weights_HO_ce0 <= ap_const_logic_1;
        else 
            weights_HO_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_HO_d0 <= S_AXIS_V_data_0_data_out(16 - 1 downto 0);

    weights_HO_we0_assign_proc : process(S_AXIS_V_data_0_vld_out, ap_CS_fsm_state7)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state7) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))))) then 
            weights_HO_we0 <= ap_const_logic_1;
        else 
            weights_HO_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_IH_address0_assign_proc : process(ap_CS_fsm_state4, weights_IH_addr_reg_1871, ap_CS_fsm_state12, ap_CS_fsm_state20, ap_CS_fsm_state28, ap_CS_fsm_state36, ap_CS_fsm_state44, tmp_32_cast_fu_904_p1, tmp_35_cast_fu_1018_p1, tmp_38_cast_fu_1132_p1, tmp_41_cast_fu_1246_p1, tmp_44_cast_fu_1360_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state44))) then 
            weights_IH_address0 <= tmp_44_cast_fu_1360_p1(7 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state36))) then 
            weights_IH_address0 <= tmp_41_cast_fu_1246_p1(7 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state28))) then 
            weights_IH_address0 <= tmp_38_cast_fu_1132_p1(7 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
            weights_IH_address0 <= tmp_35_cast_fu_1018_p1(7 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            weights_IH_address0 <= tmp_32_cast_fu_904_p1(7 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            weights_IH_address0 <= weights_IH_addr_reg_1871;
        else 
            weights_IH_address0 <= "XXXXXXX";
        end if; 
    end process;


    weights_IH_ce0_assign_proc : process(S_AXIS_V_data_0_vld_out, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state20, ap_CS_fsm_state28, ap_CS_fsm_state36, ap_CS_fsm_state44)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state20)) or ((ap_const_lv1_1 = ap_CS_fsm_state28)) or ((ap_const_lv1_1 = ap_CS_fsm_state36)) or ((ap_const_lv1_1 = ap_CS_fsm_state44)) or ((ap_const_lv1_1 = ap_CS_fsm_state4) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))))) then 
            weights_IH_ce0 <= ap_const_logic_1;
        else 
            weights_IH_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_IH_d0 <= S_AXIS_V_data_0_data_out(16 - 1 downto 0);

    weights_IH_we0_assign_proc : process(S_AXIS_V_data_0_vld_out, ap_CS_fsm_state4)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state4) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))))) then 
            weights_IH_we0 <= ap_const_logic_1;
        else 
            weights_IH_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
