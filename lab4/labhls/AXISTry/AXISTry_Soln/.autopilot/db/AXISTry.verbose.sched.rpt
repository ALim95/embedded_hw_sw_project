

================================================================
== Vivado HLS Report for 'AXISTry'
================================================================
* Date:           Thu Oct 17 19:36:25 2019

* Version:        2016.3 (Build 1682563 on Mon Oct 10 19:41:59 MDT 2016)
* Project:        AXISTry
* Solution:       AXISTry_Soln
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      6.08|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |   20|   20|   21|   21|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------------+-----+-----+----------+-----------+-----------+------+----------+
        |                |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        |    Loop Name   | min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +----------------+-----+-----+----------+-----------+-----------+------+----------+
        |- AXISTry_for1  |   14|   14|         7|          -|          -|     2|    no    |
        |- AXISTry_for2  |    4|    4|         2|          -|          -|     2|    no    |
        +----------------+-----+-----+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 10
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (!exitcond3)
	9  / (exitcond3)
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	2  / true
9 --> 
	10  / (!exitcond)
10 --> 
	9  / true
* FSM state operations: 

 <State 1>: 1.57ns
ST_1: StgValue_11 (5)  [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecBitsMap(i32* %S_AXIS_V_data), !map !19

ST_1: StgValue_12 (6)  [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecBitsMap(i1* %S_AXIS_V_last), !map !25

ST_1: StgValue_13 (7)  [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecBitsMap(i32* %M_AXIS_V_data), !map !29

ST_1: StgValue_14 (8)  [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecBitsMap(i1* %M_AXIS_V_last), !map !33

ST_1: StgValue_15 (9)  [1/1] 0.00ns
:4  call void (...)* @_ssdm_op_SpecTopModule([8 x i8]* @AXISTry_str) nounwind

ST_1: StgValue_16 (10)  [1/1] 0.00ns  loc: AXISTry.cpp:19
:5  call void (...)* @_ssdm_op_SpecInterface(i32 0, [13 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: StgValue_17 (11)  [1/1] 0.00ns  loc: AXISTry.cpp:20
:6  call void (...)* @_ssdm_op_SpecInterface(i32* %S_AXIS_V_data, i1* %S_AXIS_V_last, [5 x i8]* @p_str2, i32 1, i32 1, [5 x i8]* @p_str3, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: StgValue_18 (12)  [1/1] 0.00ns  loc: AXISTry.cpp:21
:7  call void (...)* @_ssdm_op_SpecInterface(i32* %M_AXIS_V_data, i1* %M_AXIS_V_last, [5 x i8]* @p_str2, i32 1, i32 1, [5 x i8]* @p_str3, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: StgValue_19 (13)  [1/1] 1.57ns  loc: AXISTry.cpp:27
:8  br label %1


 <State 2>: 1.57ns
ST_2: i (15)  [1/1] 0.00ns
:0  %i = phi i2 [ 0, %0 ], [ %i_2, %2 ]

ST_2: product (16)  [1/1] 0.00ns
:1  %product = phi i64 [ 1, %0 ], [ %product_1, %2 ]

ST_2: exitcond3 (17)  [1/1] 1.36ns  loc: AXISTry.cpp:27
:2  %exitcond3 = icmp eq i2 %i, -2

ST_2: empty (18)  [1/1] 0.00ns
:3  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 2, i64 2, i64 2)

ST_2: i_2 (19)  [1/1] 0.80ns  loc: AXISTry.cpp:27
:4  %i_2 = add i2 %i, 1

ST_2: StgValue_25 (20)  [1/1] 0.00ns  loc: AXISTry.cpp:27
:5  br i1 %exitcond3, label %.preheader.preheader, label %2

ST_2: empty_6 (23)  [2/2] 0.00ns  loc: AXISTry.cpp:28
:1  %empty_6 = call { i32, i1 } @_ssdm_op_Read.axis.volatile.i32P.i1P(i32* %S_AXIS_V_data, i1* %S_AXIS_V_last)

ST_2: StgValue_27 (29)  [1/1] 1.57ns  loc: AXISTry.cpp:36
.preheader.preheader:0  br label %.preheader


 <State 3>: 6.08ns
ST_3: empty_6 (23)  [1/2] 0.00ns  loc: AXISTry.cpp:28
:1  %empty_6 = call { i32, i1 } @_ssdm_op_Read.axis.volatile.i32P.i1P(i32* %S_AXIS_V_data, i1* %S_AXIS_V_last)

ST_3: tmp_data (24)  [1/1] 0.00ns  loc: AXISTry.cpp:28
:2  %tmp_data = extractvalue { i32, i1 } %empty_6, 0

ST_3: tmp_2 (25)  [1/1] 0.00ns  loc: AXISTry.cpp:28
:3  %tmp_2 = zext i32 %tmp_data to i64

ST_3: product_1 (26)  [6/6] 6.08ns  loc: AXISTry.cpp:28
:4  %product_1 = mul i64 %tmp_2, %product


 <State 4>: 6.08ns
ST_4: product_1 (26)  [5/6] 6.08ns  loc: AXISTry.cpp:28
:4  %product_1 = mul i64 %tmp_2, %product


 <State 5>: 6.08ns
ST_5: product_1 (26)  [4/6] 6.08ns  loc: AXISTry.cpp:28
:4  %product_1 = mul i64 %tmp_2, %product


 <State 6>: 6.08ns
ST_6: product_1 (26)  [3/6] 6.08ns  loc: AXISTry.cpp:28
:4  %product_1 = mul i64 %tmp_2, %product


 <State 7>: 6.08ns
ST_7: product_1 (26)  [2/6] 6.08ns  loc: AXISTry.cpp:28
:4  %product_1 = mul i64 %tmp_2, %product


 <State 8>: 6.08ns
ST_8: StgValue_36 (22)  [1/1] 0.00ns  loc: AXISTry.cpp:27
:0  call void (...)* @_ssdm_op_SpecLoopName([13 x i8]* @p_str4) nounwind

ST_8: product_1 (26)  [1/6] 6.08ns  loc: AXISTry.cpp:28
:4  %product_1 = mul i64 %tmp_2, %product

ST_8: StgValue_38 (27)  [1/1] 0.00ns  loc: AXISTry.cpp:27
:5  br label %1


 <State 9>: 2.73ns
ST_9: i_1 (31)  [1/1] 0.00ns
.preheader:0  %i_1 = phi i2 [ %i_3, %3 ], [ 0, %.preheader.preheader ]

ST_9: exitcond (32)  [1/1] 1.36ns  loc: AXISTry.cpp:36
.preheader:1  %exitcond = icmp eq i2 %i_1, -2

ST_9: empty_7 (33)  [1/1] 0.00ns
.preheader:2  %empty_7 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 2, i64 2, i64 2)

ST_9: i_3 (34)  [1/1] 0.80ns  loc: AXISTry.cpp:36
.preheader:3  %i_3 = add i2 %i_1, 1

ST_9: StgValue_43 (35)  [1/1] 0.00ns  loc: AXISTry.cpp:36
.preheader:4  br i1 %exitcond, label %4, label %3

ST_9: tmp_5 (38)  [1/1] 1.36ns  loc: AXISTry.cpp:37
:1  %tmp_5 = icmp eq i2 %i_1, 0

ST_9: tmp (39)  [1/1] 0.00ns  loc: AXISTry.cpp:37
:2  %tmp = call i32 @_ssdm_op_PartSelect.i32.i64.i32.i32(i64 %product, i32 32, i32 63)

ST_9: tmp_1 (40)  [1/1] 0.00ns  loc: AXISTry.cpp:37
:3  %tmp_1 = trunc i64 %product to i32

ST_9: write_output_data (41)  [1/1] 1.37ns  loc: AXISTry.cpp:37
:4  %write_output_data = select i1 %tmp_5, i32 %tmp, i32 %tmp_1

ST_9: tmp_last (42)  [1/1] 1.36ns  loc: AXISTry.cpp:40
:5  %tmp_last = icmp eq i2 %i_1, 1

ST_9: StgValue_49 (43)  [2/2] 0.00ns  loc: AXISTry.cpp:46
:6  call void @_ssdm_op_Write.axis.volatile.i32P.i1P(i32* %M_AXIS_V_data, i1* %M_AXIS_V_last, i32 %write_output_data, i1 %tmp_last)

ST_9: StgValue_50 (46)  [1/1] 0.00ns  loc: AXISTry.cpp:49
:0  ret void


 <State 10>: 0.00ns
ST_10: StgValue_51 (37)  [1/1] 0.00ns  loc: AXISTry.cpp:36
:0  call void (...)* @_ssdm_op_SpecLoopName([13 x i8]* @p_str5) nounwind

ST_10: StgValue_52 (43)  [1/2] 0.00ns  loc: AXISTry.cpp:46
:6  call void @_ssdm_op_Write.axis.volatile.i32P.i1P(i32* %M_AXIS_V_data, i1* %M_AXIS_V_last, i32 %write_output_data, i1 %tmp_last)

ST_10: StgValue_53 (44)  [1/1] 0.00ns  loc: AXISTry.cpp:36
:7  br label %.preheader



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 1.57ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('i') with incoming values : ('i', AXISTry.cpp:27) [15]  (1.57 ns)

 <State 2>: 1.57ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('i') with incoming values : ('i', AXISTry.cpp:36) [31]  (1.57 ns)

 <State 3>: 6.08ns
The critical path consists of the following:
	axis read on port 'S_AXIS_V_data' (AXISTry.cpp:28) [23]  (0 ns)
	'mul' operation ('product', AXISTry.cpp:28) [26]  (6.08 ns)

 <State 4>: 6.08ns
The critical path consists of the following:
	'mul' operation ('product', AXISTry.cpp:28) [26]  (6.08 ns)

 <State 5>: 6.08ns
The critical path consists of the following:
	'mul' operation ('product', AXISTry.cpp:28) [26]  (6.08 ns)

 <State 6>: 6.08ns
The critical path consists of the following:
	'mul' operation ('product', AXISTry.cpp:28) [26]  (6.08 ns)

 <State 7>: 6.08ns
The critical path consists of the following:
	'mul' operation ('product', AXISTry.cpp:28) [26]  (6.08 ns)

 <State 8>: 6.08ns
The critical path consists of the following:
	'mul' operation ('product', AXISTry.cpp:28) [26]  (6.08 ns)

 <State 9>: 2.73ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', AXISTry.cpp:36) [31]  (0 ns)
	'icmp' operation ('tmp_5', AXISTry.cpp:37) [38]  (1.36 ns)
	'select' operation ('write_output.data', AXISTry.cpp:37) [41]  (1.37 ns)
	axis write on port 'M_AXIS_V_data' (AXISTry.cpp:46) [43]  (0 ns)

 <State 10>: 0ns
The critical path consists of the following:


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
