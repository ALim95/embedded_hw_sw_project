// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "AXISTry.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic AXISTry::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic AXISTry::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> AXISTry::ap_ST_fsm_state1 = "1";
const sc_lv<10> AXISTry::ap_ST_fsm_state2 = "10";
const sc_lv<10> AXISTry::ap_ST_fsm_state3 = "100";
const sc_lv<10> AXISTry::ap_ST_fsm_state4 = "1000";
const sc_lv<10> AXISTry::ap_ST_fsm_state5 = "10000";
const sc_lv<10> AXISTry::ap_ST_fsm_state6 = "100000";
const sc_lv<10> AXISTry::ap_ST_fsm_state7 = "1000000";
const sc_lv<10> AXISTry::ap_ST_fsm_state8 = "10000000";
const sc_lv<10> AXISTry::ap_ST_fsm_state9 = "100000000";
const sc_lv<10> AXISTry::ap_ST_fsm_state10 = "1000000000";
const sc_lv<1> AXISTry::ap_const_lv1_0 = "0";
const sc_lv<1> AXISTry::ap_const_lv1_1 = "1";
const sc_lv<2> AXISTry::ap_const_lv2_0 = "00";
const sc_lv<2> AXISTry::ap_const_lv2_2 = "10";
const sc_lv<2> AXISTry::ap_const_lv2_3 = "11";
const sc_lv<2> AXISTry::ap_const_lv2_1 = "1";
const sc_lv<32> AXISTry::ap_const_lv32_2 = "10";
const sc_lv<32> AXISTry::ap_const_lv32_8 = "1000";
const sc_lv<32> AXISTry::ap_const_lv32_9 = "1001";
const sc_lv<32> AXISTry::ap_const_lv32_1 = "1";
const sc_lv<32> AXISTry::ap_const_lv32_7 = "111";
const sc_lv<32> AXISTry::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<64> AXISTry::ap_const_lv64_1 = "1";
const sc_lv<32> AXISTry::ap_const_lv32_20 = "100000";
const sc_lv<32> AXISTry::ap_const_lv32_3F = "111111";

AXISTry::AXISTry(sc_module_name name) : sc_module(name), mVcdFile(0) {
    AXISTry_mul_32ns_bkb_U0 = new AXISTry_mul_32ns_bkb<1,6,32,64,64>("AXISTry_mul_32ns_bkb_U0");
    AXISTry_mul_32ns_bkb_U0->clk(ap_clk);
    AXISTry_mul_32ns_bkb_U0->reset(ap_rst_n_inv);
    AXISTry_mul_32ns_bkb_U0->din0(grp_fu_128_p0);
    AXISTry_mul_32ns_bkb_U0->din1(product_reg_85);
    AXISTry_mul_32ns_bkb_U0->ce(grp_fu_128_ce);
    AXISTry_mul_32ns_bkb_U0->dout(grp_fu_128_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_M_AXIS_TDATA);
    sensitive << ( M_AXIS_V_data_1_data_out );

    SC_METHOD(thread_M_AXIS_TDATA_blk_n);
    sensitive << ( M_AXIS_V_data_1_state );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond_fu_134_p2 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_M_AXIS_TLAST);
    sensitive << ( M_AXIS_V_last_1_data_out );

    SC_METHOD(thread_M_AXIS_TVALID);
    sensitive << ( M_AXIS_V_last_1_state );

    SC_METHOD(thread_M_AXIS_V_data_1_ack_in);
    sensitive << ( M_AXIS_V_data_1_state );

    SC_METHOD(thread_M_AXIS_V_data_1_ack_out);
    sensitive << ( M_AXIS_TREADY );

    SC_METHOD(thread_M_AXIS_V_data_1_data_out);
    sensitive << ( M_AXIS_V_data_1_payload_A );
    sensitive << ( M_AXIS_V_data_1_payload_B );
    sensitive << ( M_AXIS_V_data_1_sel );

    SC_METHOD(thread_M_AXIS_V_data_1_load_A);
    sensitive << ( M_AXIS_V_data_1_sel_wr );
    sensitive << ( M_AXIS_V_data_1_state_cmp_full );

    SC_METHOD(thread_M_AXIS_V_data_1_load_B);
    sensitive << ( M_AXIS_V_data_1_sel_wr );
    sensitive << ( M_AXIS_V_data_1_state_cmp_full );

    SC_METHOD(thread_M_AXIS_V_data_1_sel);
    sensitive << ( M_AXIS_V_data_1_sel_rd );

    SC_METHOD(thread_M_AXIS_V_data_1_state_cmp_full);
    sensitive << ( M_AXIS_V_data_1_state );

    SC_METHOD(thread_M_AXIS_V_data_1_vld_in);
    sensitive << ( M_AXIS_V_data_1_ack_in );
    sensitive << ( M_AXIS_V_last_1_ack_in );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond_fu_134_p2 );

    SC_METHOD(thread_M_AXIS_V_data_1_vld_out);
    sensitive << ( M_AXIS_V_data_1_state );

    SC_METHOD(thread_M_AXIS_V_last_1_ack_in);
    sensitive << ( M_AXIS_V_last_1_state );

    SC_METHOD(thread_M_AXIS_V_last_1_ack_out);
    sensitive << ( M_AXIS_TREADY );

    SC_METHOD(thread_M_AXIS_V_last_1_data_out);
    sensitive << ( M_AXIS_V_last_1_payload_A );
    sensitive << ( M_AXIS_V_last_1_payload_B );
    sensitive << ( M_AXIS_V_last_1_sel );

    SC_METHOD(thread_M_AXIS_V_last_1_load_A);
    sensitive << ( M_AXIS_V_last_1_sel_wr );
    sensitive << ( M_AXIS_V_last_1_state_cmp_full );

    SC_METHOD(thread_M_AXIS_V_last_1_load_B);
    sensitive << ( M_AXIS_V_last_1_sel_wr );
    sensitive << ( M_AXIS_V_last_1_state_cmp_full );

    SC_METHOD(thread_M_AXIS_V_last_1_sel);
    sensitive << ( M_AXIS_V_last_1_sel_rd );

    SC_METHOD(thread_M_AXIS_V_last_1_state_cmp_full);
    sensitive << ( M_AXIS_V_last_1_state );

    SC_METHOD(thread_M_AXIS_V_last_1_vld_in);
    sensitive << ( M_AXIS_V_data_1_ack_in );
    sensitive << ( M_AXIS_V_last_1_ack_in );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond_fu_134_p2 );

    SC_METHOD(thread_M_AXIS_V_last_1_vld_out);
    sensitive << ( M_AXIS_V_last_1_state );

    SC_METHOD(thread_S_AXIS_TDATA_blk_n);
    sensitive << ( S_AXIS_V_data_0_state );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_S_AXIS_TREADY);
    sensitive << ( S_AXIS_V_last_0_state );

    SC_METHOD(thread_S_AXIS_V_data_0_ack_in);
    sensitive << ( S_AXIS_V_data_0_state );

    SC_METHOD(thread_S_AXIS_V_data_0_ack_out);
    sensitive << ( S_AXIS_V_data_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_S_AXIS_V_data_0_data_out);
    sensitive << ( S_AXIS_V_data_0_payload_A );
    sensitive << ( S_AXIS_V_data_0_payload_B );
    sensitive << ( S_AXIS_V_data_0_sel );

    SC_METHOD(thread_S_AXIS_V_data_0_load_A);
    sensitive << ( S_AXIS_V_data_0_sel_wr );
    sensitive << ( S_AXIS_V_data_0_state_cmp_full );

    SC_METHOD(thread_S_AXIS_V_data_0_load_B);
    sensitive << ( S_AXIS_V_data_0_sel_wr );
    sensitive << ( S_AXIS_V_data_0_state_cmp_full );

    SC_METHOD(thread_S_AXIS_V_data_0_sel);
    sensitive << ( S_AXIS_V_data_0_sel_rd );

    SC_METHOD(thread_S_AXIS_V_data_0_state_cmp_full);
    sensitive << ( S_AXIS_V_data_0_state );

    SC_METHOD(thread_S_AXIS_V_data_0_vld_in);
    sensitive << ( S_AXIS_TVALID );

    SC_METHOD(thread_S_AXIS_V_data_0_vld_out);
    sensitive << ( S_AXIS_V_data_0_state );

    SC_METHOD(thread_S_AXIS_V_last_0_ack_out);
    sensitive << ( S_AXIS_V_data_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_S_AXIS_V_last_0_vld_in);
    sensitive << ( S_AXIS_TVALID );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_exitcond3_fu_108_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_74 );

    SC_METHOD(thread_exitcond_fu_134_p2);
    sensitive << ( M_AXIS_V_data_1_ack_in );
    sensitive << ( M_AXIS_V_last_1_ack_in );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond_fu_134_p2 );
    sensitive << ( i_1_reg_97 );

    SC_METHOD(thread_grp_fu_128_ce);
    sensitive << ( S_AXIS_V_data_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_grp_fu_128_p0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_fu_128_p00 );

    SC_METHOD(thread_grp_fu_128_p00);
    sensitive << ( S_AXIS_V_data_0_data_out );

    SC_METHOD(thread_i_2_fu_114_p2);
    sensitive << ( i_reg_74 );

    SC_METHOD(thread_i_3_fu_140_p2);
    sensitive << ( i_1_reg_97 );

    SC_METHOD(thread_tmp_1_fu_162_p1);
    sensitive << ( product_reg_85 );

    SC_METHOD(thread_tmp_5_fu_146_p2);
    sensitive << ( M_AXIS_V_data_1_ack_in );
    sensitive << ( M_AXIS_V_last_1_ack_in );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond_fu_134_p2 );
    sensitive << ( i_1_reg_97 );

    SC_METHOD(thread_tmp_fu_152_p4);
    sensitive << ( product_reg_85 );

    SC_METHOD(thread_tmp_last_fu_175_p2);
    sensitive << ( M_AXIS_V_data_1_ack_in );
    sensitive << ( M_AXIS_V_last_1_ack_in );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond_fu_134_p2 );
    sensitive << ( i_1_reg_97 );

    SC_METHOD(thread_write_output_data_fu_166_p3);
    sensitive << ( tmp_5_fu_146_p2 );
    sensitive << ( tmp_fu_152_p4 );
    sensitive << ( tmp_1_fu_162_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( S_AXIS_V_data_0_vld_out );
    sensitive << ( M_AXIS_V_data_1_ack_in );
    sensitive << ( M_AXIS_V_last_1_ack_in );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_134_p2 );
    sensitive << ( exitcond3_fu_108_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    S_AXIS_V_data_0_sel_rd = SC_LOGIC_0;
    S_AXIS_V_data_0_sel_wr = SC_LOGIC_0;
    S_AXIS_V_data_0_state = "00";
    S_AXIS_V_last_0_state = "00";
    M_AXIS_V_data_1_sel_rd = SC_LOGIC_0;
    M_AXIS_V_data_1_sel_wr = SC_LOGIC_0;
    M_AXIS_V_data_1_state = "00";
    M_AXIS_V_last_1_sel_rd = SC_LOGIC_0;
    M_AXIS_V_last_1_sel_wr = SC_LOGIC_0;
    M_AXIS_V_last_1_state = "00";
    ap_CS_fsm = "0000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "AXISTry_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, S_AXIS_TDATA, "(port)S_AXIS_TDATA");
    sc_trace(mVcdFile, S_AXIS_TVALID, "(port)S_AXIS_TVALID");
    sc_trace(mVcdFile, S_AXIS_TREADY, "(port)S_AXIS_TREADY");
    sc_trace(mVcdFile, S_AXIS_TLAST, "(port)S_AXIS_TLAST");
    sc_trace(mVcdFile, M_AXIS_TDATA, "(port)M_AXIS_TDATA");
    sc_trace(mVcdFile, M_AXIS_TVALID, "(port)M_AXIS_TVALID");
    sc_trace(mVcdFile, M_AXIS_TREADY, "(port)M_AXIS_TREADY");
    sc_trace(mVcdFile, M_AXIS_TLAST, "(port)M_AXIS_TLAST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, S_AXIS_V_data_0_data_out, "S_AXIS_V_data_0_data_out");
    sc_trace(mVcdFile, S_AXIS_V_data_0_vld_in, "S_AXIS_V_data_0_vld_in");
    sc_trace(mVcdFile, S_AXIS_V_data_0_vld_out, "S_AXIS_V_data_0_vld_out");
    sc_trace(mVcdFile, S_AXIS_V_data_0_ack_in, "S_AXIS_V_data_0_ack_in");
    sc_trace(mVcdFile, S_AXIS_V_data_0_ack_out, "S_AXIS_V_data_0_ack_out");
    sc_trace(mVcdFile, S_AXIS_V_data_0_payload_A, "S_AXIS_V_data_0_payload_A");
    sc_trace(mVcdFile, S_AXIS_V_data_0_payload_B, "S_AXIS_V_data_0_payload_B");
    sc_trace(mVcdFile, S_AXIS_V_data_0_sel_rd, "S_AXIS_V_data_0_sel_rd");
    sc_trace(mVcdFile, S_AXIS_V_data_0_sel_wr, "S_AXIS_V_data_0_sel_wr");
    sc_trace(mVcdFile, S_AXIS_V_data_0_sel, "S_AXIS_V_data_0_sel");
    sc_trace(mVcdFile, S_AXIS_V_data_0_load_A, "S_AXIS_V_data_0_load_A");
    sc_trace(mVcdFile, S_AXIS_V_data_0_load_B, "S_AXIS_V_data_0_load_B");
    sc_trace(mVcdFile, S_AXIS_V_data_0_state, "S_AXIS_V_data_0_state");
    sc_trace(mVcdFile, S_AXIS_V_data_0_state_cmp_full, "S_AXIS_V_data_0_state_cmp_full");
    sc_trace(mVcdFile, S_AXIS_V_last_0_vld_in, "S_AXIS_V_last_0_vld_in");
    sc_trace(mVcdFile, S_AXIS_V_last_0_ack_out, "S_AXIS_V_last_0_ack_out");
    sc_trace(mVcdFile, S_AXIS_V_last_0_state, "S_AXIS_V_last_0_state");
    sc_trace(mVcdFile, M_AXIS_V_data_1_data_out, "M_AXIS_V_data_1_data_out");
    sc_trace(mVcdFile, M_AXIS_V_data_1_vld_in, "M_AXIS_V_data_1_vld_in");
    sc_trace(mVcdFile, M_AXIS_V_data_1_vld_out, "M_AXIS_V_data_1_vld_out");
    sc_trace(mVcdFile, M_AXIS_V_data_1_ack_in, "M_AXIS_V_data_1_ack_in");
    sc_trace(mVcdFile, M_AXIS_V_data_1_ack_out, "M_AXIS_V_data_1_ack_out");
    sc_trace(mVcdFile, M_AXIS_V_data_1_payload_A, "M_AXIS_V_data_1_payload_A");
    sc_trace(mVcdFile, M_AXIS_V_data_1_payload_B, "M_AXIS_V_data_1_payload_B");
    sc_trace(mVcdFile, M_AXIS_V_data_1_sel_rd, "M_AXIS_V_data_1_sel_rd");
    sc_trace(mVcdFile, M_AXIS_V_data_1_sel_wr, "M_AXIS_V_data_1_sel_wr");
    sc_trace(mVcdFile, M_AXIS_V_data_1_sel, "M_AXIS_V_data_1_sel");
    sc_trace(mVcdFile, M_AXIS_V_data_1_load_A, "M_AXIS_V_data_1_load_A");
    sc_trace(mVcdFile, M_AXIS_V_data_1_load_B, "M_AXIS_V_data_1_load_B");
    sc_trace(mVcdFile, M_AXIS_V_data_1_state, "M_AXIS_V_data_1_state");
    sc_trace(mVcdFile, M_AXIS_V_data_1_state_cmp_full, "M_AXIS_V_data_1_state_cmp_full");
    sc_trace(mVcdFile, M_AXIS_V_last_1_data_out, "M_AXIS_V_last_1_data_out");
    sc_trace(mVcdFile, M_AXIS_V_last_1_vld_in, "M_AXIS_V_last_1_vld_in");
    sc_trace(mVcdFile, M_AXIS_V_last_1_vld_out, "M_AXIS_V_last_1_vld_out");
    sc_trace(mVcdFile, M_AXIS_V_last_1_ack_in, "M_AXIS_V_last_1_ack_in");
    sc_trace(mVcdFile, M_AXIS_V_last_1_ack_out, "M_AXIS_V_last_1_ack_out");
    sc_trace(mVcdFile, M_AXIS_V_last_1_payload_A, "M_AXIS_V_last_1_payload_A");
    sc_trace(mVcdFile, M_AXIS_V_last_1_payload_B, "M_AXIS_V_last_1_payload_B");
    sc_trace(mVcdFile, M_AXIS_V_last_1_sel_rd, "M_AXIS_V_last_1_sel_rd");
    sc_trace(mVcdFile, M_AXIS_V_last_1_sel_wr, "M_AXIS_V_last_1_sel_wr");
    sc_trace(mVcdFile, M_AXIS_V_last_1_sel, "M_AXIS_V_last_1_sel");
    sc_trace(mVcdFile, M_AXIS_V_last_1_load_A, "M_AXIS_V_last_1_load_A");
    sc_trace(mVcdFile, M_AXIS_V_last_1_load_B, "M_AXIS_V_last_1_load_B");
    sc_trace(mVcdFile, M_AXIS_V_last_1_state, "M_AXIS_V_last_1_state");
    sc_trace(mVcdFile, M_AXIS_V_last_1_state_cmp_full, "M_AXIS_V_last_1_state_cmp_full");
    sc_trace(mVcdFile, S_AXIS_TDATA_blk_n, "S_AXIS_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, M_AXIS_TDATA_blk_n, "M_AXIS_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, exitcond_fu_134_p2, "exitcond_fu_134_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, i_2_fu_114_p2, "i_2_fu_114_p2");
    sc_trace(mVcdFile, i_2_reg_185, "i_2_reg_185");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_fu_128_p2, "grp_fu_128_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, i_3_fu_140_p2, "i_3_fu_140_p2");
    sc_trace(mVcdFile, i_3_reg_203, "i_3_reg_203");
    sc_trace(mVcdFile, write_output_data_fu_166_p3, "write_output_data_fu_166_p3");
    sc_trace(mVcdFile, tmp_last_fu_175_p2, "tmp_last_fu_175_p2");
    sc_trace(mVcdFile, i_reg_74, "i_reg_74");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, product_reg_85, "product_reg_85");
    sc_trace(mVcdFile, i_1_reg_97, "i_1_reg_97");
    sc_trace(mVcdFile, exitcond3_fu_108_p2, "exitcond3_fu_108_p2");
    sc_trace(mVcdFile, grp_fu_128_p0, "grp_fu_128_p0");
    sc_trace(mVcdFile, tmp_5_fu_146_p2, "tmp_5_fu_146_p2");
    sc_trace(mVcdFile, tmp_fu_152_p4, "tmp_fu_152_p4");
    sc_trace(mVcdFile, tmp_1_fu_162_p1, "tmp_1_fu_162_p1");
    sc_trace(mVcdFile, grp_fu_128_ce, "grp_fu_128_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, grp_fu_128_p00, "grp_fu_128_p00");
#endif

    }
    mHdltvinHandle.open("AXISTry.hdltvin.dat");
    mHdltvoutHandle.open("AXISTry.hdltvout.dat");
}

AXISTry::~AXISTry() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete AXISTry_mul_32ns_bkb_U0;
}

void AXISTry::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        M_AXIS_V_data_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, M_AXIS_V_data_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, M_AXIS_V_data_1_vld_out.read()))) {
            M_AXIS_V_data_1_sel_rd =  (sc_logic) (~M_AXIS_V_data_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        M_AXIS_V_data_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, M_AXIS_V_data_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, M_AXIS_V_data_1_ack_in.read()))) {
            M_AXIS_V_data_1_sel_wr =  (sc_logic) (~M_AXIS_V_data_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        M_AXIS_V_data_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, M_AXIS_V_data_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, M_AXIS_V_data_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, M_AXIS_V_data_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, M_AXIS_V_data_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, M_AXIS_V_data_1_state.read())))) {
            M_AXIS_V_data_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, M_AXIS_V_data_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, M_AXIS_V_data_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, M_AXIS_V_data_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, M_AXIS_V_data_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, M_AXIS_V_data_1_state.read())))) {
            M_AXIS_V_data_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, M_AXIS_V_data_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, M_AXIS_V_data_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, M_AXIS_V_data_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, M_AXIS_V_data_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, M_AXIS_V_data_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, M_AXIS_V_data_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, M_AXIS_V_data_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, M_AXIS_V_data_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, M_AXIS_V_data_1_ack_out.read()))))) {
            M_AXIS_V_data_1_state = ap_const_lv2_3;
        } else {
            M_AXIS_V_data_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        M_AXIS_V_last_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, M_AXIS_V_last_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, M_AXIS_V_last_1_vld_out.read()))) {
            M_AXIS_V_last_1_sel_rd =  (sc_logic) (~M_AXIS_V_last_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        M_AXIS_V_last_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, M_AXIS_V_last_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, M_AXIS_V_last_1_ack_in.read()))) {
            M_AXIS_V_last_1_sel_wr =  (sc_logic) (~M_AXIS_V_last_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        M_AXIS_V_last_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, M_AXIS_V_last_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, M_AXIS_V_last_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, M_AXIS_V_last_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, M_AXIS_V_last_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, M_AXIS_V_last_1_state.read())))) {
            M_AXIS_V_last_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, M_AXIS_V_last_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, M_AXIS_V_last_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, M_AXIS_V_last_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, M_AXIS_V_last_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, M_AXIS_V_last_1_state.read())))) {
            M_AXIS_V_last_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, M_AXIS_V_last_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, M_AXIS_V_last_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, M_AXIS_V_last_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, M_AXIS_V_last_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, M_AXIS_V_last_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, M_AXIS_V_last_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, M_AXIS_V_last_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, M_AXIS_V_last_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, M_AXIS_V_last_1_ack_out.read()))))) {
            M_AXIS_V_last_1_state = ap_const_lv2_3;
        } else {
            M_AXIS_V_last_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        S_AXIS_V_data_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, S_AXIS_V_data_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, S_AXIS_V_data_0_vld_out.read()))) {
            S_AXIS_V_data_0_sel_rd =  (sc_logic) (~S_AXIS_V_data_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        S_AXIS_V_data_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, S_AXIS_V_data_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, S_AXIS_V_data_0_ack_in.read()))) {
            S_AXIS_V_data_0_sel_wr =  (sc_logic) (~S_AXIS_V_data_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        S_AXIS_V_data_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, S_AXIS_V_data_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, S_AXIS_V_data_0_ack_out.read()) && 
              esl_seteq<1,2,2>(S_AXIS_V_data_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, S_AXIS_V_data_0_vld_in.read()) && 
              esl_seteq<1,2,2>(S_AXIS_V_data_0_state.read(), ap_const_lv2_2)))) {
            S_AXIS_V_data_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, S_AXIS_V_data_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, S_AXIS_V_data_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(S_AXIS_V_data_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, S_AXIS_V_data_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(S_AXIS_V_data_0_state.read(), ap_const_lv2_1)))) {
            S_AXIS_V_data_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, S_AXIS_V_data_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(S_AXIS_V_data_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, S_AXIS_V_data_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(S_AXIS_V_data_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(S_AXIS_V_data_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, S_AXIS_V_data_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, S_AXIS_V_data_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, S_AXIS_V_data_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, S_AXIS_V_data_0_ack_out.read()))))) {
            S_AXIS_V_data_0_state = ap_const_lv2_3;
        } else {
            S_AXIS_V_data_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        S_AXIS_V_last_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, S_AXIS_V_last_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, S_AXIS_V_last_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, S_AXIS_V_last_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, S_AXIS_V_last_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, S_AXIS_V_last_0_state.read())))) {
            S_AXIS_V_last_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, S_AXIS_V_last_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, S_AXIS_V_last_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, S_AXIS_V_last_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, S_AXIS_V_last_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, S_AXIS_V_last_0_state.read())))) {
            S_AXIS_V_last_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, S_AXIS_V_last_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, S_AXIS_V_last_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, S_AXIS_V_last_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, S_AXIS_V_last_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, S_AXIS_V_last_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, S_AXIS_V_last_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, S_AXIS_V_last_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, S_AXIS_V_last_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, S_AXIS_V_last_0_ack_out.read()))))) {
            S_AXIS_V_last_0_state = ap_const_lv2_3;
        } else {
            S_AXIS_V_last_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_108_p2.read()))) {
        i_1_reg_97 = ap_const_lv2_0;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read()) && 
                !esl_seteq<1,1,1>(ap_const_logic_0, M_AXIS_V_data_1_ack_in.read()))) {
        i_1_reg_97 = i_3_reg_203.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read()))) {
        i_reg_74 = i_2_reg_185.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state1.read()))) {
        i_reg_74 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read()))) {
        product_reg_85 = grp_fu_128_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state1.read()))) {
        product_reg_85 = ap_const_lv64_1;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, M_AXIS_V_data_1_load_A.read())) {
        M_AXIS_V_data_1_payload_A = write_output_data_fu_166_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, M_AXIS_V_data_1_load_B.read())) {
        M_AXIS_V_data_1_payload_B = write_output_data_fu_166_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, M_AXIS_V_last_1_load_A.read())) {
        M_AXIS_V_last_1_payload_A =  (sc_logic) (tmp_last_fu_175_p2.read()[0]);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, M_AXIS_V_last_1_load_B.read())) {
        M_AXIS_V_last_1_payload_B =  (sc_logic) (tmp_last_fu_175_p2.read()[0]);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, S_AXIS_V_data_0_load_A.read())) {
        S_AXIS_V_data_0_payload_A = S_AXIS_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, S_AXIS_V_data_0_load_B.read())) {
        S_AXIS_V_data_0_payload_B = S_AXIS_TDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        i_2_reg_185 = i_2_fu_114_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read()) && !(esl_seteq<1,1,1>(M_AXIS_V_data_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(M_AXIS_V_last_1_ack_in.read(), ap_const_logic_0) || (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_134_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, M_AXIS_V_data_1_ack_in.read()))))) {
        i_3_reg_203 = i_3_fu_140_p2.read();
    }
}

void AXISTry::thread_M_AXIS_TDATA() {
    M_AXIS_TDATA = M_AXIS_V_data_1_data_out.read();
}

void AXISTry::thread_M_AXIS_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_134_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())))) {
        M_AXIS_TDATA_blk_n =  (sc_logic) (M_AXIS_V_data_1_state.read()[1]);
    } else {
        M_AXIS_TDATA_blk_n = ap_const_logic_1;
    }
}

void AXISTry::thread_M_AXIS_TLAST() {
    M_AXIS_TLAST = M_AXIS_V_last_1_data_out.read();
}

void AXISTry::thread_M_AXIS_TVALID() {
    M_AXIS_TVALID =  (sc_logic) (M_AXIS_V_last_1_state.read()[0]);
}

void AXISTry::thread_M_AXIS_V_data_1_ack_in() {
    M_AXIS_V_data_1_ack_in =  (sc_logic) (M_AXIS_V_data_1_state.read()[1]);
}

void AXISTry::thread_M_AXIS_V_data_1_ack_out() {
    M_AXIS_V_data_1_ack_out = M_AXIS_TREADY.read();
}

void AXISTry::thread_M_AXIS_V_data_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, M_AXIS_V_data_1_sel.read())) {
        M_AXIS_V_data_1_data_out = M_AXIS_V_data_1_payload_B.read();
    } else {
        M_AXIS_V_data_1_data_out = M_AXIS_V_data_1_payload_A.read();
    }
}

void AXISTry::thread_M_AXIS_V_data_1_load_A() {
    M_AXIS_V_data_1_load_A = (M_AXIS_V_data_1_state_cmp_full.read() & ~M_AXIS_V_data_1_sel_wr.read());
}

void AXISTry::thread_M_AXIS_V_data_1_load_B() {
    M_AXIS_V_data_1_load_B = (M_AXIS_V_data_1_sel_wr.read() & M_AXIS_V_data_1_state_cmp_full.read());
}

void AXISTry::thread_M_AXIS_V_data_1_sel() {
    M_AXIS_V_data_1_sel = M_AXIS_V_data_1_sel_rd.read();
}

void AXISTry::thread_M_AXIS_V_data_1_state_cmp_full() {
    M_AXIS_V_data_1_state_cmp_full =  (sc_logic) ((!M_AXIS_V_data_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(M_AXIS_V_data_1_state.read() != ap_const_lv2_1))[0];
}

void AXISTry::thread_M_AXIS_V_data_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_134_p2.read()) && 
         !(esl_seteq<1,1,1>(M_AXIS_V_data_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(M_AXIS_V_last_1_ack_in.read(), ap_const_logic_0) || (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_134_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, M_AXIS_V_data_1_ack_in.read()))))) {
        M_AXIS_V_data_1_vld_in = ap_const_logic_1;
    } else {
        M_AXIS_V_data_1_vld_in = ap_const_logic_0;
    }
}

void AXISTry::thread_M_AXIS_V_data_1_vld_out() {
    M_AXIS_V_data_1_vld_out =  (sc_logic) (M_AXIS_V_data_1_state.read()[0]);
}

void AXISTry::thread_M_AXIS_V_last_1_ack_in() {
    M_AXIS_V_last_1_ack_in =  (sc_logic) (M_AXIS_V_last_1_state.read()[1]);
}

void AXISTry::thread_M_AXIS_V_last_1_ack_out() {
    M_AXIS_V_last_1_ack_out = M_AXIS_TREADY.read();
}

void AXISTry::thread_M_AXIS_V_last_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, M_AXIS_V_last_1_sel.read())) {
        M_AXIS_V_last_1_data_out = M_AXIS_V_last_1_payload_B.read();
    } else {
        M_AXIS_V_last_1_data_out = M_AXIS_V_last_1_payload_A.read();
    }
}

void AXISTry::thread_M_AXIS_V_last_1_load_A() {
    M_AXIS_V_last_1_load_A = (M_AXIS_V_last_1_state_cmp_full.read() & ~M_AXIS_V_last_1_sel_wr.read());
}

void AXISTry::thread_M_AXIS_V_last_1_load_B() {
    M_AXIS_V_last_1_load_B = (M_AXIS_V_last_1_sel_wr.read() & M_AXIS_V_last_1_state_cmp_full.read());
}

void AXISTry::thread_M_AXIS_V_last_1_sel() {
    M_AXIS_V_last_1_sel = M_AXIS_V_last_1_sel_rd.read();
}

void AXISTry::thread_M_AXIS_V_last_1_state_cmp_full() {
    M_AXIS_V_last_1_state_cmp_full =  (sc_logic) ((!M_AXIS_V_last_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(M_AXIS_V_last_1_state.read() != ap_const_lv2_1))[0];
}

void AXISTry::thread_M_AXIS_V_last_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_134_p2.read()) && 
         !(esl_seteq<1,1,1>(M_AXIS_V_data_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(M_AXIS_V_last_1_ack_in.read(), ap_const_logic_0) || (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_134_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, M_AXIS_V_data_1_ack_in.read()))))) {
        M_AXIS_V_last_1_vld_in = ap_const_logic_1;
    } else {
        M_AXIS_V_last_1_vld_in = ap_const_logic_0;
    }
}

void AXISTry::thread_M_AXIS_V_last_1_vld_out() {
    M_AXIS_V_last_1_vld_out =  (sc_logic) (M_AXIS_V_last_1_state.read()[0]);
}

void AXISTry::thread_S_AXIS_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        S_AXIS_TDATA_blk_n =  (sc_logic) (S_AXIS_V_data_0_state.read()[0]);
    } else {
        S_AXIS_TDATA_blk_n = ap_const_logic_1;
    }
}

void AXISTry::thread_S_AXIS_TREADY() {
    S_AXIS_TREADY =  (sc_logic) (S_AXIS_V_last_0_state.read()[1]);
}

void AXISTry::thread_S_AXIS_V_data_0_ack_in() {
    S_AXIS_V_data_0_ack_in =  (sc_logic) (S_AXIS_V_data_0_state.read()[1]);
}

void AXISTry::thread_S_AXIS_V_data_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
         !esl_seteq<1,1,1>(S_AXIS_V_data_0_vld_out.read(), ap_const_logic_0))) {
        S_AXIS_V_data_0_ack_out = ap_const_logic_1;
    } else {
        S_AXIS_V_data_0_ack_out = ap_const_logic_0;
    }
}

void AXISTry::thread_S_AXIS_V_data_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, S_AXIS_V_data_0_sel.read())) {
        S_AXIS_V_data_0_data_out = S_AXIS_V_data_0_payload_B.read();
    } else {
        S_AXIS_V_data_0_data_out = S_AXIS_V_data_0_payload_A.read();
    }
}

void AXISTry::thread_S_AXIS_V_data_0_load_A() {
    S_AXIS_V_data_0_load_A = (S_AXIS_V_data_0_state_cmp_full.read() & ~S_AXIS_V_data_0_sel_wr.read());
}

void AXISTry::thread_S_AXIS_V_data_0_load_B() {
    S_AXIS_V_data_0_load_B = (S_AXIS_V_data_0_sel_wr.read() & S_AXIS_V_data_0_state_cmp_full.read());
}

void AXISTry::thread_S_AXIS_V_data_0_sel() {
    S_AXIS_V_data_0_sel = S_AXIS_V_data_0_sel_rd.read();
}

void AXISTry::thread_S_AXIS_V_data_0_state_cmp_full() {
    S_AXIS_V_data_0_state_cmp_full =  (sc_logic) ((!S_AXIS_V_data_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(S_AXIS_V_data_0_state.read() != ap_const_lv2_1))[0];
}

void AXISTry::thread_S_AXIS_V_data_0_vld_in() {
    S_AXIS_V_data_0_vld_in = S_AXIS_TVALID.read();
}

void AXISTry::thread_S_AXIS_V_data_0_vld_out() {
    S_AXIS_V_data_0_vld_out =  (sc_logic) (S_AXIS_V_data_0_state.read()[0]);
}

void AXISTry::thread_S_AXIS_V_last_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
         !esl_seteq<1,1,1>(S_AXIS_V_data_0_vld_out.read(), ap_const_logic_0))) {
        S_AXIS_V_last_0_ack_out = ap_const_logic_1;
    } else {
        S_AXIS_V_last_0_ack_out = ap_const_logic_0;
    }
}

void AXISTry::thread_S_AXIS_V_last_0_vld_in() {
    S_AXIS_V_last_0_vld_in = S_AXIS_TVALID.read();
}

void AXISTry::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void AXISTry::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read().range(9, 9);
}

void AXISTry::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void AXISTry::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read().range(2, 2);
}

void AXISTry::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read().range(7, 7);
}

void AXISTry::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read().range(8, 8);
}

void AXISTry::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void AXISTry::thread_exitcond3_fu_108_p2() {
    exitcond3_fu_108_p2 = (!i_reg_74.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_74.read() == ap_const_lv2_2);
}

void AXISTry::thread_exitcond_fu_134_p2() {
    exitcond_fu_134_p2 = (!i_1_reg_97.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_97.read() == ap_const_lv2_2);
}

void AXISTry::thread_grp_fu_128_ce() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state1.read()) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(S_AXIS_V_data_0_vld_out.read(), ap_const_logic_0)))) {
        grp_fu_128_ce = ap_const_logic_0;
    } else {
        grp_fu_128_ce = ap_const_logic_1;
    }
}

void AXISTry::thread_grp_fu_128_p0() {
    grp_fu_128_p0 =  (sc_lv<32>) (grp_fu_128_p00.read());
}

void AXISTry::thread_grp_fu_128_p00() {
    grp_fu_128_p00 = esl_zext<64,32>(S_AXIS_V_data_0_data_out.read());
}

void AXISTry::thread_i_2_fu_114_p2() {
    i_2_fu_114_p2 = (!i_reg_74.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i_reg_74.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void AXISTry::thread_i_3_fu_140_p2() {
    i_3_fu_140_p2 = (!i_1_reg_97.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i_1_reg_97.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void AXISTry::thread_tmp_1_fu_162_p1() {
    tmp_1_fu_162_p1 = product_reg_85.read().range(32-1, 0);
}

void AXISTry::thread_tmp_5_fu_146_p2() {
    tmp_5_fu_146_p2 = (!i_1_reg_97.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_97.read() == ap_const_lv2_0);
}

void AXISTry::thread_tmp_fu_152_p4() {
    tmp_fu_152_p4 = product_reg_85.read().range(63, 32);
}

void AXISTry::thread_tmp_last_fu_175_p2() {
    tmp_last_fu_175_p2 = (!i_1_reg_97.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_97.read() == ap_const_lv2_1);
}

void AXISTry::thread_write_output_data_fu_166_p3() {
    write_output_data_fu_166_p3 = (!tmp_5_fu_146_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_5_fu_146_p2.read()[0].to_bool())? tmp_fu_152_p4.read(): tmp_1_fu_162_p1.read());
}

void AXISTry::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_108_p2.read())) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if (!esl_seteq<1,1,1>(S_AXIS_V_data_0_vld_out.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 256 : 
            if ((!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_134_p2.read()) && !(esl_seteq<1,1,1>(M_AXIS_V_data_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(M_AXIS_V_last_1_ack_in.read(), ap_const_logic_0) || (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_134_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, M_AXIS_V_data_1_ack_in.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_134_p2.read()) && !(esl_seteq<1,1,1>(M_AXIS_V_data_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(M_AXIS_V_last_1_ack_in.read(), ap_const_logic_0) || (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_134_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, M_AXIS_V_data_1_ack_in.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, M_AXIS_V_data_1_ack_in.read())) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXX";
            break;
    }
}

void AXISTry::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"S_AXIS_TDATA\" :  \"" << S_AXIS_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"S_AXIS_TVALID\" :  \"" << S_AXIS_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"S_AXIS_TREADY\" :  \"" << S_AXIS_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"S_AXIS_TLAST\" :  \"" << S_AXIS_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"M_AXIS_TDATA\" :  \"" << M_AXIS_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"M_AXIS_TVALID\" :  \"" << M_AXIS_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"M_AXIS_TREADY\" :  \"" << M_AXIS_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"M_AXIS_TLAST\" :  \"" << M_AXIS_TLAST.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

