// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="AXISTry,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.080000,HLS_SYN_LAT=20,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=8,HLS_SYN_FF=226,HLS_SYN_LUT=198}" *)

module AXISTry (
        ap_clk,
        ap_rst_n,
        S_AXIS_TDATA,
        S_AXIS_TVALID,
        S_AXIS_TREADY,
        S_AXIS_TLAST,
        M_AXIS_TDATA,
        M_AXIS_TVALID,
        M_AXIS_TREADY,
        M_AXIS_TLAST
);

parameter    ap_ST_fsm_state1 = 10'b1;
parameter    ap_ST_fsm_state2 = 10'b10;
parameter    ap_ST_fsm_state3 = 10'b100;
parameter    ap_ST_fsm_state4 = 10'b1000;
parameter    ap_ST_fsm_state5 = 10'b10000;
parameter    ap_ST_fsm_state6 = 10'b100000;
parameter    ap_ST_fsm_state7 = 10'b1000000;
parameter    ap_ST_fsm_state8 = 10'b10000000;
parameter    ap_ST_fsm_state9 = 10'b100000000;
parameter    ap_ST_fsm_state10 = 10'b1000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv64_1 = 64'b1;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_3F = 32'b111111;

input   ap_clk;
input   ap_rst_n;
input  [31:0] S_AXIS_TDATA;
input   S_AXIS_TVALID;
output   S_AXIS_TREADY;
input   S_AXIS_TLAST;
output  [31:0] M_AXIS_TDATA;
output   M_AXIS_TVALID;
input   M_AXIS_TREADY;
output   M_AXIS_TLAST;

reg    ap_rst_n_inv;
reg   [31:0] S_AXIS_V_data_0_data_out;
wire    S_AXIS_V_data_0_vld_in;
wire    S_AXIS_V_data_0_vld_out;
wire    S_AXIS_V_data_0_ack_in;
reg    S_AXIS_V_data_0_ack_out;
reg   [31:0] S_AXIS_V_data_0_payload_A;
reg   [31:0] S_AXIS_V_data_0_payload_B;
reg    S_AXIS_V_data_0_sel_rd;
reg    S_AXIS_V_data_0_sel_wr;
wire    S_AXIS_V_data_0_sel;
wire    S_AXIS_V_data_0_load_A;
wire    S_AXIS_V_data_0_load_B;
reg   [1:0] S_AXIS_V_data_0_state;
wire    S_AXIS_V_data_0_state_cmp_full;
wire    S_AXIS_V_last_0_vld_in;
reg    S_AXIS_V_last_0_ack_out;
reg   [1:0] S_AXIS_V_last_0_state;
reg   [31:0] M_AXIS_V_data_1_data_out;
reg    M_AXIS_V_data_1_vld_in;
wire    M_AXIS_V_data_1_vld_out;
wire    M_AXIS_V_data_1_ack_in;
wire    M_AXIS_V_data_1_ack_out;
reg   [31:0] M_AXIS_V_data_1_payload_A;
reg   [31:0] M_AXIS_V_data_1_payload_B;
reg    M_AXIS_V_data_1_sel_rd;
reg    M_AXIS_V_data_1_sel_wr;
wire    M_AXIS_V_data_1_sel;
wire    M_AXIS_V_data_1_load_A;
wire    M_AXIS_V_data_1_load_B;
reg   [1:0] M_AXIS_V_data_1_state;
wire    M_AXIS_V_data_1_state_cmp_full;
reg    M_AXIS_V_last_1_data_out;
reg    M_AXIS_V_last_1_vld_in;
wire    M_AXIS_V_last_1_vld_out;
wire    M_AXIS_V_last_1_ack_in;
wire    M_AXIS_V_last_1_ack_out;
reg    M_AXIS_V_last_1_payload_A;
reg    M_AXIS_V_last_1_payload_B;
reg    M_AXIS_V_last_1_sel_rd;
reg    M_AXIS_V_last_1_sel_wr;
wire    M_AXIS_V_last_1_sel;
wire    M_AXIS_V_last_1_load_A;
wire    M_AXIS_V_last_1_load_B;
reg   [1:0] M_AXIS_V_last_1_state;
wire    M_AXIS_V_last_1_state_cmp_full;
reg    S_AXIS_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state3;
reg    M_AXIS_TDATA_blk_n;
wire   [0:0] ap_CS_fsm_state9;
wire   [0:0] exitcond_fu_134_p2;
wire   [0:0] ap_CS_fsm_state10;
wire   [1:0] i_2_fu_114_p2;
reg   [1:0] i_2_reg_185;
wire   [0:0] ap_CS_fsm_state2;
wire   [63:0] grp_fu_128_p2;
wire   [0:0] ap_CS_fsm_state8;
wire   [1:0] i_3_fu_140_p2;
reg   [1:0] i_3_reg_203;
wire   [31:0] write_output_data_fu_166_p3;
wire   [0:0] tmp_last_fu_175_p2;
reg   [1:0] i_reg_74;
wire   [0:0] ap_CS_fsm_state1;
reg  signed [63:0] product_reg_85;
reg   [1:0] i_1_reg_97;
wire   [0:0] exitcond3_fu_108_p2;
wire   [31:0] grp_fu_128_p0;
wire   [0:0] tmp_5_fu_146_p2;
wire   [31:0] tmp_fu_152_p4;
wire   [31:0] tmp_1_fu_162_p1;
reg    grp_fu_128_ce;
reg   [9:0] ap_NS_fsm;
wire   [63:0] grp_fu_128_p00;

// power-on initialization
initial begin
#0 S_AXIS_V_data_0_sel_rd = 1'b0;
#0 S_AXIS_V_data_0_sel_wr = 1'b0;
#0 S_AXIS_V_data_0_state = 2'b00;
#0 S_AXIS_V_last_0_state = 2'b00;
#0 M_AXIS_V_data_1_sel_rd = 1'b0;
#0 M_AXIS_V_data_1_sel_wr = 1'b0;
#0 M_AXIS_V_data_1_state = 2'b00;
#0 M_AXIS_V_last_1_sel_rd = 1'b0;
#0 M_AXIS_V_last_1_sel_wr = 1'b0;
#0 M_AXIS_V_last_1_state = 2'b00;
#0 ap_CS_fsm = 10'b1;
end

AXISTry_mul_32ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
AXISTry_mul_32ns_bkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_128_p0),
    .din1(product_reg_85),
    .ce(grp_fu_128_ce),
    .dout(grp_fu_128_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_data_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_data_1_ack_out) & (1'b1 == M_AXIS_V_data_1_vld_out))) begin
            M_AXIS_V_data_1_sel_rd <= ~M_AXIS_V_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_data_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_data_1_vld_in) & (1'b1 == M_AXIS_V_data_1_ack_in))) begin
            M_AXIS_V_data_1_sel_wr <= ~M_AXIS_V_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_data_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == M_AXIS_V_data_1_vld_in) & (1'b1 == M_AXIS_V_data_1_ack_out) & (ap_const_lv2_3 == M_AXIS_V_data_1_state)) | ((1'b0 == M_AXIS_V_data_1_vld_in) & (ap_const_lv2_2 == M_AXIS_V_data_1_state)))) begin
            M_AXIS_V_data_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == M_AXIS_V_data_1_vld_in) & (1'b0 == M_AXIS_V_data_1_ack_out) & (ap_const_lv2_3 == M_AXIS_V_data_1_state)) | ((1'b0 == M_AXIS_V_data_1_ack_out) & (ap_const_lv2_1 == M_AXIS_V_data_1_state)))) begin
            M_AXIS_V_data_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == M_AXIS_V_data_1_vld_in) & (ap_const_lv2_2 == M_AXIS_V_data_1_state)) | ((1'b1 == M_AXIS_V_data_1_ack_out) & (ap_const_lv2_1 == M_AXIS_V_data_1_state)) | ((ap_const_lv2_3 == M_AXIS_V_data_1_state) & ~((1'b1 == M_AXIS_V_data_1_vld_in) & (1'b0 == M_AXIS_V_data_1_ack_out)) & ~((1'b0 == M_AXIS_V_data_1_vld_in) & (1'b1 == M_AXIS_V_data_1_ack_out))))) begin
            M_AXIS_V_data_1_state <= ap_const_lv2_3;
        end else begin
            M_AXIS_V_data_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_last_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_last_1_ack_out) & (1'b1 == M_AXIS_V_last_1_vld_out))) begin
            M_AXIS_V_last_1_sel_rd <= ~M_AXIS_V_last_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_last_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_last_1_vld_in) & (1'b1 == M_AXIS_V_last_1_ack_in))) begin
            M_AXIS_V_last_1_sel_wr <= ~M_AXIS_V_last_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_last_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == M_AXIS_V_last_1_vld_in) & (1'b1 == M_AXIS_V_last_1_ack_out) & (ap_const_lv2_3 == M_AXIS_V_last_1_state)) | ((1'b0 == M_AXIS_V_last_1_vld_in) & (ap_const_lv2_2 == M_AXIS_V_last_1_state)))) begin
            M_AXIS_V_last_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == M_AXIS_V_last_1_vld_in) & (1'b0 == M_AXIS_V_last_1_ack_out) & (ap_const_lv2_3 == M_AXIS_V_last_1_state)) | ((1'b0 == M_AXIS_V_last_1_ack_out) & (ap_const_lv2_1 == M_AXIS_V_last_1_state)))) begin
            M_AXIS_V_last_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == M_AXIS_V_last_1_vld_in) & (ap_const_lv2_2 == M_AXIS_V_last_1_state)) | ((1'b1 == M_AXIS_V_last_1_ack_out) & (ap_const_lv2_1 == M_AXIS_V_last_1_state)) | ((ap_const_lv2_3 == M_AXIS_V_last_1_state) & ~((1'b1 == M_AXIS_V_last_1_vld_in) & (1'b0 == M_AXIS_V_last_1_ack_out)) & ~((1'b0 == M_AXIS_V_last_1_vld_in) & (1'b1 == M_AXIS_V_last_1_ack_out))))) begin
            M_AXIS_V_last_1_state <= ap_const_lv2_3;
        end else begin
            M_AXIS_V_last_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_data_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == S_AXIS_V_data_0_ack_out) & (1'b1 == S_AXIS_V_data_0_vld_out))) begin
            S_AXIS_V_data_0_sel_rd <= ~S_AXIS_V_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_data_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == S_AXIS_V_data_0_vld_in) & (1'b1 == S_AXIS_V_data_0_ack_in))) begin
            S_AXIS_V_data_0_sel_wr <= ~S_AXIS_V_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_data_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == S_AXIS_V_data_0_vld_in) & (1'b1 == S_AXIS_V_data_0_ack_out) & (S_AXIS_V_data_0_state == ap_const_lv2_3)) | ((1'b0 == S_AXIS_V_data_0_vld_in) & (S_AXIS_V_data_0_state == ap_const_lv2_2)))) begin
            S_AXIS_V_data_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == S_AXIS_V_data_0_vld_in) & (1'b0 == S_AXIS_V_data_0_ack_out) & (S_AXIS_V_data_0_state == ap_const_lv2_3)) | ((1'b0 == S_AXIS_V_data_0_ack_out) & (S_AXIS_V_data_0_state == ap_const_lv2_1)))) begin
            S_AXIS_V_data_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == S_AXIS_V_data_0_vld_in) & (S_AXIS_V_data_0_state == ap_const_lv2_2)) | ((1'b1 == S_AXIS_V_data_0_ack_out) & (S_AXIS_V_data_0_state == ap_const_lv2_1)) | ((S_AXIS_V_data_0_state == ap_const_lv2_3) & ~((1'b1 == S_AXIS_V_data_0_vld_in) & (1'b0 == S_AXIS_V_data_0_ack_out)) & ~((1'b0 == S_AXIS_V_data_0_vld_in) & (1'b1 == S_AXIS_V_data_0_ack_out))))) begin
            S_AXIS_V_data_0_state <= ap_const_lv2_3;
        end else begin
            S_AXIS_V_data_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_last_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == S_AXIS_V_last_0_vld_in) & (1'b1 == S_AXIS_V_last_0_ack_out) & (ap_const_lv2_3 == S_AXIS_V_last_0_state)) | ((1'b0 == S_AXIS_V_last_0_vld_in) & (ap_const_lv2_2 == S_AXIS_V_last_0_state)))) begin
            S_AXIS_V_last_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == S_AXIS_V_last_0_vld_in) & (1'b0 == S_AXIS_V_last_0_ack_out) & (ap_const_lv2_3 == S_AXIS_V_last_0_state)) | ((1'b0 == S_AXIS_V_last_0_ack_out) & (ap_const_lv2_1 == S_AXIS_V_last_0_state)))) begin
            S_AXIS_V_last_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == S_AXIS_V_last_0_vld_in) & (ap_const_lv2_2 == S_AXIS_V_last_0_state)) | ((1'b1 == S_AXIS_V_last_0_ack_out) & (ap_const_lv2_1 == S_AXIS_V_last_0_state)) | ((ap_const_lv2_3 == S_AXIS_V_last_0_state) & ~((1'b1 == S_AXIS_V_last_0_vld_in) & (1'b0 == S_AXIS_V_last_0_ack_out)) & ~((1'b0 == S_AXIS_V_last_0_vld_in) & (1'b1 == S_AXIS_V_last_0_ack_out))))) begin
            S_AXIS_V_last_0_state <= ap_const_lv2_3;
        end else begin
            S_AXIS_V_last_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == exitcond3_fu_108_p2))) begin
        i_1_reg_97 <= ap_const_lv2_0;
    end else if (((1'b1 == ap_CS_fsm_state10) & ~(1'b0 == M_AXIS_V_data_1_ack_in))) begin
        i_1_reg_97 <= i_3_reg_203;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_74 <= i_2_reg_185;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i_reg_74 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        product_reg_85 <= grp_fu_128_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        product_reg_85 <= ap_const_lv64_1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_V_data_1_load_A)) begin
        M_AXIS_V_data_1_payload_A <= write_output_data_fu_166_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_V_data_1_load_B)) begin
        M_AXIS_V_data_1_payload_B <= write_output_data_fu_166_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_V_last_1_load_A)) begin
        M_AXIS_V_last_1_payload_A <= tmp_last_fu_175_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_V_last_1_load_B)) begin
        M_AXIS_V_last_1_payload_B <= tmp_last_fu_175_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == S_AXIS_V_data_0_load_A)) begin
        S_AXIS_V_data_0_payload_A <= S_AXIS_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == S_AXIS_V_data_0_load_B)) begin
        S_AXIS_V_data_0_payload_B <= S_AXIS_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_2_reg_185 <= i_2_fu_114_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~((M_AXIS_V_data_1_ack_in == 1'b0) | (M_AXIS_V_last_1_ack_in == 1'b0) | ((1'b0 == exitcond_fu_134_p2) & (1'b0 == M_AXIS_V_data_1_ack_in))))) begin
        i_3_reg_203 <= i_3_fu_140_p2;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (1'b0 == exitcond_fu_134_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        M_AXIS_TDATA_blk_n = M_AXIS_V_data_1_state[1'b1];
    end else begin
        M_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == M_AXIS_V_data_1_sel)) begin
        M_AXIS_V_data_1_data_out = M_AXIS_V_data_1_payload_B;
    end else begin
        M_AXIS_V_data_1_data_out = M_AXIS_V_data_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == exitcond_fu_134_p2) & ~((M_AXIS_V_data_1_ack_in == 1'b0) | (M_AXIS_V_last_1_ack_in == 1'b0) | ((1'b0 == exitcond_fu_134_p2) & (1'b0 == M_AXIS_V_data_1_ack_in))))) begin
        M_AXIS_V_data_1_vld_in = 1'b1;
    end else begin
        M_AXIS_V_data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == M_AXIS_V_last_1_sel)) begin
        M_AXIS_V_last_1_data_out = M_AXIS_V_last_1_payload_B;
    end else begin
        M_AXIS_V_last_1_data_out = M_AXIS_V_last_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == exitcond_fu_134_p2) & ~((M_AXIS_V_data_1_ack_in == 1'b0) | (M_AXIS_V_last_1_ack_in == 1'b0) | ((1'b0 == exitcond_fu_134_p2) & (1'b0 == M_AXIS_V_data_1_ack_in))))) begin
        M_AXIS_V_last_1_vld_in = 1'b1;
    end else begin
        M_AXIS_V_last_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        S_AXIS_TDATA_blk_n = S_AXIS_V_data_0_state[1'b0];
    end else begin
        S_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(S_AXIS_V_data_0_vld_out == 1'b0))) begin
        S_AXIS_V_data_0_ack_out = 1'b1;
    end else begin
        S_AXIS_V_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == S_AXIS_V_data_0_sel)) begin
        S_AXIS_V_data_0_data_out = S_AXIS_V_data_0_payload_B;
    end else begin
        S_AXIS_V_data_0_data_out = S_AXIS_V_data_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(S_AXIS_V_data_0_vld_out == 1'b0))) begin
        S_AXIS_V_last_0_ack_out = 1'b1;
    end else begin
        S_AXIS_V_last_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1) | ((1'b1 == ap_CS_fsm_state3) & (S_AXIS_V_data_0_vld_out == 1'b0)))) begin
        grp_fu_128_ce = 1'b0;
    end else begin
        grp_fu_128_ce = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (~(1'b0 == exitcond3_fu_108_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (~(S_AXIS_V_data_0_vld_out == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state9 : begin
            if ((~(1'b0 == exitcond_fu_134_p2) & ~((M_AXIS_V_data_1_ack_in == 1'b0) | (M_AXIS_V_last_1_ack_in == 1'b0) | ((1'b0 == exitcond_fu_134_p2) & (1'b0 == M_AXIS_V_data_1_ack_in))))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == exitcond_fu_134_p2) & ~((M_AXIS_V_data_1_ack_in == 1'b0) | (M_AXIS_V_last_1_ack_in == 1'b0) | ((1'b0 == exitcond_fu_134_p2) & (1'b0 == M_AXIS_V_data_1_ack_in))))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (~(1'b0 == M_AXIS_V_data_1_ack_in)) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M_AXIS_TDATA = M_AXIS_V_data_1_data_out;

assign M_AXIS_TLAST = M_AXIS_V_last_1_data_out;

assign M_AXIS_TVALID = M_AXIS_V_last_1_state[1'b0];

assign M_AXIS_V_data_1_ack_in = M_AXIS_V_data_1_state[1'b1];

assign M_AXIS_V_data_1_ack_out = M_AXIS_TREADY;

assign M_AXIS_V_data_1_load_A = (M_AXIS_V_data_1_state_cmp_full & ~M_AXIS_V_data_1_sel_wr);

assign M_AXIS_V_data_1_load_B = (M_AXIS_V_data_1_sel_wr & M_AXIS_V_data_1_state_cmp_full);

assign M_AXIS_V_data_1_sel = M_AXIS_V_data_1_sel_rd;

assign M_AXIS_V_data_1_state_cmp_full = ((M_AXIS_V_data_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign M_AXIS_V_data_1_vld_out = M_AXIS_V_data_1_state[1'b0];

assign M_AXIS_V_last_1_ack_in = M_AXIS_V_last_1_state[1'b1];

assign M_AXIS_V_last_1_ack_out = M_AXIS_TREADY;

assign M_AXIS_V_last_1_load_A = (M_AXIS_V_last_1_state_cmp_full & ~M_AXIS_V_last_1_sel_wr);

assign M_AXIS_V_last_1_load_B = (M_AXIS_V_last_1_sel_wr & M_AXIS_V_last_1_state_cmp_full);

assign M_AXIS_V_last_1_sel = M_AXIS_V_last_1_sel_rd;

assign M_AXIS_V_last_1_state_cmp_full = ((M_AXIS_V_last_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign M_AXIS_V_last_1_vld_out = M_AXIS_V_last_1_state[1'b0];

assign S_AXIS_TREADY = S_AXIS_V_last_0_state[1'b1];

assign S_AXIS_V_data_0_ack_in = S_AXIS_V_data_0_state[1'b1];

assign S_AXIS_V_data_0_load_A = (S_AXIS_V_data_0_state_cmp_full & ~S_AXIS_V_data_0_sel_wr);

assign S_AXIS_V_data_0_load_B = (S_AXIS_V_data_0_sel_wr & S_AXIS_V_data_0_state_cmp_full);

assign S_AXIS_V_data_0_sel = S_AXIS_V_data_0_sel_rd;

assign S_AXIS_V_data_0_state_cmp_full = ((S_AXIS_V_data_0_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign S_AXIS_V_data_0_vld_in = S_AXIS_TVALID;

assign S_AXIS_V_data_0_vld_out = S_AXIS_V_data_0_state[1'b0];

assign S_AXIS_V_last_0_vld_in = S_AXIS_TVALID;

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond3_fu_108_p2 = ((i_reg_74 == ap_const_lv2_2) ? 1'b1 : 1'b0);

assign exitcond_fu_134_p2 = ((i_1_reg_97 == ap_const_lv2_2) ? 1'b1 : 1'b0);

assign grp_fu_128_p0 = grp_fu_128_p00;

assign grp_fu_128_p00 = S_AXIS_V_data_0_data_out;

assign i_2_fu_114_p2 = (i_reg_74 + ap_const_lv2_1);

assign i_3_fu_140_p2 = (i_1_reg_97 + ap_const_lv2_1);

assign tmp_1_fu_162_p1 = product_reg_85[31:0];

assign tmp_5_fu_146_p2 = ((i_1_reg_97 == ap_const_lv2_0) ? 1'b1 : 1'b0);

assign tmp_fu_152_p4 = {{product_reg_85[ap_const_lv32_3F : ap_const_lv32_20]}};

assign tmp_last_fu_175_p2 = ((i_1_reg_97 == ap_const_lv2_1) ? 1'b1 : 1'b0);

assign write_output_data_fu_166_p3 = ((tmp_5_fu_146_p2[0:0] === 1'b1) ? tmp_fu_152_p4 : tmp_1_fu_162_p1);

endmodule //AXISTry
