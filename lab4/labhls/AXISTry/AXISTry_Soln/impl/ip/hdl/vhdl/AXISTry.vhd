-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AXISTry is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    S_AXIS_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    S_AXIS_TVALID : IN STD_LOGIC;
    S_AXIS_TREADY : OUT STD_LOGIC;
    S_AXIS_TLAST : IN STD_LOGIC;
    M_AXIS_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    M_AXIS_TVALID : OUT STD_LOGIC;
    M_AXIS_TREADY : IN STD_LOGIC;
    M_AXIS_TLAST : OUT STD_LOGIC );
end;


architecture behav of AXISTry is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "AXISTry,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.080000,HLS_SYN_LAT=20,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=8,HLS_SYN_FF=226,HLS_SYN_LUT=198}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal S_AXIS_V_data_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal S_AXIS_V_data_0_vld_in : STD_LOGIC;
    signal S_AXIS_V_data_0_vld_out : STD_LOGIC;
    signal S_AXIS_V_data_0_ack_in : STD_LOGIC;
    signal S_AXIS_V_data_0_ack_out : STD_LOGIC;
    signal S_AXIS_V_data_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal S_AXIS_V_data_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal S_AXIS_V_data_0_sel_rd : STD_LOGIC := '0';
    signal S_AXIS_V_data_0_sel_wr : STD_LOGIC := '0';
    signal S_AXIS_V_data_0_sel : STD_LOGIC;
    signal S_AXIS_V_data_0_load_A : STD_LOGIC;
    signal S_AXIS_V_data_0_load_B : STD_LOGIC;
    signal S_AXIS_V_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal S_AXIS_V_data_0_state_cmp_full : STD_LOGIC;
    signal S_AXIS_V_last_0_vld_in : STD_LOGIC;
    signal S_AXIS_V_last_0_ack_out : STD_LOGIC;
    signal S_AXIS_V_last_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal M_AXIS_V_data_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal M_AXIS_V_data_1_vld_in : STD_LOGIC;
    signal M_AXIS_V_data_1_vld_out : STD_LOGIC;
    signal M_AXIS_V_data_1_ack_in : STD_LOGIC;
    signal M_AXIS_V_data_1_ack_out : STD_LOGIC;
    signal M_AXIS_V_data_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal M_AXIS_V_data_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal M_AXIS_V_data_1_sel_rd : STD_LOGIC := '0';
    signal M_AXIS_V_data_1_sel_wr : STD_LOGIC := '0';
    signal M_AXIS_V_data_1_sel : STD_LOGIC;
    signal M_AXIS_V_data_1_load_A : STD_LOGIC;
    signal M_AXIS_V_data_1_load_B : STD_LOGIC;
    signal M_AXIS_V_data_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal M_AXIS_V_data_1_state_cmp_full : STD_LOGIC;
    signal M_AXIS_V_last_1_data_out : STD_LOGIC;
    signal M_AXIS_V_last_1_vld_in : STD_LOGIC;
    signal M_AXIS_V_last_1_vld_out : STD_LOGIC;
    signal M_AXIS_V_last_1_ack_in : STD_LOGIC;
    signal M_AXIS_V_last_1_ack_out : STD_LOGIC;
    signal M_AXIS_V_last_1_payload_A : STD_LOGIC;
    signal M_AXIS_V_last_1_payload_B : STD_LOGIC;
    signal M_AXIS_V_last_1_sel_rd : STD_LOGIC := '0';
    signal M_AXIS_V_last_1_sel_wr : STD_LOGIC := '0';
    signal M_AXIS_V_last_1_sel : STD_LOGIC;
    signal M_AXIS_V_last_1_load_A : STD_LOGIC;
    signal M_AXIS_V_last_1_load_B : STD_LOGIC;
    signal M_AXIS_V_last_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal M_AXIS_V_last_1_state_cmp_full : STD_LOGIC;
    signal S_AXIS_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal M_AXIS_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal exitcond_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_2_fu_114_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_185 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_128_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_3_fu_140_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_3_reg_203 : STD_LOGIC_VECTOR (1 downto 0);
    signal write_output_data_fu_166_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_last_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_74 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal product_reg_85 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_reg_97 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond3_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_128_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_152_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_162_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_128_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_128_p00 : STD_LOGIC_VECTOR (63 downto 0);

    component AXISTry_mul_32ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    AXISTry_mul_32ns_bkb_U0 : component AXISTry_mul_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_128_p0,
        din1 => product_reg_85,
        ce => grp_fu_128_ce,
        dout => grp_fu_128_p2);





    M_AXIS_V_data_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_data_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = M_AXIS_V_data_1_ack_out) and (ap_const_logic_1 = M_AXIS_V_data_1_vld_out))) then 
                                        M_AXIS_V_data_1_sel_rd <= not(M_AXIS_V_data_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_data_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_data_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = M_AXIS_V_data_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_data_1_ack_in))) then 
                                        M_AXIS_V_data_1_sel_wr <= not(M_AXIS_V_data_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_data_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_data_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = M_AXIS_V_data_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_data_1_ack_out) and (ap_const_lv2_3 = M_AXIS_V_data_1_state)) or ((ap_const_logic_0 = M_AXIS_V_data_1_vld_in) and (ap_const_lv2_2 = M_AXIS_V_data_1_state)))) then 
                    M_AXIS_V_data_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = M_AXIS_V_data_1_vld_in) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_out) and (ap_const_lv2_3 = M_AXIS_V_data_1_state)) or ((ap_const_logic_0 = M_AXIS_V_data_1_ack_out) and (ap_const_lv2_1 = M_AXIS_V_data_1_state)))) then 
                    M_AXIS_V_data_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = M_AXIS_V_data_1_vld_in) and (ap_const_lv2_2 = M_AXIS_V_data_1_state)) or ((ap_const_logic_1 = M_AXIS_V_data_1_ack_out) and (ap_const_lv2_1 = M_AXIS_V_data_1_state)) or ((ap_const_lv2_3 = M_AXIS_V_data_1_state) and not(((ap_const_logic_1 = M_AXIS_V_data_1_vld_in) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_out))) and not(((ap_const_logic_0 = M_AXIS_V_data_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_data_1_ack_out)))))) then 
                    M_AXIS_V_data_1_state <= ap_const_lv2_3;
                else 
                    M_AXIS_V_data_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_last_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_last_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = M_AXIS_V_last_1_ack_out) and (ap_const_logic_1 = M_AXIS_V_last_1_vld_out))) then 
                                        M_AXIS_V_last_1_sel_rd <= not(M_AXIS_V_last_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_last_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_last_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = M_AXIS_V_last_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_last_1_ack_in))) then 
                                        M_AXIS_V_last_1_sel_wr <= not(M_AXIS_V_last_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_last_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_last_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = M_AXIS_V_last_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_last_1_ack_out) and (ap_const_lv2_3 = M_AXIS_V_last_1_state)) or ((ap_const_logic_0 = M_AXIS_V_last_1_vld_in) and (ap_const_lv2_2 = M_AXIS_V_last_1_state)))) then 
                    M_AXIS_V_last_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = M_AXIS_V_last_1_vld_in) and (ap_const_logic_0 = M_AXIS_V_last_1_ack_out) and (ap_const_lv2_3 = M_AXIS_V_last_1_state)) or ((ap_const_logic_0 = M_AXIS_V_last_1_ack_out) and (ap_const_lv2_1 = M_AXIS_V_last_1_state)))) then 
                    M_AXIS_V_last_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = M_AXIS_V_last_1_vld_in) and (ap_const_lv2_2 = M_AXIS_V_last_1_state)) or ((ap_const_logic_1 = M_AXIS_V_last_1_ack_out) and (ap_const_lv2_1 = M_AXIS_V_last_1_state)) or ((ap_const_lv2_3 = M_AXIS_V_last_1_state) and not(((ap_const_logic_1 = M_AXIS_V_last_1_vld_in) and (ap_const_logic_0 = M_AXIS_V_last_1_ack_out))) and not(((ap_const_logic_0 = M_AXIS_V_last_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_last_1_ack_out)))))) then 
                    M_AXIS_V_last_1_state <= ap_const_lv2_3;
                else 
                    M_AXIS_V_last_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = S_AXIS_V_data_0_ack_out) and (ap_const_logic_1 = S_AXIS_V_data_0_vld_out))) then 
                                        S_AXIS_V_data_0_sel_rd <= not(S_AXIS_V_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = S_AXIS_V_data_0_vld_in) and (ap_const_logic_1 = S_AXIS_V_data_0_ack_in))) then 
                                        S_AXIS_V_data_0_sel_wr <= not(S_AXIS_V_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_data_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = S_AXIS_V_data_0_vld_in) and (ap_const_logic_1 = S_AXIS_V_data_0_ack_out) and (S_AXIS_V_data_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = S_AXIS_V_data_0_vld_in) and (S_AXIS_V_data_0_state = ap_const_lv2_2)))) then 
                    S_AXIS_V_data_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = S_AXIS_V_data_0_vld_in) and (ap_const_logic_0 = S_AXIS_V_data_0_ack_out) and (S_AXIS_V_data_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = S_AXIS_V_data_0_ack_out) and (S_AXIS_V_data_0_state = ap_const_lv2_1)))) then 
                    S_AXIS_V_data_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = S_AXIS_V_data_0_vld_in) and (S_AXIS_V_data_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = S_AXIS_V_data_0_ack_out) and (S_AXIS_V_data_0_state = ap_const_lv2_1)) or ((S_AXIS_V_data_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = S_AXIS_V_data_0_vld_in) and (ap_const_logic_0 = S_AXIS_V_data_0_ack_out))) and not(((ap_const_logic_0 = S_AXIS_V_data_0_vld_in) and (ap_const_logic_1 = S_AXIS_V_data_0_ack_out)))))) then 
                    S_AXIS_V_data_0_state <= ap_const_lv2_3;
                else 
                    S_AXIS_V_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_last_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_last_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = S_AXIS_V_last_0_vld_in) and (ap_const_logic_1 = S_AXIS_V_last_0_ack_out) and (ap_const_lv2_3 = S_AXIS_V_last_0_state)) or ((ap_const_logic_0 = S_AXIS_V_last_0_vld_in) and (ap_const_lv2_2 = S_AXIS_V_last_0_state)))) then 
                    S_AXIS_V_last_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = S_AXIS_V_last_0_vld_in) and (ap_const_logic_0 = S_AXIS_V_last_0_ack_out) and (ap_const_lv2_3 = S_AXIS_V_last_0_state)) or ((ap_const_logic_0 = S_AXIS_V_last_0_ack_out) and (ap_const_lv2_1 = S_AXIS_V_last_0_state)))) then 
                    S_AXIS_V_last_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = S_AXIS_V_last_0_vld_in) and (ap_const_lv2_2 = S_AXIS_V_last_0_state)) or ((ap_const_logic_1 = S_AXIS_V_last_0_ack_out) and (ap_const_lv2_1 = S_AXIS_V_last_0_state)) or ((ap_const_lv2_3 = S_AXIS_V_last_0_state) and not(((ap_const_logic_1 = S_AXIS_V_last_0_vld_in) and (ap_const_logic_0 = S_AXIS_V_last_0_ack_out))) and not(((ap_const_logic_0 = S_AXIS_V_last_0_vld_in) and (ap_const_logic_1 = S_AXIS_V_last_0_ack_out)))))) then 
                    S_AXIS_V_last_0_state <= ap_const_lv2_3;
                else 
                    S_AXIS_V_last_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = exitcond3_fu_108_p2)))) then 
                i_1_reg_97 <= ap_const_lv2_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state10) and not((ap_const_logic_0 = M_AXIS_V_data_1_ack_in)))) then 
                i_1_reg_97 <= i_3_reg_203;
            end if; 
        end if;
    end process;

    i_reg_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
                i_reg_74 <= i_2_reg_185;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state1))) then 
                i_reg_74 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    product_reg_85_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
                product_reg_85 <= grp_fu_128_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state1))) then 
                product_reg_85 <= ap_const_lv64_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = M_AXIS_V_data_1_load_A)) then
                M_AXIS_V_data_1_payload_A <= write_output_data_fu_166_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = M_AXIS_V_data_1_load_B)) then
                M_AXIS_V_data_1_payload_B <= write_output_data_fu_166_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = M_AXIS_V_last_1_load_A)) then
                M_AXIS_V_last_1_payload_A <= tmp_last_fu_175_p2(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = M_AXIS_V_last_1_load_B)) then
                M_AXIS_V_last_1_payload_B <= tmp_last_fu_175_p2(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = S_AXIS_V_data_0_load_A)) then
                S_AXIS_V_data_0_payload_A <= S_AXIS_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = S_AXIS_V_data_0_load_B)) then
                S_AXIS_V_data_0_payload_B <= S_AXIS_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                i_2_reg_185 <= i_2_fu_114_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not(((M_AXIS_V_data_1_ack_in = ap_const_logic_0) or (M_AXIS_V_last_1_ack_in = ap_const_logic_0) or ((ap_const_lv1_0 = exitcond_fu_134_p2) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_in)))))) then
                i_3_reg_203 <= i_3_fu_140_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (S_AXIS_V_data_0_vld_out, M_AXIS_V_data_1_ack_in, M_AXIS_V_last_1_ack_in, ap_CS_fsm, exitcond_fu_134_p2, exitcond3_fu_108_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_108_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (not((S_AXIS_V_data_0_vld_out = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state9 => 
                if ((not((ap_const_lv1_0 = exitcond_fu_134_p2)) and not(((M_AXIS_V_data_1_ack_in = ap_const_logic_0) or (M_AXIS_V_last_1_ack_in = ap_const_logic_0) or ((ap_const_lv1_0 = exitcond_fu_134_p2) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_in)))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_lv1_0 = exitcond_fu_134_p2) and not(((M_AXIS_V_data_1_ack_in = ap_const_logic_0) or (M_AXIS_V_last_1_ack_in = ap_const_logic_0) or ((ap_const_lv1_0 = exitcond_fu_134_p2) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_in)))))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (not((ap_const_logic_0 = M_AXIS_V_data_1_ack_in))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    M_AXIS_TDATA <= M_AXIS_V_data_1_data_out;

    M_AXIS_TDATA_blk_n_assign_proc : process(M_AXIS_V_data_1_state, ap_CS_fsm_state9, exitcond_fu_134_p2, ap_CS_fsm_state10)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond_fu_134_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_state10)))) then 
            M_AXIS_TDATA_blk_n <= M_AXIS_V_data_1_state(1);
        else 
            M_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    M_AXIS_TLAST <= M_AXIS_V_last_1_data_out;
    M_AXIS_TVALID <= M_AXIS_V_last_1_state(0);
    M_AXIS_V_data_1_ack_in <= M_AXIS_V_data_1_state(1);
    M_AXIS_V_data_1_ack_out <= M_AXIS_TREADY;

    M_AXIS_V_data_1_data_out_assign_proc : process(M_AXIS_V_data_1_payload_A, M_AXIS_V_data_1_payload_B, M_AXIS_V_data_1_sel)
    begin
        if ((ap_const_logic_1 = M_AXIS_V_data_1_sel)) then 
            M_AXIS_V_data_1_data_out <= M_AXIS_V_data_1_payload_B;
        else 
            M_AXIS_V_data_1_data_out <= M_AXIS_V_data_1_payload_A;
        end if; 
    end process;

    M_AXIS_V_data_1_load_A <= (M_AXIS_V_data_1_state_cmp_full and not(M_AXIS_V_data_1_sel_wr));
    M_AXIS_V_data_1_load_B <= (M_AXIS_V_data_1_sel_wr and M_AXIS_V_data_1_state_cmp_full);
    M_AXIS_V_data_1_sel <= M_AXIS_V_data_1_sel_rd;
    M_AXIS_V_data_1_state_cmp_full <= '0' when (M_AXIS_V_data_1_state = ap_const_lv2_1) else '1';

    M_AXIS_V_data_1_vld_in_assign_proc : process(M_AXIS_V_data_1_ack_in, M_AXIS_V_last_1_ack_in, ap_CS_fsm_state9, exitcond_fu_134_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond_fu_134_p2) and not(((M_AXIS_V_data_1_ack_in = ap_const_logic_0) or (M_AXIS_V_last_1_ack_in = ap_const_logic_0) or ((ap_const_lv1_0 = exitcond_fu_134_p2) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_in)))))) then 
            M_AXIS_V_data_1_vld_in <= ap_const_logic_1;
        else 
            M_AXIS_V_data_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    M_AXIS_V_data_1_vld_out <= M_AXIS_V_data_1_state(0);
    M_AXIS_V_last_1_ack_in <= M_AXIS_V_last_1_state(1);
    M_AXIS_V_last_1_ack_out <= M_AXIS_TREADY;

    M_AXIS_V_last_1_data_out_assign_proc : process(M_AXIS_V_last_1_payload_A, M_AXIS_V_last_1_payload_B, M_AXIS_V_last_1_sel)
    begin
        if ((ap_const_logic_1 = M_AXIS_V_last_1_sel)) then 
            M_AXIS_V_last_1_data_out <= M_AXIS_V_last_1_payload_B;
        else 
            M_AXIS_V_last_1_data_out <= M_AXIS_V_last_1_payload_A;
        end if; 
    end process;

    M_AXIS_V_last_1_load_A <= (M_AXIS_V_last_1_state_cmp_full and not(M_AXIS_V_last_1_sel_wr));
    M_AXIS_V_last_1_load_B <= (M_AXIS_V_last_1_sel_wr and M_AXIS_V_last_1_state_cmp_full);
    M_AXIS_V_last_1_sel <= M_AXIS_V_last_1_sel_rd;
    M_AXIS_V_last_1_state_cmp_full <= '0' when (M_AXIS_V_last_1_state = ap_const_lv2_1) else '1';

    M_AXIS_V_last_1_vld_in_assign_proc : process(M_AXIS_V_data_1_ack_in, M_AXIS_V_last_1_ack_in, ap_CS_fsm_state9, exitcond_fu_134_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond_fu_134_p2) and not(((M_AXIS_V_data_1_ack_in = ap_const_logic_0) or (M_AXIS_V_last_1_ack_in = ap_const_logic_0) or ((ap_const_lv1_0 = exitcond_fu_134_p2) and (ap_const_logic_0 = M_AXIS_V_data_1_ack_in)))))) then 
            M_AXIS_V_last_1_vld_in <= ap_const_logic_1;
        else 
            M_AXIS_V_last_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    M_AXIS_V_last_1_vld_out <= M_AXIS_V_last_1_state(0);

    S_AXIS_TDATA_blk_n_assign_proc : process(S_AXIS_V_data_0_state, ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            S_AXIS_TDATA_blk_n <= S_AXIS_V_data_0_state(0);
        else 
            S_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    S_AXIS_TREADY <= S_AXIS_V_last_0_state(1);
    S_AXIS_V_data_0_ack_in <= S_AXIS_V_data_0_state(1);

    S_AXIS_V_data_0_ack_out_assign_proc : process(S_AXIS_V_data_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0)))) then 
            S_AXIS_V_data_0_ack_out <= ap_const_logic_1;
        else 
            S_AXIS_V_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    S_AXIS_V_data_0_data_out_assign_proc : process(S_AXIS_V_data_0_payload_A, S_AXIS_V_data_0_payload_B, S_AXIS_V_data_0_sel)
    begin
        if ((ap_const_logic_1 = S_AXIS_V_data_0_sel)) then 
            S_AXIS_V_data_0_data_out <= S_AXIS_V_data_0_payload_B;
        else 
            S_AXIS_V_data_0_data_out <= S_AXIS_V_data_0_payload_A;
        end if; 
    end process;

    S_AXIS_V_data_0_load_A <= (S_AXIS_V_data_0_state_cmp_full and not(S_AXIS_V_data_0_sel_wr));
    S_AXIS_V_data_0_load_B <= (S_AXIS_V_data_0_sel_wr and S_AXIS_V_data_0_state_cmp_full);
    S_AXIS_V_data_0_sel <= S_AXIS_V_data_0_sel_rd;
    S_AXIS_V_data_0_state_cmp_full <= '0' when (S_AXIS_V_data_0_state = ap_const_lv2_1) else '1';
    S_AXIS_V_data_0_vld_in <= S_AXIS_TVALID;
    S_AXIS_V_data_0_vld_out <= S_AXIS_V_data_0_state(0);

    S_AXIS_V_last_0_ack_out_assign_proc : process(S_AXIS_V_data_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((S_AXIS_V_data_0_vld_out = ap_const_logic_0)))) then 
            S_AXIS_V_last_0_ack_out <= ap_const_logic_1;
        else 
            S_AXIS_V_last_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    S_AXIS_V_last_0_vld_in <= S_AXIS_TVALID;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond3_fu_108_p2 <= "1" when (i_reg_74 = ap_const_lv2_2) else "0";
    exitcond_fu_134_p2 <= "1" when (i_1_reg_97 = ap_const_lv2_2) else "0";

    grp_fu_128_ce_assign_proc : process(S_AXIS_V_data_0_vld_out, ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state2, ap_CS_fsm_state1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) or (ap_const_lv1_1 = ap_CS_fsm_state10) or (ap_const_lv1_1 = ap_CS_fsm_state2) or (ap_const_lv1_1 = ap_CS_fsm_state1) or ((ap_const_lv1_1 = ap_CS_fsm_state3) and (S_AXIS_V_data_0_vld_out = ap_const_logic_0)))) then 
            grp_fu_128_ce <= ap_const_logic_0;
        else 
            grp_fu_128_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_128_p0 <= grp_fu_128_p00(32 - 1 downto 0);
    grp_fu_128_p00 <= std_logic_vector(resize(unsigned(S_AXIS_V_data_0_data_out),64));
    i_2_fu_114_p2 <= std_logic_vector(unsigned(i_reg_74) + unsigned(ap_const_lv2_1));
    i_3_fu_140_p2 <= std_logic_vector(unsigned(i_1_reg_97) + unsigned(ap_const_lv2_1));
    tmp_1_fu_162_p1 <= product_reg_85(32 - 1 downto 0);
    tmp_5_fu_146_p2 <= "1" when (i_1_reg_97 = ap_const_lv2_0) else "0";
    tmp_fu_152_p4 <= product_reg_85(63 downto 32);
    tmp_last_fu_175_p2 <= "1" when (i_1_reg_97 = ap_const_lv2_1) else "0";
    write_output_data_fu_166_p3 <= 
        tmp_fu_152_p4 when (tmp_5_fu_146_p2(0) = '1') else 
        tmp_1_fu_162_p1;
end behav;
